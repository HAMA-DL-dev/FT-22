
22FOURTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a718  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800a8e8  0800a8e8  0001a8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af14  0800af14  00020318  2**0
                  CONTENTS
  4 .ARM          00000008  0800af14  0800af14  0001af14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af1c  0800af1c  00020318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af20  0800af20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0800af24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000318  0800b23c  00020318  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  0800b23c  00020ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d5  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002529  00000000  00000000  00030d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00034178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004707  00000000  00000000  00034f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9e2  00000000  00000000  0003969f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d425d  00000000  00000000  00046081  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a2de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  0011a35c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000318 	.word	0x20000318
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a8d0 	.word	0x0800a8d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000031c 	.word	0x2000031c
 800020c:	0800a8d0 	.word	0x0800a8d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f000 fb86 	bl	80016e8 <bno055_writeData>
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <bno055_getOperationMode>:

bno055_opmode_t bno055_getOperationMode() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	203d      	movs	r0, #61	; 0x3d
 8000ff2:	f000 fc65 	bl	80018c0 <bno055_readData>
  return mode;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <bno055_setOperationMode>:
	bno055_pwrmode_t pwrmode;
	bno055_readData(BNO055_PWR_MODE, &pwrmode, 1);
	return pwrmode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4619      	mov	r1, r3
 800100e:	203d      	movs	r0, #61	; 0x3d
 8001010:	f000 fb6a 	bl	80016e8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800101a:	2013      	movs	r0, #19
 800101c:	f000 fb58 	bl	80016d0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001020:	e002      	b.n	8001028 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fb54 	bl	80016d0 <bno055_delay>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <bno055_setOperationModeConfig>:
void bno055_setPowerMode(bno055_pwrmode_t pwrmode){
	bno055_writeData(BNO055_PWR_MODE,pwrmode);
	bno055_delay(7);
}
void bno055_setOperationModeConfig() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ffe3 	bl	8001000 <bno055_setOperationMode>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001042:	2120      	movs	r1, #32
 8001044:	203f      	movs	r0, #63	; 0x3f
 8001046:	f000 fb4f 	bl	80016e8 <bno055_writeData>
  bno055_delay(700);
 800104a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800104e:	f000 fb3f 	bl	80016d0 <bno055_delay>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  bno055_reset();
 800105e:	f7ff ffee 	bl	800103e <bno055_reset>

  uint8_t id = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fc27 	bl	80018c0 <bno055_readData>
  if (id != BNO055_ID) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2ba0      	cmp	r3, #160	; 0xa0
 8001076:	d004      	beq.n	8001082 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4619      	mov	r1, r3
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <bno055_setup+0x4c>)
 800107e:	f005 fe89 	bl	8006d94 <iprintf>
  }
  bno055_setPage(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffa0 	bl	8000fc8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001088:	2100      	movs	r1, #0
 800108a:	203f      	movs	r0, #63	; 0x3f
 800108c:	f000 fb2c 	bl	80016e8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001090:	f7ff ffce 	bl	8001030 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f000 fb1b 	bl	80016d0 <bno055_delay>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800a8e8 	.word	0x0800a8e8

080010a8 <bno055_setCalibrationData>:
  bno055_setOperationMode(operationMode);

  return calData;
}

void bno055_setCalibrationData(bno055_calibration_data_t calData) {
 80010a8:	b084      	sub	sp, #16
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	f107 0c20 	add.w	ip, r7, #32
 80010b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t buffer[22];
  bno055_opmode_t operationMode = bno055_getOperationMode();
 80010b8:	f7ff ff94 	bl	8000fe4 <bno055_getOperationMode>
 80010bc:	4603      	mov	r3, r0
 80010be:	75bb      	strb	r3, [r7, #22]
  bno055_setOperationModeConfig();
 80010c0:	f7ff ffb6 	bl	8001030 <bno055_setOperationModeConfig>
  bno055_setPage(0);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff7f 	bl	8000fc8 <bno055_setPage>

  // Assumes litle endian processor
  memcpy(buffer, &calData.offset.accel, 6);
 80010ca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80010ce:	463b      	mov	r3, r7
 80010d0:	2206      	movs	r2, #6
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 f9ee 	bl	80064b4 <memcpy>
  memcpy(buffer + 6, &calData.offset.mag, 6);
 80010d8:	463b      	mov	r3, r7
 80010da:	3306      	adds	r3, #6
 80010dc:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80010e0:	2206      	movs	r2, #6
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 f9e6 	bl	80064b4 <memcpy>
  memcpy(buffer + 12, &calData.offset.gyro, 6);
 80010e8:	463b      	mov	r3, r7
 80010ea:	330c      	adds	r3, #12
 80010ec:	2206      	movs	r2, #6
 80010ee:	f107 0120 	add.w	r1, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 f9de 	bl	80064b4 <memcpy>
  memcpy(buffer + 18, &calData.radius.accel, 2);
 80010f8:	463b      	mov	r3, r7
 80010fa:	3312      	adds	r3, #18
 80010fc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010fe:	801a      	strh	r2, [r3, #0]
  memcpy(buffer + 20, &calData.radius.mag, 2);
 8001100:	463b      	mov	r3, r7
 8001102:	3314      	adds	r3, #20
 8001104:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001106:	801a      	strh	r2, [r3, #0]

  for (uint8_t i=0; i < 22; i++) {
 8001108:	2300      	movs	r3, #0
 800110a:	75fb      	strb	r3, [r7, #23]
 800110c:	e00f      	b.n	800112e <bno055_setCalibrationData+0x86>
    // TODO(oliv4945): create multibytes write
    bno055_writeData(BNO055_ACC_OFFSET_X_LSB+i, buffer[i]);
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	3355      	adds	r3, #85	; 0x55
 8001112:	b2da      	uxtb	r2, r3
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	f107 0118 	add.w	r1, r7, #24
 800111a:	440b      	add	r3, r1
 800111c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f000 fae0 	bl	80016e8 <bno055_writeData>
  for (uint8_t i=0; i < 22; i++) {
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	3301      	adds	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b15      	cmp	r3, #21
 8001132:	d9ec      	bls.n	800110e <bno055_setCalibrationData+0x66>
  }

  bno055_setOperationMode(operationMode);
 8001134:	7dbb      	ldrb	r3, [r7, #22]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff62 	bl	8001000 <bno055_setOperationMode>
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001146:	b004      	add	sp, #16
 8001148:	4770      	bx	lr
	...

0800114c <bno055_getVector>:

bno055_vector_t bno055_getVector(uint8_t vec) {
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b093      	sub	sp, #76	; 0x4c
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	75fb      	strb	r3, [r7, #23]
  bno055_setPage(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ff36 	bl	8000fc8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b20      	cmp	r3, #32
 8001160:	d107      	bne.n	8001172 <bno055_getVector+0x26>
    bno055_readData(vec, buffer, 8);
 8001162:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	2208      	movs	r2, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fba8 	bl	80018c0 <bno055_readData>
 8001170:	e006      	b.n	8001180 <bno055_getVector+0x34>
  else
    bno055_readData(vec, buffer, 6);
 8001172:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	2206      	movs	r2, #6
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fba0 	bl	80018c0 <bno055_readData>

  double scale = 1;
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	4c8c      	ldr	r4, [pc, #560]	; (80013b8 <bno055_getVector+0x26c>)
 8001186:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	2b0e      	cmp	r3, #14
 800118e:	d109      	bne.n	80011a4 <bno055_getVector+0x58>
    scale = magScale;
 8001190:	4b8a      	ldr	r3, [pc, #552]	; (80013bc <bno055_getVector+0x270>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9d5 	bl	8000544 <__aeabi_ui2d>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80011a2:	e038      	b.n	8001216 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d005      	beq.n	80011b6 <bno055_getVector+0x6a>
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b28      	cmp	r3, #40	; 0x28
 80011ae:	d002      	beq.n	80011b6 <bno055_getVector+0x6a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b2e      	cmp	r3, #46	; 0x2e
 80011b4:	d109      	bne.n	80011ca <bno055_getVector+0x7e>
    scale = accelScale;
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <bno055_getVector+0x274>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9c2 	bl	8000544 <__aeabi_ui2d>
 80011c0:	4603      	mov	r3, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80011c8:	e025      	b.n	8001216 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	2b14      	cmp	r3, #20
 80011ce:	d109      	bne.n	80011e4 <bno055_getVector+0x98>
    scale = angularRateScale;
 80011d0:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <bno055_getVector+0x278>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9b5 	bl	8000544 <__aeabi_ui2d>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80011e2:	e018      	b.n	8001216 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b1a      	cmp	r3, #26
 80011e8:	d109      	bne.n	80011fe <bno055_getVector+0xb2>
    scale = eulerScale;
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <bno055_getVector+0x27c>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9a8 	bl	8000544 <__aeabi_ui2d>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80011fc:	e00b      	b.n	8001216 <bno055_getVector+0xca>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b20      	cmp	r3, #32
 8001202:	d108      	bne.n	8001216 <bno055_getVector+0xca>
    scale = quaScale;
 8001204:	4b71      	ldr	r3, [pc, #452]	; (80013cc <bno055_getVector+0x280>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f99b 	bl	8000544 <__aeabi_ui2d>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d160      	bne.n	80012ec <bno055_getVector+0x1a0>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800122a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21b      	sxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f991 	bl	8000564 <__aeabi_i2d>
 8001242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001246:	f7ff fb21 	bl	800088c <__aeabi_ddiv>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	f7ff fce9 	bl	8000c28 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800125a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f979 	bl	8000564 <__aeabi_i2d>
 8001272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001276:	f7ff fb09 	bl	800088c <__aeabi_ddiv>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4618      	mov	r0, r3
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff fcd1 	bl	8000c28 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800128a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f961 	bl	8000564 <__aeabi_i2d>
 80012a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012a6:	f7ff faf1 	bl	800088c <__aeabi_ddiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff fcb9 	bl	8000c28 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80012ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f949 	bl	8000564 <__aeabi_i2d>
 80012d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012d6:	f7ff fad9 	bl	800088c <__aeabi_ddiv>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	f7ff fca1 	bl	8000c28 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	e047      	b.n	800137c <bno055_getVector+0x230>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80012ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f930 	bl	8000564 <__aeabi_i2d>
 8001304:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001308:	f7ff fac0 	bl	800088c <__aeabi_ddiv>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4618      	mov	r0, r3
 8001312:	4621      	mov	r1, r4
 8001314:	f7ff fc88 	bl	8000c28 <__aeabi_d2f>
 8001318:	4603      	mov	r3, r0
 800131a:	61fb      	str	r3, [r7, #28]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800131c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f918 	bl	8000564 <__aeabi_i2d>
 8001334:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001338:	f7ff faa8 	bl	800088c <__aeabi_ddiv>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	4618      	mov	r0, r3
 8001342:	4621      	mov	r1, r4
 8001344:	f7ff fc70 	bl	8000c28 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	623b      	str	r3, [r7, #32]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800134c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21b      	sxth	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f900 	bl	8000564 <__aeabi_i2d>
 8001364:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001368:	f7ff fa90 	bl	800088c <__aeabi_ddiv>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4618      	mov	r0, r3
 8001372:	4621      	mov	r1, r4
 8001374:	f7ff fc58 	bl	8000c28 <__aeabi_d2f>
 8001378:	4603      	mov	r3, r0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return xyz;
 800137c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800138a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800138c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800138e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001392:	ee06 0a10 	vmov	s12, r0
 8001396:	ee06 1a90 	vmov	s13, r1
 800139a:	ee07 2a10 	vmov	s14, r2
 800139e:	ee07 3a90 	vmov	s15, r3
}
 80013a2:	eeb0 0a46 	vmov.f32	s0, s12
 80013a6:	eef0 0a66 	vmov.f32	s1, s13
 80013aa:	eeb0 1a47 	vmov.f32	s2, s14
 80013ae:	eef0 1a67 	vmov.f32	s3, s15
 80013b2:	374c      	adds	r7, #76	; 0x4c
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	3ff00000 	.word	0x3ff00000
 80013bc:	20000006 	.word	0x20000006
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000002 	.word	0x20000002
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000008 	.word	0x20000008

080013d0 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80013d6:	201a      	movs	r0, #26
 80013d8:	f7ff feb8 	bl	800114c <bno055_getVector>
 80013dc:	eeb0 6a40 	vmov.f32	s12, s0
 80013e0:	eef0 6a60 	vmov.f32	s13, s1
 80013e4:	eeb0 7a41 	vmov.f32	s14, s2
 80013e8:	eef0 7a61 	vmov.f32	s15, s3
 80013ec:	ed87 6a04 	vstr	s12, [r7, #16]
 80013f0:	edc7 6a05 	vstr	s13, [r7, #20]
 80013f4:	ed87 7a06 	vstr	s14, [r7, #24]
 80013f8:	edc7 7a07 	vstr	s15, [r7, #28]
 80013fc:	6938      	ldr	r0, [r7, #16]
 80013fe:	6979      	ldr	r1, [r7, #20]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	ee06 0a10 	vmov	s12, r0
 8001408:	ee06 1a90 	vmov	s13, r1
 800140c:	ee07 2a10 	vmov	s14, r2
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a46 	vmov.f32	s0, s12
 8001418:	eef0 0a66 	vmov.f32	s1, s13
 800141c:	eeb0 1a47 	vmov.f32	s2, s14
 8001420:	eef0 1a67 	vmov.f32	s3, s15
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af02      	add	r7, sp, #8
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f023 030f 	bic.w	r3, r3, #15
 800143c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f043 030c 	orr.w	r3, r3, #12
 800144a:	b2db      	uxtb	r3, r3
 800144c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	b2db      	uxtb	r3, r3
 8001456:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	f043 030c 	orr.w	r3, r3, #12
 800145e:	b2db      	uxtb	r3, r3
 8001460:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	b2db      	uxtb	r3, r3
 800146a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	2364      	movs	r3, #100	; 0x64
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2304      	movs	r3, #4
 8001476:	214e      	movs	r1, #78	; 0x4e
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <lcd_send_cmd+0x5c>)
 800147a:	f002 ff05 	bl	8004288 <HAL_I2C_Master_Transmit>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200003f8 	.word	0x200003f8

0800148c <lcd_send_data>:

void lcd_send_data (char data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f043 030d 	orr.w	r3, r3, #13
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	f043 0309 	orr.w	r3, r3, #9
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	f043 030d 	orr.w	r3, r3, #13
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	f043 0309 	orr.w	r3, r3, #9
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014cc:	f107 0208 	add.w	r2, r7, #8
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2304      	movs	r3, #4
 80014d6:	214e      	movs	r1, #78	; 0x4e
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <lcd_send_data+0x5c>)
 80014da:	f002 fed5 	bl	8004288 <HAL_I2C_Master_Transmit>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200003f8 	.word	0x200003f8

080014ec <lcd_clear>:

void lcd_clear (void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80014f2:	2080      	movs	r0, #128	; 0x80
 80014f4:	f7ff ff9a 	bl	800142c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	e005      	b.n	800150a <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 80014fe:	2020      	movs	r0, #32
 8001500:	f7ff ffc4 	bl	800148c <lcd_send_data>
	for (int i=0; i<70; i++)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3301      	adds	r3, #1
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b45      	cmp	r3, #69	; 0x45
 800150e:	ddf6      	ble.n	80014fe <lcd_clear+0x12>
	}
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    switch (row)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <lcd_put_cur+0x16>
 8001528:	2b01      	cmp	r3, #1
 800152a:	d005      	beq.n	8001538 <lcd_put_cur+0x20>
 800152c:	e009      	b.n	8001542 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	603b      	str	r3, [r7, #0]
            break;
 8001536:	e004      	b.n	8001542 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800153e:	603b      	str	r3, [r7, #0]
            break;
 8001540:	bf00      	nop
    }

    lcd_send_cmd(col);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff70 	bl	800142c <lcd_send_cmd>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <lcd_init>:


void lcd_init (void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f001 fe95 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x30);
 800155e:	2030      	movs	r0, #48	; 0x30
 8001560:	f7ff ff64 	bl	800142c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001564:	2005      	movs	r0, #5
 8001566:	f001 fe8f 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x30);
 800156a:	2030      	movs	r0, #48	; 0x30
 800156c:	f7ff ff5e 	bl	800142c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001570:	2001      	movs	r0, #1
 8001572:	f001 fe89 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001576:	2030      	movs	r0, #48	; 0x30
 8001578:	f7ff ff58 	bl	800142c <lcd_send_cmd>
	HAL_Delay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f001 fe83 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001582:	2020      	movs	r0, #32
 8001584:	f7ff ff52 	bl	800142c <lcd_send_cmd>
	HAL_Delay(10);
 8001588:	200a      	movs	r0, #10
 800158a:	f001 fe7d 	bl	8003288 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f7ff ff4c 	bl	800142c <lcd_send_cmd>
	HAL_Delay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f001 fe77 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800159a:	2008      	movs	r0, #8
 800159c:	f7ff ff46 	bl	800142c <lcd_send_cmd>
	HAL_Delay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f001 fe71 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff ff40 	bl	800142c <lcd_send_cmd>
	HAL_Delay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f001 fe6b 	bl	8003288 <HAL_Delay>
	HAL_Delay(1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f001 fe68 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80015b8:	2006      	movs	r0, #6
 80015ba:	f7ff ff37 	bl	800142c <lcd_send_cmd>
	HAL_Delay(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f001 fe62 	bl	8003288 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80015c4:	200c      	movs	r0, #12
 80015c6:	f7ff ff31 	bl	800142c <lcd_send_cmd>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}

080015ce <lcd_send_string>:
		  HAL_Delay(10);
		  lcd_send_string("4");//(int*)temp_buff
	}
}
void lcd_send_string (char *str)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80015d6:	e006      	b.n	80015e6 <lcd_send_string+0x18>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff53 	bl	800148c <lcd_send_data>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f4      	bne.n	80015d8 <lcd_send_string+0xa>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x50>)
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <MX_I2C1_Init+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_I2C1_Init+0x50>)
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <MX_I2C1_Init+0x58>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_I2C1_Init+0x50>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_I2C1_Init+0x50>)
 8001636:	f002 fcef 	bl	8004018 <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001640:	f000 ffd0 	bl	80025e4 <Error_Handler>
  }

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200003f8 	.word	0x200003f8
 800164c:	40005400 	.word	0x40005400
 8001650:	000186a0 	.word	0x000186a0

08001654 <MX_I2C3_Init>:
  }

}
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_I2C3_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <MX_I2C3_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_I2C3_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_I2C3_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_I2C3_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_I2C3_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001692:	f002 fcc1 	bl	8004018 <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800169c:	f000 ffa2 	bl	80025e4 <Error_Handler>
  }

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200003a4 	.word	0x200003a4
 80016a8:	40005c00 	.word	0x40005c00
 80016ac:	000186a0 	.word	0x000186a0

080016b0 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <bno055_assignI2C+0x1c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200005f0 	.word	0x200005f0

080016d0 <bno055_delay>:

void bno055_delay(int time) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fdd4 	bl	8003288 <HAL_Delay>
#endif
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	4613      	mov	r3, r2
 80016f6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	733b      	strb	r3, [r7, #12]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001700:	4b5a      	ldr	r3, [pc, #360]	; (800186c <bno055_writeData+0x184>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f107 020c 	add.w	r2, r7, #12
 8001708:	230a      	movs	r3, #10
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2302      	movs	r3, #2
 800170e:	2150      	movs	r1, #80	; 0x50
 8001710:	f002 fdba 	bl	8004288 <HAL_I2C_Master_Transmit>
 8001714:	4603      	mov	r3, r0
 8001716:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80a0 	beq.w	8001860 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d103      	bne.n	800172e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001726:	4852      	ldr	r0, [pc, #328]	; (8001870 <bno055_writeData+0x188>)
 8001728:	f005 fba8 	bl	8006e7c <puts>
 800172c:	e012      	b.n	8001754 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d103      	bne.n	800173c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001734:	484f      	ldr	r0, [pc, #316]	; (8001874 <bno055_writeData+0x18c>)
 8001736:	f005 fba1 	bl	8006e7c <puts>
 800173a:	e00b      	b.n	8001754 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d103      	bne.n	800174a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001742:	484d      	ldr	r0, [pc, #308]	; (8001878 <bno055_writeData+0x190>)
 8001744:	f005 fb9a 	bl	8006e7c <puts>
 8001748:	e004      	b.n	8001754 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	4619      	mov	r1, r3
 800174e:	484b      	ldr	r0, [pc, #300]	; (800187c <bno055_writeData+0x194>)
 8001750:	f005 fb20 	bl	8006d94 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001754:	4b45      	ldr	r3, [pc, #276]	; (800186c <bno055_writeData+0x184>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f8c7 	bl	80048ec <HAL_I2C_GetError>
 800175e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d07e      	beq.n	8001864 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d103      	bne.n	8001774 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800176c:	4844      	ldr	r0, [pc, #272]	; (8001880 <bno055_writeData+0x198>)
 800176e:	f005 fb85 	bl	8006e7c <puts>
 8001772:	e021      	b.n	80017b8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d103      	bne.n	8001782 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800177a:	4842      	ldr	r0, [pc, #264]	; (8001884 <bno055_writeData+0x19c>)
 800177c:	f005 fb7e 	bl	8006e7c <puts>
 8001780:	e01a      	b.n	80017b8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d103      	bne.n	8001790 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001788:	483f      	ldr	r0, [pc, #252]	; (8001888 <bno055_writeData+0x1a0>)
 800178a:	f005 fb77 	bl	8006e7c <puts>
 800178e:	e013      	b.n	80017b8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d103      	bne.n	800179e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001796:	483d      	ldr	r0, [pc, #244]	; (800188c <bno055_writeData+0x1a4>)
 8001798:	f005 fb70 	bl	8006e7c <puts>
 800179c:	e00c      	b.n	80017b8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d103      	bne.n	80017ac <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80017a4:	483a      	ldr	r0, [pc, #232]	; (8001890 <bno055_writeData+0x1a8>)
 80017a6:	f005 fb69 	bl	8006e7c <puts>
 80017aa:	e005      	b.n	80017b8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d102      	bne.n	80017b8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80017b2:	4838      	ldr	r0, [pc, #224]	; (8001894 <bno055_writeData+0x1ac>)
 80017b4:	f005 fb62 	bl	8006e7c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <bno055_writeData+0x184>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 f887 	bl	80048d0 <HAL_I2C_GetState>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017cc:	4832      	ldr	r0, [pc, #200]	; (8001898 <bno055_writeData+0x1b0>)
 80017ce:	f005 fb55 	bl	8006e7c <puts>
 80017d2:	e048      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d103      	bne.n	80017e2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80017da:	482f      	ldr	r0, [pc, #188]	; (8001898 <bno055_writeData+0x1b0>)
 80017dc:	f005 fb4e 	bl	8006e7c <puts>
 80017e0:	e041      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b24      	cmp	r3, #36	; 0x24
 80017e6:	d103      	bne.n	80017f0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80017e8:	482c      	ldr	r0, [pc, #176]	; (800189c <bno055_writeData+0x1b4>)
 80017ea:	f005 fb47 	bl	8006e7c <puts>
 80017ee:	e03a      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b21      	cmp	r3, #33	; 0x21
 80017f4:	d103      	bne.n	80017fe <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80017f6:	482a      	ldr	r0, [pc, #168]	; (80018a0 <bno055_writeData+0x1b8>)
 80017f8:	f005 fb40 	bl	8006e7c <puts>
 80017fc:	e033      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b22      	cmp	r3, #34	; 0x22
 8001802:	d103      	bne.n	800180c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001804:	4827      	ldr	r0, [pc, #156]	; (80018a4 <bno055_writeData+0x1bc>)
 8001806:	f005 fb39 	bl	8006e7c <puts>
 800180a:	e02c      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b28      	cmp	r3, #40	; 0x28
 8001810:	d103      	bne.n	800181a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001812:	4825      	ldr	r0, [pc, #148]	; (80018a8 <bno055_writeData+0x1c0>)
 8001814:	f005 fb32 	bl	8006e7c <puts>
 8001818:	e025      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b29      	cmp	r3, #41	; 0x29
 800181e:	d103      	bne.n	8001828 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001820:	4822      	ldr	r0, [pc, #136]	; (80018ac <bno055_writeData+0x1c4>)
 8001822:	f005 fb2b 	bl	8006e7c <puts>
 8001826:	e01e      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b2a      	cmp	r3, #42	; 0x2a
 800182c:	d103      	bne.n	8001836 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <bno055_writeData+0x1c8>)
 8001830:	f005 fb24 	bl	8006e7c <puts>
 8001834:	e017      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b60      	cmp	r3, #96	; 0x60
 800183a:	d103      	bne.n	8001844 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800183c:	481d      	ldr	r0, [pc, #116]	; (80018b4 <bno055_writeData+0x1cc>)
 800183e:	f005 fb1d 	bl	8006e7c <puts>
 8001842:	e010      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2ba0      	cmp	r3, #160	; 0xa0
 8001848:	d103      	bne.n	8001852 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800184a:	481b      	ldr	r0, [pc, #108]	; (80018b8 <bno055_writeData+0x1d0>)
 800184c:	f005 fb16 	bl	8006e7c <puts>
 8001850:	e009      	b.n	8001866 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2be0      	cmp	r3, #224	; 0xe0
 8001856:	d106      	bne.n	8001866 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001858:	4818      	ldr	r0, [pc, #96]	; (80018bc <bno055_writeData+0x1d4>)
 800185a:	f005 fb0f 	bl	8006e7c <puts>
 800185e:	e002      	b.n	8001866 <bno055_writeData+0x17e>
    return;
 8001860:	bf00      	nop
 8001862:	e000      	b.n	8001866 <bno055_writeData+0x17e>
    return;
 8001864:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200005f0 	.word	0x200005f0
 8001870:	0800a924 	.word	0x0800a924
 8001874:	0800a948 	.word	0x0800a948
 8001878:	0800a970 	.word	0x0800a970
 800187c:	0800a994 	.word	0x0800a994
 8001880:	0800a9ac 	.word	0x0800a9ac
 8001884:	0800a9c0 	.word	0x0800a9c0
 8001888:	0800a9d4 	.word	0x0800a9d4
 800188c:	0800a9e8 	.word	0x0800a9e8
 8001890:	0800a9fc 	.word	0x0800a9fc
 8001894:	0800aa10 	.word	0x0800aa10
 8001898:	0800aa28 	.word	0x0800aa28
 800189c:	0800aa40 	.word	0x0800aa40
 80018a0:	0800aa54 	.word	0x0800aa54
 80018a4:	0800aa6c 	.word	0x0800aa6c
 80018a8:	0800aa84 	.word	0x0800aa84
 80018ac:	0800aa9c 	.word	0x0800aa9c
 80018b0:	0800aabc 	.word	0x0800aabc
 80018b4:	0800aadc 	.word	0x0800aadc
 80018b8:	0800aaf4 	.word	0x0800aaf4
 80018bc:	0800ab0c 	.word	0x0800ab0c

080018c0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <bno055_readData+0x40>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	1dfa      	adds	r2, r7, #7
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	2150      	movs	r1, #80	; 0x50
 80018de:	f002 fcd3 	bl	8004288 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <bno055_readData+0x40>)
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	2150      	movs	r1, #80	; 0x50
 80018f4:	f002 fdc6 	bl	8004484 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200005f0 	.word	0x200005f0

08001904 <PrintString>:
uint8_t msg[256];
uint8_t Tbuff[256];
uint8_t TempBuff[256];

void PrintString(uint8_t * string)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen((char *)string), 0xffff);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7fe fc7f 	bl	8000210 <strlen>
 8001912:	4603      	mov	r3, r0
 8001914:	b29a      	uxth	r2, r3
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <PrintString+0x28>)
 800191e:	f004 f896 	bl	8005a4e <HAL_UART_Transmit>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000a70 	.word	0x20000a70

08001930 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b098      	sub	sp, #96	; 0x60
 8001936:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001938:	f001 fc34 	bl	80031a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800193c:	f000 fa8e 	bl	8001e5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001940:	f000 fcfa 	bl	8002338 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001944:	f7ff fe58 	bl	80015f8 <MX_I2C1_Init>
	MX_SPI2_Init();
 8001948:	f000 fbee 	bl	8002128 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 800194c:	f000 fca0 	bl	8002290 <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001950:	f000 fc20 	bl	8002194 <MX_UART4_Init>
	MX_USART3_UART_Init();
 8001954:	f000 fcc6 	bl	80022e4 <MX_USART3_UART_Init>
	MX_UART5_Init();
 8001958:	f000 fc46 	bl	80021e8 <MX_UART5_Init>
	MX_ADC1_Init();
 800195c:	f000 fade 	bl	8001f1c <MX_ADC1_Init>
	MX_I2C3_Init();
 8001960:	f7ff fe78 	bl	8001654 <MX_I2C3_Init>
	MX_USART1_UART_Init();
 8001964:	f000 fc6a 	bl	800223c <MX_USART1_UART_Init>
	MX_ADC3_Init();
 8001968:	f000 fb8c 	bl	8002084 <MX_ADC3_Init>
	MX_ADC2_Init();
 800196c:	f000 fb38 	bl	8001fe0 <MX_ADC2_Init>

	/* USER CODE BEGIN 2 */
	PrintString(str);
 8001970:	489c      	ldr	r0, [pc, #624]	; (8001be4 <main+0x2b4>)
 8001972:	f7ff ffc7 	bl	8001904 <PrintString>

//	CANSPI_Initialize();

	lcd_init();
 8001976:	f7ff fded 	bl	8001554 <lcd_init>
	lcd_clear();
 800197a:	f7ff fdb7 	bl	80014ec <lcd_clear>
	HAL_Delay(20);
 800197e:	2014      	movs	r0, #20
 8001980:	f001 fc82 	bl	8003288 <HAL_Delay>
	lcd_put_cur(0,0);
 8001984:	2100      	movs	r1, #0
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fdc6 	bl	8001518 <lcd_put_cur>
	HAL_Delay(20);
 800198c:	2014      	movs	r0, #20
 800198e:	f001 fc7b 	bl	8003288 <HAL_Delay>
	lcd_send_string((char*)"B.Temp: init");
 8001992:	4895      	ldr	r0, [pc, #596]	; (8001be8 <main+0x2b8>)
 8001994:	f7ff fe1b 	bl	80015ce <lcd_send_string>
	lcd_put_cur(1,0);
 8001998:	2100      	movs	r1, #0
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fdbc 	bl	8001518 <lcd_put_cur>
	HAL_Delay(20);
 80019a0:	2014      	movs	r0, #20
 80019a2:	f001 fc71 	bl	8003288 <HAL_Delay>
	lcd_send_string((char*)"B.Vol: init");
 80019a6:	4891      	ldr	r0, [pc, #580]	; (8001bec <main+0x2bc>)
 80019a8:	f7ff fe11 	bl	80015ce <lcd_send_string>

	tm1637Init();
 80019ac:	f000 fe22 	bl	80025f4 <tm1637Init>
	tm1637SetBrightness(5);
 80019b0:	2005      	movs	r0, #5
 80019b2:	f000 fed9 	bl	8002768 <tm1637SetBrightness>

	// ------------------------------------ **** IMU Setting ****------------------------------------

	bno055_calibration_data_t calData;
	bno055_assignI2C(&hi2c3);
 80019b6:	488e      	ldr	r0, [pc, #568]	; (8001bf0 <main+0x2c0>)
 80019b8:	f7ff fe7a 	bl	80016b0 <bno055_assignI2C>
	bno055_setup();
 80019bc:	f7ff fb4c 	bl	8001058 <bno055_setup>
	bno055_setCalibrationData(calData);//Set init
 80019c0:	466b      	mov	r3, sp
 80019c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80019c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ca:	6018      	str	r0, [r3, #0]
 80019cc:	3304      	adds	r3, #4
 80019ce:	8019      	strh	r1, [r3, #0]
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d6:	f7ff fb67 	bl	80010a8 <bno055_setCalibrationData>
	bno055_setOperationMode(BNO055_OPERATION_MODE_IMU);//작동 모드
 80019da:	2008      	movs	r0, #8
 80019dc:	f7ff fb10 	bl	8001000 <bno055_setOperationMode>

		/* [seki 22] Digital signal pin
		 * Temperature signal using seki 22
		 */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2120      	movs	r1, #32
 80019e4:	4883      	ldr	r0, [pc, #524]	; (8001bf4 <main+0x2c4>)
 80019e6:	f002 fafd 	bl	8003fe4 <HAL_GPIO_WritePin>
		GPIO_PinState PinStat_seg1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80019ea:	2110      	movs	r1, #16
 80019ec:	4881      	ldr	r0, [pc, #516]	; (8001bf4 <main+0x2c4>)
 80019ee:	f002 fae1 	bl	8003fb4 <HAL_GPIO_ReadPin>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	487d      	ldr	r0, [pc, #500]	; (8001bf4 <main+0x2c4>)
 80019fe:	f002 faf1 	bl	8003fe4 <HAL_GPIO_WritePin>
		GPIO_PinState PinStat_seg2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001a02:	2140      	movs	r1, #64	; 0x40
 8001a04:	487b      	ldr	r0, [pc, #492]	; (8001bf4 <main+0x2c4>)
 8001a06:	f002 fad5 	bl	8003fb4 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a16:	4878      	ldr	r0, [pc, #480]	; (8001bf8 <main+0x2c8>)
 8001a18:	f002 fae4 	bl	8003fe4 <HAL_GPIO_WritePin>
		GPIO_PinState PinStat_seg3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a20:	4875      	ldr	r0, [pc, #468]	; (8001bf8 <main+0x2c8>)
 8001a22:	f002 fac7 	bl	8003fb4 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a32:	4870      	ldr	r0, [pc, #448]	; (8001bf4 <main+0x2c4>)
 8001a34:	f002 fad6 	bl	8003fe4 <HAL_GPIO_WritePin>
		GPIO_PinState PinStat_seg4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8001a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3c:	486d      	ldr	r0, [pc, #436]	; (8001bf4 <main+0x2c4>)
 8001a3e:	f002 fab9 	bl	8003fb4 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

		GPIO_PinState Thermal=(PinStat_seg1&&PinStat_seg2)&&(PinStat_seg3&&PinStat_seg4);
 8001a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <main+0x13c>
 8001a50:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <main+0x13c>
 8001a58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <main+0x13c>
 8001a60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <main+0x13c>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <main+0x13e>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer),1000);
			HAL_Delay(100);
		}
		*/

		ADC1_Select_CH0();
 8001a72:	f000 fd01 	bl	8002478 <ADC1_Select_CH0>
		HAL_ADC_Start(&hadc1);
 8001a76:	4861      	ldr	r0, [pc, #388]	; (8001bfc <main+0x2cc>)
 8001a78:	f001 fc6c 	bl	8003354 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1000);
 8001a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a80:	485e      	ldr	r0, [pc, #376]	; (8001bfc <main+0x2cc>)
 8001a82:	f001 fd60 	bl	8003546 <HAL_ADC_PollForConversion>
		vADC1[0]=HAL_ADC_GetValue(&hadc1);
 8001a86:	485d      	ldr	r0, [pc, #372]	; (8001bfc <main+0x2cc>)
 8001a88:	f001 fde1 	bl	800364e <HAL_ADC_GetValue>
 8001a8c:	ee07 0a90 	vmov	s15, r0
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <main+0x2d0>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8001a9a:	4858      	ldr	r0, [pc, #352]	; (8001bfc <main+0x2cc>)
 8001a9c:	f001 fd20 	bl	80034e0 <HAL_ADC_Stop>
		vADC1[0] = ADCtoTemp(vADC1[0]);
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <main+0x2d0>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	f000 fd25 	bl	80024f8 <ADCtoTemp>
 8001aae:	eef0 7a40 	vmov.f32	s15, s0
 8001ab2:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <main+0x2d0>)
 8001ab4:	edc3 7a00 	vstr	s15, [r3]

		ADC1_Select_CH9();
 8001ab8:	f000 fcfe 	bl	80024b8 <ADC1_Select_CH9>
		HAL_ADC_Start(&hadc1);
 8001abc:	484f      	ldr	r0, [pc, #316]	; (8001bfc <main+0x2cc>)
 8001abe:	f001 fc49 	bl	8003354 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1000);
 8001ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac6:	484d      	ldr	r0, [pc, #308]	; (8001bfc <main+0x2cc>)
 8001ac8:	f001 fd3d 	bl	8003546 <HAL_ADC_PollForConversion>
		vADC1[1]=HAL_ADC_GetValue(&hadc1);
 8001acc:	484b      	ldr	r0, [pc, #300]	; (8001bfc <main+0x2cc>)
 8001ace:	f001 fdbe 	bl	800364e <HAL_ADC_GetValue>
 8001ad2:	ee07 0a90 	vmov	s15, r0
 8001ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <main+0x2d0>)
 8001adc:	edc3 7a01 	vstr	s15, [r3, #4]
		HAL_ADC_Stop(&hadc1);
 8001ae0:	4846      	ldr	r0, [pc, #280]	; (8001bfc <main+0x2cc>)
 8001ae2:	f001 fcfd 	bl	80034e0 <HAL_ADC_Stop>
		vADC1[1] = ADCtoTemp(vADC1[1]);
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <main+0x2d0>)
 8001ae8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	f000 fd02 	bl	80024f8 <ADCtoTemp>
 8001af4:	eef0 7a40 	vmov.f32	s15, s0
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <main+0x2d0>)
 8001afa:	edc3 7a01 	vstr	s15, [r3, #4]

		HAL_ADC_Start(&hadc2);
 8001afe:	4841      	ldr	r0, [pc, #260]	; (8001c04 <main+0x2d4>)
 8001b00:	f001 fc28 	bl	8003354 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2,5);
 8001b04:	2105      	movs	r1, #5
 8001b06:	483f      	ldr	r0, [pc, #252]	; (8001c04 <main+0x2d4>)
 8001b08:	f001 fd1d 	bl	8003546 <HAL_ADC_PollForConversion>
		vADC2=HAL_ADC_GetValue(&hadc2);
 8001b0c:	483d      	ldr	r0, [pc, #244]	; (8001c04 <main+0x2d4>)
 8001b0e:	f001 fd9e 	bl	800364e <HAL_ADC_GetValue>
 8001b12:	ee07 0a90 	vmov	s15, r0
 8001b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <main+0x2d8>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc2);
 8001b20:	4838      	ldr	r0, [pc, #224]	; (8001c04 <main+0x2d4>)
 8001b22:	f001 fcdd 	bl	80034e0 <HAL_ADC_Stop>
		vADC2 = ADCtoTemp(vADC2);
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <main+0x2d8>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	f000 fce2 	bl	80024f8 <ADCtoTemp>
 8001b34:	eef0 7a40 	vmov.f32	s15, s0
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <main+0x2d8>)
 8001b3a:	edc3 7a00 	vstr	s15, [r3]

		HAL_ADC_Start(&hadc3);
 8001b3e:	4833      	ldr	r0, [pc, #204]	; (8001c0c <main+0x2dc>)
 8001b40:	f001 fc08 	bl	8003354 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3,5);
 8001b44:	2105      	movs	r1, #5
 8001b46:	4831      	ldr	r0, [pc, #196]	; (8001c0c <main+0x2dc>)
 8001b48:	f001 fcfd 	bl	8003546 <HAL_ADC_PollForConversion>
		vADC3=HAL_ADC_GetValue(&hadc3);
 8001b4c:	482f      	ldr	r0, [pc, #188]	; (8001c0c <main+0x2dc>)
 8001b4e:	f001 fd7e 	bl	800364e <HAL_ADC_GetValue>
 8001b52:	ee07 0a90 	vmov	s15, r0
 8001b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <main+0x2e0>)
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc3);
 8001b60:	482a      	ldr	r0, [pc, #168]	; (8001c0c <main+0x2dc>)
 8001b62:	f001 fcbd 	bl	80034e0 <HAL_ADC_Stop>
		vADC3 = ADCtoTemp(vADC3);
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <main+0x2e0>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	f000 fcc2 	bl	80024f8 <ADCtoTemp>
 8001b74:	eef0 7a40 	vmov.f32	s15, s0
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <main+0x2e0>)
 8001b7a:	edc3 7a00 	vstr	s15, [r3]

		Btemp = max(vADC1[0],vADC1[1]);
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <main+0x2d0>)
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <main+0x2d0>)
 8001b86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dd02      	ble.n	8001b9a <main+0x26a>
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <main+0x2d0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e001      	b.n	8001b9e <main+0x26e>
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <main+0x2d0>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <main+0x2e4>)
 8001ba0:	6013      	str	r3, [r2, #0]
		Btemp = max(Btemp, vADC2);
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <main+0x2e4>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <main+0x2d8>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd02      	ble.n	8001bbe <main+0x28e>
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <main+0x2e4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e001      	b.n	8001bc2 <main+0x292>
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <main+0x2d8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <main+0x2e4>)
 8001bc4:	6013      	str	r3, [r2, #0]
		Btemp = max(Btemp, vADC3);
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <main+0x2e4>)
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <main+0x2e0>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dd1d      	ble.n	8001c18 <main+0x2e8>
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <main+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e01c      	b.n	8001c1c <main+0x2ec>
 8001be2:	bf00      	nop
 8001be4:	200000d4 	.word	0x200000d4
 8001be8:	0800ab24 	.word	0x0800ab24
 8001bec:	0800ab34 	.word	0x0800ab34
 8001bf0:	200003a4 	.word	0x200003a4
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	20000740 	.word	0x20000740
 8001c00:	200005f4 	.word	0x200005f4
 8001c04:	20000544 	.word	0x20000544
 8001c08:	2000082c 	.word	0x2000082c
 8001c0c:	20000788 	.word	0x20000788
 8001c10:	20000810 	.word	0x20000810
 8001c14:	20000ab4 	.word	0x20000ab4
 8001c18:	4b7f      	ldr	r3, [pc, #508]	; (8001e18 <main+0x4e8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a7f      	ldr	r2, [pc, #508]	; (8001e1c <main+0x4ec>)
 8001c1e:	6013      	str	r3, [r2, #0]

		// sprintf(buffer,"ADC1_CH0 : %.2f \r\nADC1_CH9 : %.2f\r\nADC2_CH1 : %.2f \r\nADC3_CH10: %.2f\r\nMAX: %.2f\r\n\n",vADC1[0],vADC1[1],vADC2,vADC3,Btemp);
		sprintf(buffer,"SEGMENT[1] : %f \r\nSEGMENT[2] : %f\r\nSEGMENT[3] : %f \r\nSEGMENT[4]: %f\r\nMAX: %f\r\n\n",vADC1[0],vADC1[1],vADC2,vADC3,Btemp);
 8001c20:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <main+0x4f0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	e9c7 0100 	strd	r0, r1, [r7]
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <main+0x4f0>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fca8 	bl	8000588 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <main+0x4f4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fca1 	bl	8000588 <__aeabi_f2d>
 8001c46:	4680      	mov	r8, r0
 8001c48:	4689      	mov	r9, r1
 8001c4a:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <main+0x4e8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc9a 	bl	8000588 <__aeabi_f2d>
 8001c54:	4682      	mov	sl, r0
 8001c56:	468b      	mov	fp, r1
 8001c58:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <main+0x4ec>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc93 	bl	8000588 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c6a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c6e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c72:	e9cd 4500 	strd	r4, r5, [sp]
 8001c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c7a:	496b      	ldr	r1, [pc, #428]	; (8001e28 <main+0x4f8>)
 8001c7c:	486b      	ldr	r0, [pc, #428]	; (8001e2c <main+0x4fc>)
 8001c7e:	f005 f905 	bl	8006e8c <siprintf>
		// PrintString(buffer);

		//------------------------------------ **** Master BMS ****------------------------------------//

		HAL_UART_Receive(&huart3,receive_data,7,200);						// Read Voltage and Celus temperature Data
 8001c82:	23c8      	movs	r3, #200	; 0xc8
 8001c84:	2207      	movs	r2, #7
 8001c86:	496a      	ldr	r1, [pc, #424]	; (8001e30 <main+0x500>)
 8001c88:	486a      	ldr	r0, [pc, #424]	; (8001e34 <main+0x504>)
 8001c8a:	f003 ff79 	bl	8005b80 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2,BMSbuff,strlen(BMSbuff),1000);
		HAL_Delay(100);
		*/

		// Transmit voltage value from Arduino
		sprintf(BMSbuff,"%c%c%c%c%c%c",receive_data[0],receive_data[1],receive_data[2],receive_data[3],receive_data[4],receive_data[5]);
 8001c8e:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <main+0x500>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461c      	mov	r4, r3
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <main+0x500>)
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	461d      	mov	r5, r3
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <main+0x500>)
 8001c9c:	789b      	ldrb	r3, [r3, #2]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <main+0x500>)
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <main+0x500>)
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <main+0x500>)
 8001cae:	795b      	ldrb	r3, [r3, #5]
 8001cb0:	9303      	str	r3, [sp, #12]
 8001cb2:	9002      	str	r0, [sp, #8]
 8001cb4:	9101      	str	r1, [sp, #4]
 8001cb6:	9200      	str	r2, [sp, #0]
 8001cb8:	462b      	mov	r3, r5
 8001cba:	4622      	mov	r2, r4
 8001cbc:	495e      	ldr	r1, [pc, #376]	; (8001e38 <main+0x508>)
 8001cbe:	485f      	ldr	r0, [pc, #380]	; (8001e3c <main+0x50c>)
 8001cc0:	f005 f8e4 	bl	8006e8c <siprintf>
		// HAL_UART_Transmit(&huart2,BMSbuff,strlen(BMSbuff),1000);

		//------------------------------------ **** Shut Down Circuit & Over load current shut down ****------------------------------------//

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	485d      	ldr	r0, [pc, #372]	; (8001e40 <main+0x510>)
 8001cca:	f002 f98b 	bl	8003fe4 <HAL_GPIO_WritePin>

		GPIO_PinState StateOfBMS = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);			// rx sig from Arduino
 8001cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd2:	485c      	ldr	r0, [pc, #368]	; (8001e44 <main+0x514>)
 8001cd4:	f002 f96e 	bl	8003fb4 <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		GPIO_PinState SDC_ON = StateOfBMS && Thermal;
 8001cde:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <main+0x3c2>
 8001ce6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <main+0x3c2>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <main+0x3c4>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		else{
			PrintString("THERMAL : FAULT\n\r");
		}
		*/

		if(!SDC_ON)
 8001cf8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <main+0x3da>
		{
			// PrintString("SDC activate\n\r");
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);			//  SDC 3output
 8001d00:	2200      	movs	r2, #0
 8001d02:	2101      	movs	r1, #1
 8001d04:	484e      	ldr	r0, [pc, #312]	; (8001e40 <main+0x510>)
 8001d06:	f002 f96d 	bl	8003fe4 <HAL_GPIO_WritePin>

		 sprintf(buffer,"%.2f,%.2f,%.2f\r\n",gyro.x,gyro.y,gyro.z);
		 PrintString(buffer);
		 HAL_Delay(100);
*/
		bno055_vector_t v = bno055_getVectorEuler();
 8001d0a:	f7ff fb61 	bl	80013d0 <bno055_getVectorEuler>
 8001d0e:	eeb0 6a40 	vmov.f32	s12, s0
 8001d12:	eef0 6a60 	vmov.f32	s13, s1
 8001d16:	eeb0 7a41 	vmov.f32	s14, s2
 8001d1a:	eef0 7a61 	vmov.f32	s15, s3
 8001d1e:	ed87 6a03 	vstr	s12, [r7, #12]
 8001d22:	edc7 6a04 	vstr	s13, [r7, #16]
 8001d26:	ed87 7a05 	vstr	s14, [r7, #20]
 8001d2a:	edc7 7a06 	vstr	s15, [r7, #24]
		sprintf(IMU,"Yaw: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc29 	bl	8000588 <__aeabi_f2d>
 8001d36:	4680      	mov	r8, r0
 8001d38:	4689      	mov	r9, r1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc23 	bl	8000588 <__aeabi_f2d>
 8001d42:	4604      	mov	r4, r0
 8001d44:	460d      	mov	r5, r1
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc1d 	bl	8000588 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d56:	e9cd 4500 	strd	r4, r5, [sp]
 8001d5a:	4642      	mov	r2, r8
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	493a      	ldr	r1, [pc, #232]	; (8001e48 <main+0x518>)
 8001d60:	483a      	ldr	r0, [pc, #232]	; (8001e4c <main+0x51c>)
 8001d62:	f005 f893 	bl	8006e8c <siprintf>
		PrintString(IMU);
 8001d66:	4839      	ldr	r0, [pc, #228]	; (8001e4c <main+0x51c>)
 8001d68:	f7ff fdcc 	bl	8001904 <PrintString>
		// v = bno055_getVectorQuaternion();
		// sprintf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
		HAL_Delay(100);
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	f001 fa8b 	bl	8003288 <HAL_Delay>
		//------------------------------------ **** 7 Segment Setting ****------------------------------------//
		// Before : RPM from motor
		// After  : percentage value from Arduino Master BMS

		float total_v  = atof(BMSbuff);
 8001d72:	4832      	ldr	r0, [pc, #200]	; (8001e3c <main+0x50c>)
 8001d74:	f004 fb70 	bl	8006458 <atof>
 8001d78:	ec54 3b10 	vmov	r3, r4, d0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	4621      	mov	r1, r4
 8001d80:	f7fe ff52 	bl	8000c28 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
		percent_of_batt = (double)(total_v - 78.4)*2.55;
 8001d88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d8a:	f7fe fbfd 	bl	8000588 <__aeabi_f2d>
 8001d8e:	a31e      	add	r3, pc, #120	; (adr r3, 8001e08 <main+0x4d8>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fa98 	bl	80002c8 <__aeabi_dsub>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4621      	mov	r1, r4
 8001da0:	a31b      	add	r3, pc, #108	; (adr r3, 8001e10 <main+0x4e0>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fc47 	bl	8000638 <__aeabi_dmul>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe ff39 	bl	8000c28 <__aeabi_d2f>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <main+0x520>)
 8001dba:	601a      	str	r2, [r3, #0]
		tm1637DisplayDecimal(percent_of_batt,0); // second argument for ":"
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <main+0x520>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	ee17 0a90 	vmov	r0, s15
 8001dcc:	f000 fc5e 	bl	800268c <tm1637DisplayDecimal>

		//------------------------------------ **** LCD Setting ****------------------------------------//

		lcd_put_cur(0,7);							// Move Cursor
 8001dd0:	2107      	movs	r1, #7
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fba0 	bl	8001518 <lcd_put_cur>
		// HAL_Delay(50);
		sprintf(string_temperature,"%.2f   ",Btemp);	// Make String for Temperature Data
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <main+0x4ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbd3 	bl	8000588 <__aeabi_f2d>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	461a      	mov	r2, r3
 8001de8:	4623      	mov	r3, r4
 8001dea:	491a      	ldr	r1, [pc, #104]	; (8001e54 <main+0x524>)
 8001dec:	481a      	ldr	r0, [pc, #104]	; (8001e58 <main+0x528>)
 8001dee:	f005 f84d 	bl	8006e8c <siprintf>
		lcd_send_string((char*)string_temperature); // Battery Temperature
 8001df2:	4819      	ldr	r0, [pc, #100]	; (8001e58 <main+0x528>)
 8001df4:	f7ff fbeb 	bl	80015ce <lcd_send_string>

		lcd_put_cur(1,7);
 8001df8:	2107      	movs	r1, #7
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff fb8c 	bl	8001518 <lcd_put_cur>
		// HAL_Delay(50);
		// sprintf(string_voltage,"%d     ",4);		// Make String for Voltage Data
		// lcd_send_string((char*)string_voltage); 	// Battery Voltage
		lcd_send_string((char*)BMSbuff);
 8001e00:	480e      	ldr	r0, [pc, #56]	; (8001e3c <main+0x50c>)
 8001e02:	f7ff fbe4 	bl	80015ce <lcd_send_string>
	{
 8001e06:	e5eb      	b.n	80019e0 <main+0xb0>
 8001e08:	9999999a 	.word	0x9999999a
 8001e0c:	40539999 	.word	0x40539999
 8001e10:	66666666 	.word	0x66666666
 8001e14:	40046666 	.word	0x40046666
 8001e18:	20000810 	.word	0x20000810
 8001e1c:	20000ab4 	.word	0x20000ab4
 8001e20:	200005f4 	.word	0x200005f4
 8001e24:	2000082c 	.word	0x2000082c
 8001e28:	0800ab40 	.word	0x0800ab40
 8001e2c:	2000000c 	.word	0x2000000c
 8001e30:	20000814 	.word	0x20000814
 8001e34:	20000504 	.word	0x20000504
 8001e38:	0800ab90 	.word	0x0800ab90
 8001e3c:	20000334 	.word	0x20000334
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	0800aba0 	.word	0x0800aba0
 8001e4c:	20000070 	.word	0x20000070
 8001e50:	20000820 	.word	0x20000820
 8001e54:	0800abc4 	.word	0x0800abc4
 8001e58:	20000824 	.word	0x20000824

08001e5c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b094      	sub	sp, #80	; 0x50
 8001e60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	2234      	movs	r2, #52	; 0x34
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 fb2d 	bl	80064ca <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <SystemClock_Config+0xb8>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <SystemClock_Config+0xb8>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <SystemClock_Config+0xb8>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <SystemClock_Config+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <SystemClock_Config+0xbc>)
 8001eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <SystemClock_Config+0xbc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fab1 	bl	8005438 <HAL_RCC_OscConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001edc:	f000 fb82 	bl	80025e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f830 	bl	8004f60 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8001f06:	f000 fb6d 	bl	80025e4 <Error_Handler>
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	3750      	adds	r7, #80	; 0x50
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001f22:	463b      	mov	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f30:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <MX_ADC1_Init+0xbc>)
 8001f32:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f5c:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <MX_ADC1_Init+0xc0>)
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f68:	2202      	movs	r2, #2
 8001f6a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f7a:	4816      	ldr	r0, [pc, #88]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f7c:	f001 f9a6 	bl	80032cc <HAL_ADC_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001f86:	f000 fb2d 	bl	80025e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001f9c:	f001 fb64 	bl	8003668 <HAL_ADC_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001fa6:	f000 fb1d 	bl	80025e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001faa:	2309      	movs	r3, #9
 8001fac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_ADC1_Init+0xb8>)
 8001fbc:	f001 fb54 	bl	8003668 <HAL_ADC_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_ADC1_Init+0xae>
	{
		Error_Handler();
 8001fc6:	f000 fb0d 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000740 	.word	0x20000740
 8001fd8:	40012000 	.word	0x40012000
 8001fdc:	0f000001 	.word	0x0f000001

08001fe0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <MX_ADC2_Init+0x98>)
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <MX_ADC2_Init+0x9c>)
 8001ff6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <MX_ADC2_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <MX_ADC2_Init+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <MX_ADC2_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_ADC2_Init+0x98>)
 800200c:	2200      	movs	r2, #0
 800200e:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <MX_ADC2_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <MX_ADC2_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <MX_ADC2_Init+0x98>)
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <MX_ADC2_Init+0xa0>)
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_ADC2_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_ADC2_Init+0x98>)
 800202c:	2201      	movs	r2, #1
 800202e:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_ADC2_Init+0x98>)
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_ADC2_Init+0x98>)
 800203a:	2201      	movs	r2, #1
 800203c:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800203e:	480e      	ldr	r0, [pc, #56]	; (8002078 <MX_ADC2_Init+0x98>)
 8002040:	f001 f944 	bl	80032cc <HAL_ADC_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_ADC2_Init+0x6e>
	{
		Error_Handler();
 800204a:	f000 facb 	bl	80025e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800204e:	2301      	movs	r3, #1
 8002050:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800205a:	463b      	mov	r3, r7
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <MX_ADC2_Init+0x98>)
 8002060:	f001 fb02 	bl	8003668 <HAL_ADC_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 800206a:	f000 fabb 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000544 	.word	0x20000544
 800207c:	40012100 	.word	0x40012100
 8002080:	0f000001 	.word	0x0f000001

08002084 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800208a:	463b      	mov	r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <MX_ADC3_Init+0x98>)
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <MX_ADC3_Init+0x9c>)
 800209a:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <MX_ADC3_Init+0x98>)
 800209e:	2200      	movs	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_ADC3_Init+0x98>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MX_ADC3_Init+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_ADC3_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <MX_ADC3_Init+0x98>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_ADC3_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <MX_ADC3_Init+0x98>)
 80020c4:	4a17      	ldr	r2, [pc, #92]	; (8002124 <MX_ADC3_Init+0xa0>)
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <MX_ADC3_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <MX_ADC3_Init+0x98>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_ADC3_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MX_ADC3_Init+0x98>)
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020e2:	480e      	ldr	r0, [pc, #56]	; (800211c <MX_ADC3_Init+0x98>)
 80020e4:	f001 f8f2 	bl	80032cc <HAL_ADC_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_ADC3_Init+0x6e>
	{
		Error_Handler();
 80020ee:	f000 fa79 	bl	80025e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80020f2:	230a      	movs	r3, #10
 80020f4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <MX_ADC3_Init+0x98>)
 8002104:	f001 fab0 	bl	8003668 <HAL_ADC_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_ADC3_Init+0x8e>
	{
		Error_Handler();
 800210e:	f000 fa69 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000788 	.word	0x20000788
 8002120:	40012200 	.word	0x40012200
 8002124:	0f000001 	.word	0x0f000001

08002128 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */
	//
	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <MX_SPI2_Init+0x64>)
 800212e:	4a18      	ldr	r2, [pc, #96]	; (8002190 <MX_SPI2_Init+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_SPI2_Init+0x64>)
 8002134:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002138:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_SPI2_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_SPI2_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_SPI2_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_SPI2_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_SPI2_Init+0x64>)
 8002154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002158:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_SPI2_Init+0x64>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <MX_SPI2_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_SPI2_Init+0x64>)
 8002168:	2200      	movs	r2, #0
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <MX_SPI2_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_SPI2_Init+0x64>)
 8002174:	220a      	movs	r2, #10
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_SPI2_Init+0x64>)
 800217a:	f003 fbb7 	bl	80058ec <HAL_SPI_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8002184:	f000 fa2e 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */
	//
	/* USER CODE END SPI2_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200004a0 	.word	0x200004a0
 8002190:	40003800 	.word	0x40003800

08002194 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_UART4_Init+0x4c>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_UART4_Init+0x50>)
 800219c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_UART4_Init+0x4c>)
 80021cc:	f003 fbf2 	bl	80059b4 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_UART4_Init+0x46>
	{
		Error_Handler();
 80021d6:	f000 fa05 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000a30 	.word	0x20000a30
 80021e4:	40004c00 	.word	0x40004c00

080021e8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_UART5_Init+0x4c>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <MX_UART5_Init+0x50>)
 80021f0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <MX_UART5_Init+0x4c>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_UART5_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_UART5_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_UART5_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_UART5_Init+0x4c>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_UART5_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_UART5_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_UART5_Init+0x4c>)
 8002220:	f003 fbc8 	bl	80059b4 <HAL_UART_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_UART5_Init+0x46>
	{
		Error_Handler();
 800222a:	f000 f9db 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000700 	.word	0x20000700
 8002238:	40005000 	.word	0x40005000

0800223c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <MX_USART1_UART_Init+0x50>)
 8002244:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800224c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_USART1_UART_Init+0x4c>)
 8002274:	f003 fb9e 	bl	80059b4 <HAL_UART_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800227e:	f000 f9b1 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200007d0 	.word	0x200007d0
 800228c:	40011000 	.word	0x40011000

08002290 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_USART2_UART_Init+0x50>)
 8002298:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c8:	f003 fb74 	bl	80059b4 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80022d2:	f000 f987 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000a70 	.word	0x20000a70
 80022e0:	40004400 	.word	0x40004400

080022e4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <MX_USART3_UART_Init+0x50>)
 80022ec:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_USART3_UART_Init+0x4c>)
 800231c:	f003 fb4a 	bl	80059b4 <HAL_UART_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8002326:	f000 f95d 	bl	80025e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000504 	.word	0x20000504
 8002334:	40004800 	.word	0x40004800

08002338 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b45      	ldr	r3, [pc, #276]	; (8002468 <MX_GPIO_Init+0x130>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a44      	ldr	r2, [pc, #272]	; (8002468 <MX_GPIO_Init+0x130>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <MX_GPIO_Init+0x130>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <MX_GPIO_Init+0x130>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a3d      	ldr	r2, [pc, #244]	; (8002468 <MX_GPIO_Init+0x130>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <MX_GPIO_Init+0x130>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <MX_GPIO_Init+0x130>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a36      	ldr	r2, [pc, #216]	; (8002468 <MX_GPIO_Init+0x130>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <MX_GPIO_Init+0x130>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <MX_GPIO_Init+0x130>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <MX_GPIO_Init+0x130>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <MX_GPIO_Init+0x130>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
 80023c4:	4829      	ldr	r0, [pc, #164]	; (800246c <MX_GPIO_Init+0x134>)
 80023c6:	f001 fe0d 	bl	8003fe4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	f249 0101 	movw	r1, #36865	; 0x9001
 80023d0:	4827      	ldr	r0, [pc, #156]	; (8002470 <MX_GPIO_Init+0x138>)
 80023d2:	f001 fe07 	bl	8003fe4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA4 PA6 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11;
 80023d6:	f44f 6305 	mov.w	r3, #2128	; 0x850
 80023da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4820      	ldr	r0, [pc, #128]	; (800246c <MX_GPIO_Init+0x134>)
 80023ec:	f001 fc50 	bl	8003c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA7 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_12;
 80023f0:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 80023f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	4818      	ldr	r0, [pc, #96]	; (800246c <MX_GPIO_Init+0x134>)
 800240a:	f001 fc41 	bl	8003c90 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB12 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_15;
 800240e:	f249 0301 	movw	r3, #36865	; 0x9001
 8002412:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4812      	ldr	r0, [pc, #72]	; (8002470 <MX_GPIO_Init+0x138>)
 8002428:	f001 fc32 	bl	8003c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800242c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002430:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <MX_GPIO_Init+0x138>)
 8002442:	f001 fc25 	bl	8003c90 <HAL_GPIO_Init>

	/*Configure GPIO pin : ArduinoSDC_Pin */
	GPIO_InitStruct.Pin = ArduinoSDC_Pin;
 8002446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ArduinoSDC_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <MX_GPIO_Init+0x13c>)
 800245c:	f001 fc18 	bl	8003c90 <HAL_GPIO_Init>

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800

08002478 <ADC1_Select_CH0>:
//	}
}
 */

void ADC1_Select_CH0(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig={0};
 800247e:	463b      	mov	r3, r7
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002496:	463b      	mov	r3, r7
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <ADC1_Select_CH0+0x3c>)
 800249c:	f001 f8e4 	bl	8003668 <HAL_ADC_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <ADC1_Select_CH0+0x32>
	{
		Error_Handler();
 80024a6:	f000 f89d 	bl	80025e4 <Error_Handler>
	}
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000740 	.word	0x20000740

080024b8 <ADC1_Select_CH9>:

void ADC1_Select_CH9(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig={0};
 80024be:	463b      	mov	r3, r7
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;
 80024ca:	2309      	movs	r3, #9
 80024cc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80024d2:	2301      	movs	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <ADC1_Select_CH9+0x3c>)
 80024dc:	f001 f8c4 	bl	8003668 <HAL_ADC_ConfigChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <ADC1_Select_CH9+0x32>
	{
		Error_Handler();
 80024e6:	f000 f87d 	bl	80025e4 <Error_Handler>
	}
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000740 	.word	0x20000740

080024f8 <ADCtoTemp>:

float ADCtoTemp(float ADCval){
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	ed87 0a01 	vstr	s0, [r7, #4]
	float R = (50*100-10*100*ADCval)/ADCval;
 8002502:	edd7 7a01 	vldr	s15, [r7, #4]
 8002506:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80025d8 <ADCtoTemp+0xe0>
 800250a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80025dc <ADCtoTemp+0xe4>
 8002512:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002516:	ed97 7a01 	vldr	s14, [r7, #4]
 800251a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251e:	edc7 7a03 	vstr	s15, [r7, #12]
	float T = 4073*298/(4073+298*log(R/10000));
 8002522:	edd7 7a03 	vldr	s15, [r7, #12]
 8002526:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80025e0 <ADCtoTemp+0xe8>
 800252a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800252e:	ee16 0a90 	vmov	r0, s13
 8002532:	f7fe f829 	bl	8000588 <__aeabi_f2d>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	ec44 3b10 	vmov	d0, r3, r4
 800253e:	f007 ff89 	bl	800a454 <log>
 8002542:	ec51 0b10 	vmov	r0, r1, d0
 8002546:	a31c      	add	r3, pc, #112	; (adr r3, 80025b8 <ADCtoTemp+0xc0>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f874 	bl	8000638 <__aeabi_dmul>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	4618      	mov	r0, r3
 8002556:	4621      	mov	r1, r4
 8002558:	a319      	add	r3, pc, #100	; (adr r3, 80025c0 <ADCtoTemp+0xc8>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fd feb5 	bl	80002cc <__adddf3>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	461a      	mov	r2, r3
 8002568:	4623      	mov	r3, r4
 800256a:	a117      	add	r1, pc, #92	; (adr r1, 80025c8 <ADCtoTemp+0xd0>)
 800256c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002570:	f7fe f98c 	bl	800088c <__aeabi_ddiv>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	4618      	mov	r0, r3
 800257a:	4621      	mov	r1, r4
 800257c:	f7fe fb54 	bl	8000c28 <__aeabi_d2f>
 8002580:	4603      	mov	r3, r0
 8002582:	60bb      	str	r3, [r7, #8]
	T -= 273.15;
 8002584:	68b8      	ldr	r0, [r7, #8]
 8002586:	f7fd ffff 	bl	8000588 <__aeabi_f2d>
 800258a:	a311      	add	r3, pc, #68	; (adr r3, 80025d0 <ADCtoTemp+0xd8>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fd fe9a 	bl	80002c8 <__aeabi_dsub>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	4618      	mov	r0, r3
 800259a:	4621      	mov	r1, r4
 800259c:	f7fe fb44 	bl	8000c28 <__aeabi_d2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60bb      	str	r3, [r7, #8]
	return T;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	ee07 3a90 	vmov	s15, r3

	ADCval = (298.15*4073)/(298.15*log(9840/ADCval)+4073);
	ADCval -= 273.15;

	return ADCval;
}
 80025aa:	eeb0 0a67 	vmov.f32	s0, s15
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	f3af 8000 	nop.w
 80025b8:	00000000 	.word	0x00000000
 80025bc:	4072a000 	.word	0x4072a000
 80025c0:	00000000 	.word	0x00000000
 80025c4:	40afd200 	.word	0x40afd200
 80025c8:	00000000 	.word	0x00000000
 80025cc:	4132853a 	.word	0x4132853a
 80025d0:	66666666 	.word	0x66666666
 80025d4:	40711266 	.word	0x40711266
 80025d8:	447a0000 	.word	0x447a0000
 80025dc:	459c4000 	.word	0x459c4000
 80025e0:	461c4000 	.word	0x461c4000

080025e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <tm1637Init+0x8c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <tm1637Init+0x8c>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <tm1637Init+0x8c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <tm1637Init+0x8c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <tm1637Init+0x8c>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <tm1637Init+0x8c>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8002642:	2301      	movs	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; 		// OD = open drain
 8002646:	2311      	movs	r3, #17
 8002648:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 800264e:	2304      	movs	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	480a      	ldr	r0, [pc, #40]	; (8002684 <tm1637Init+0x90>)
 800265a:	f001 fb19 	bl	8003c90 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 800265e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002662:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4619      	mov	r1, r3
 800266a:	4807      	ldr	r0, [pc, #28]	; (8002688 <tm1637Init+0x94>)
 800266c:	f001 fb10 	bl	8003c90 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8002670:	2008      	movs	r0, #8
 8002672:	f000 f879 	bl	8002768 <tm1637SetBrightness>
}
 8002676:	bf00      	nop
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40020800 	.word	0x40020800

0800268c <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e032      	b.n	8002702 <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <tm1637DisplayDecimal+0xd4>)
 80026a0:	fb83 2301 	smull	r2, r3, r3, r1
 80026a4:	109a      	asrs	r2, r3, #2
 80026a6:	17cb      	asrs	r3, r1, #31
 80026a8:	1ad2      	subs	r2, r2, r3
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	1aca      	subs	r2, r1, r3
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <tm1637DisplayDecimal+0xd8>)
 80026b6:	5c99      	ldrb	r1, [r3, r2]
 80026b8:	f107 020c 	add.w	r2, r7, #12
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	460a      	mov	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d110      	bne.n	80026ec <tm1637DisplayDecimal+0x60>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 80026d0:	f107 020c 	add.w	r2, r7, #12
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026de:	b2d9      	uxtb	r1, r3
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4413      	add	r3, r2
 80026e8:	460a      	mov	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <tm1637DisplayDecimal+0xd4>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1092      	asrs	r2, r2, #2
 80026f6:	17db      	asrs	r3, r3, #31
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b03      	cmp	r3, #3
 8002706:	ddc9      	ble.n	800269c <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8002708:	f000 f843 	bl	8002792 <_tm1637Start>
    _tm1637WriteByte(0x40);
 800270c:	2040      	movs	r0, #64	; 0x40
 800270e:	f000 f872 	bl	80027f6 <_tm1637WriteByte>
    _tm1637ReadResult();
 8002712:	f000 f860 	bl	80027d6 <_tm1637ReadResult>
    _tm1637Stop();
 8002716:	f000 f849 	bl	80027ac <_tm1637Stop>

    _tm1637Start();
 800271a:	f000 f83a 	bl	8002792 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 800271e:	20c0      	movs	r0, #192	; 0xc0
 8002720:	f000 f869 	bl	80027f6 <_tm1637WriteByte>
    _tm1637ReadResult();
 8002724:	f000 f857 	bl	80027d6 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e00f      	b.n	800274e <tm1637DisplayDecimal+0xc2>
        _tm1637WriteByte(digitArr[3 - i]);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f1c3 0303 	rsb	r3, r3, #3
 8002734:	f107 0218 	add.w	r2, r7, #24
 8002738:	4413      	add	r3, r2
 800273a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f859 	bl	80027f6 <_tm1637WriteByte>
        _tm1637ReadResult();
 8002744:	f000 f847 	bl	80027d6 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3301      	adds	r3, #1
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b03      	cmp	r3, #3
 8002752:	ddec      	ble.n	800272e <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8002754:	f000 f82a 	bl	80027ac <_tm1637Stop>
}
 8002758:	bf00      	nop
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	66666667 	.word	0x66666667
 8002764:	0800abcc 	.word	0x0800abcc

08002768 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8002772:	f000 f80e 	bl	8002792 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	3b79      	subs	r3, #121	; 0x79
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f83a 	bl	80027f6 <_tm1637WriteByte>
    _tm1637ReadResult();
 8002782:	f000 f828 	bl	80027d6 <_tm1637ReadResult>
    _tm1637Stop();
 8002786:	f000 f811 	bl	80027ac <_tm1637Stop>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_tm1637Start>:

void _tm1637Start(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8002796:	f000 f863 	bl	8002860 <_tm1637ClkHigh>
    _tm1637DioHigh();
 800279a:	f000 f879 	bl	8002890 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 800279e:	2002      	movs	r0, #2
 80027a0:	f000 f852 	bl	8002848 <_tm1637DelayUsec>
    _tm1637DioLow();
 80027a4:	f000 f880 	bl	80028a8 <_tm1637DioLow>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_tm1637Stop>:

void _tm1637Stop(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 80027b0:	f000 f862 	bl	8002878 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 80027b4:	2002      	movs	r0, #2
 80027b6:	f000 f847 	bl	8002848 <_tm1637DelayUsec>
    _tm1637DioLow();
 80027ba:	f000 f875 	bl	80028a8 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 80027be:	2002      	movs	r0, #2
 80027c0:	f000 f842 	bl	8002848 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 80027c4:	f000 f84c 	bl	8002860 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 80027c8:	2002      	movs	r0, #2
 80027ca:	f000 f83d 	bl	8002848 <_tm1637DelayUsec>
    _tm1637DioHigh();
 80027ce:	f000 f85f 	bl	8002890 <_tm1637DioHigh>
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 80027da:	f000 f84d 	bl	8002878 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 80027de:	2005      	movs	r0, #5
 80027e0:	f000 f832 	bl	8002848 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 80027e4:	f000 f83c 	bl	8002860 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 80027e8:	2002      	movs	r0, #2
 80027ea:	f000 f82d 	bl	8002848 <_tm1637DelayUsec>
    _tm1637ClkLow();
 80027ee:	f000 f843 	bl	8002878 <_tm1637ClkLow>
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e019      	b.n	800283a <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8002806:	f000 f837 	bl	8002878 <_tm1637ClkLow>
        if (b & 0x01) {
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8002814:	f000 f83c 	bl	8002890 <_tm1637DioHigh>
 8002818:	e001      	b.n	800281e <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 800281a:	f000 f845 	bl	80028a8 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 800281e:	2003      	movs	r0, #3
 8002820:	f000 f812 	bl	8002848 <_tm1637DelayUsec>
        b >>= 1;
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 800282a:	f000 f819 	bl	8002860 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 800282e:	2003      	movs	r0, #3
 8002830:	f000 f80a 	bl	8002848 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b07      	cmp	r3, #7
 800283e:	dde2      	ble.n	8002806 <_tm1637WriteByte+0x10>
    }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	HAL_Delay(5);
 8002850:	2005      	movs	r0, #5
 8002852:	f000 fd19 	bl	8003288 <HAL_Delay>
//    for (; i>0; i--) {
//        for (int j = 0; j < 10; ++j) {
//            __asm__ __volatile__("nop\n\t":::"memory");
//        }
//    }
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8002864:	2201      	movs	r2, #1
 8002866:	2104      	movs	r1, #4
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <_tm1637ClkHigh+0x14>)
 800286a:	f001 fbbb 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40020c00 	.word	0x40020c00

08002878 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	2104      	movs	r1, #4
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <_tm1637ClkLow+0x14>)
 8002882:	f001 fbaf 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40020c00 	.word	0x40020c00

08002890 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289a:	4802      	ldr	r0, [pc, #8]	; (80028a4 <_tm1637DioHigh+0x14>)
 800289c:	f001 fba2 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40020800 	.word	0x40020800

080028a8 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b2:	4802      	ldr	r0, [pc, #8]	; (80028bc <_tm1637DioLow+0x14>)
 80028b4:	f001 fb96 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40020800 	.word	0x40020800

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_MspInit+0x4c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_MspInit+0x4c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x4c>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08e      	sub	sp, #56	; 0x38
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_ADC_MspInit+0x168>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d142      	bne.n	80029b8 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a50      	ldr	r2, [pc, #320]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a42      	ldr	r2, [pc, #264]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298a:	2303      	movs	r3, #3
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	4839      	ldr	r0, [pc, #228]	; (8002a80 <HAL_ADC_MspInit+0x170>)
 800299a:	f001 f979 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800299e:	2302      	movs	r3, #2
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	2303      	movs	r3, #3
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ae:	4619      	mov	r1, r3
 80029b0:	4834      	ldr	r0, [pc, #208]	; (8002a84 <HAL_ADC_MspInit+0x174>)
 80029b2:	f001 f96d 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029b6:	e05a      	b.n	8002a6e <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_ADC_MspInit+0x178>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d128      	bne.n	8002a14 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a2c      	ldr	r2, [pc, #176]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 80029cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a25      	ldr	r2, [pc, #148]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029fa:	2302      	movs	r3, #2
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029fe:	2303      	movs	r3, #3
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	481c      	ldr	r0, [pc, #112]	; (8002a80 <HAL_ADC_MspInit+0x170>)
 8002a0e:	f001 f93f 	bl	8003c90 <HAL_GPIO_Init>
}
 8002a12:	e02c      	b.n	8002a6e <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_ADC_MspInit+0x17c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d127      	bne.n	8002a6e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_ADC_MspInit+0x16c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a56:	2301      	movs	r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	4619      	mov	r1, r3
 8002a68:	4809      	ldr	r0, [pc, #36]	; (8002a90 <HAL_ADC_MspInit+0x180>)
 8002a6a:	f001 f911 	bl	8003c90 <HAL_GPIO_Init>
}
 8002a6e:	bf00      	nop
 8002a70:	3738      	adds	r7, #56	; 0x38
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40012000 	.word	0x40012000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40012100 	.word	0x40012100
 8002a8c:	40012200 	.word	0x40012200
 8002a90:	40020800 	.word	0x40020800

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <HAL_I2C_MspInit+0x128>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d12c      	bne.n	8002b10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ad2:	23c0      	movs	r3, #192	; 0xc0
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad6:	2312      	movs	r3, #18
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ada:	2301      	movs	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <HAL_I2C_MspInit+0x130>)
 8002aee:	f001 f8cf 	bl	8003c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b0e:	e050      	b.n	8002bb2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <HAL_I2C_MspInit+0x134>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d14b      	bne.n	8002bb2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b58:	2312      	movs	r3, #18
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b64:	2304      	movs	r3, #4
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4817      	ldr	r0, [pc, #92]	; (8002bcc <HAL_I2C_MspInit+0x138>)
 8002b70:	f001 f88e 	bl	8003c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7a:	2312      	movs	r3, #18
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b86:	2304      	movs	r3, #4
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <HAL_I2C_MspInit+0x13c>)
 8002b92:	f001 f87d 	bl	8003c90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_I2C_MspInit+0x12c>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40005400 	.word	0x40005400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40005c00 	.word	0x40005c00
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	40020000 	.word	0x40020000

08002bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <HAL_SPI_MspInit+0xe0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d15a      	bne.n	8002cac <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a2e      	ldr	r2, [pc, #184]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_SPI_MspInit+0xe4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4815      	ldr	r0, [pc, #84]	; (8002cbc <HAL_SPI_MspInit+0xe8>)
 8002c66:	f001 f813 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <HAL_SPI_MspInit+0xe8>)
 8002c86:	f001 f803 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c9c:	2305      	movs	r3, #5
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <HAL_SPI_MspInit+0xec>)
 8002ca8:	f000 fff2 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cac:	bf00      	nop
 8002cae:	3728      	adds	r7, #40	; 0x28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40003800 	.word	0x40003800
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b094      	sub	sp, #80	; 0x50
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a9d      	ldr	r2, [pc, #628]	; (8002f58 <HAL_UART_MspInit+0x294>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12d      	bne.n	8002d42 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cea:	4b9c      	ldr	r3, [pc, #624]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a9b      	ldr	r2, [pc, #620]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b99      	ldr	r3, [pc, #612]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
 8002d06:	4b95      	ldr	r3, [pc, #596]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d30:	2308      	movs	r3, #8
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4889      	ldr	r0, [pc, #548]	; (8002f60 <HAL_UART_MspInit+0x29c>)
 8002d3c:	f000 ffa8 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d40:	e105      	b.n	8002f4e <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==UART5)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a87      	ldr	r2, [pc, #540]	; (8002f64 <HAL_UART_MspInit+0x2a0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d14b      	bne.n	8002de4 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d50:	4b82      	ldr	r3, [pc, #520]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a81      	ldr	r2, [pc, #516]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5c:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6c:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4a7a      	ldr	r2, [pc, #488]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6313      	str	r3, [r2, #48]	; 0x30
 8002d78:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d88:	4b74      	ldr	r3, [pc, #464]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a73      	ldr	r2, [pc, #460]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d8e:	f043 0308 	orr.w	r3, r3, #8
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b71      	ldr	r3, [pc, #452]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002db2:	2308      	movs	r3, #8
 8002db4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4868      	ldr	r0, [pc, #416]	; (8002f60 <HAL_UART_MspInit+0x29c>)
 8002dbe:	f000 ff67 	bl	8003c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4862      	ldr	r0, [pc, #392]	; (8002f68 <HAL_UART_MspInit+0x2a4>)
 8002dde:	f000 ff57 	bl	8003c90 <HAL_GPIO_Init>
}
 8002de2:	e0b4      	b.n	8002f4e <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <HAL_UART_MspInit+0x2a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d12d      	bne.n	8002e4a <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	4a59      	ldr	r2, [pc, #356]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfe:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e38:	2307      	movs	r3, #7
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e40:	4619      	mov	r1, r3
 8002e42:	484b      	ldr	r0, [pc, #300]	; (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002e44:	f000 ff24 	bl	8003c90 <HAL_GPIO_Init>
}
 8002e48:	e081      	b.n	8002f4e <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_UART_MspInit+0x2b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d12c      	bne.n	8002eae <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4a3f      	ldr	r2, [pc, #252]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e62:	6413      	str	r3, [r2, #64]	; 0x40
 8002e64:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9c:	2307      	movs	r3, #7
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4832      	ldr	r0, [pc, #200]	; (8002f70 <HAL_UART_MspInit+0x2ac>)
 8002ea8:	f000 fef2 	bl	8003c90 <HAL_GPIO_Init>
}
 8002eac:	e04f      	b.n	8002f4e <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART3)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <HAL_UART_MspInit+0x2b4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d14a      	bne.n	8002f4e <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	6313      	str	r3, [r2, #48]	; 0x30
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_UART_MspInit+0x298>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f1c:	2307      	movs	r3, #7
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f24:	4619      	mov	r1, r3
 8002f26:	480e      	ldr	r0, [pc, #56]	; (8002f60 <HAL_UART_MspInit+0x29c>)
 8002f28:	f000 feb2 	bl	8003c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f46:	4619      	mov	r1, r3
 8002f48:	480c      	ldr	r0, [pc, #48]	; (8002f7c <HAL_UART_MspInit+0x2b8>)
 8002f4a:	f000 fea1 	bl	8003c90 <HAL_GPIO_Init>
}
 8002f4e:	bf00      	nop
 8002f50:	3750      	adds	r7, #80	; 0x50
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40004c00 	.word	0x40004c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40005000 	.word	0x40005000
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40004400 	.word	0x40004400
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40020400 	.word	0x40020400

08002f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <HardFault_Handler+0x4>

08002f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <MemManage_Handler+0x4>

08002f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <BusFault_Handler+0x4>

08002fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <UsageFault_Handler+0x4>

08002fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd4:	f000 f938 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e00a      	b.n	8003004 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fee:	f3af 8000 	nop.w
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	60ba      	str	r2, [r7, #8]
 8002ffa:	b2ca      	uxtb	r2, r1
 8002ffc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	dbf0      	blt.n	8002fee <_read+0x12>
	}

return len;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e009      	b.n	800303c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	dbf1      	blt.n	8003028 <_write+0x12>
	}
	return len;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <_close>:

int _close(int file)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
	return -1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003076:	605a      	str	r2, [r3, #4]
	return 0;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <_isatty>:

int _isatty(int file)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
	return 1;
 800308e:	2301      	movs	r3, #1
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <_sbrk+0x5c>)
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <_sbrk+0x60>)
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <_sbrk+0x64>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <_sbrk+0x64>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <_sbrk+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <_sbrk+0x64>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e8:	f003 f9ba 	bl	8006460 <__errno>
 80030ec:	4602      	mov	r2, r0
 80030ee:	230c      	movs	r3, #12
 80030f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	e009      	b.n	800310c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <_sbrk+0x64>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <_sbrk+0x64>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <_sbrk+0x64>)
 8003108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20020000 	.word	0x20020000
 8003118:	00000400 	.word	0x00000400
 800311c:	20000398 	.word	0x20000398
 8003120:	20000ac8 	.word	0x20000ac8

08003124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <SystemInit+0x28>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	4a07      	ldr	r2, [pc, #28]	; (800314c <SystemInit+0x28>)
 8003130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <SystemInit+0x28>)
 800313a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800313e:	609a      	str	r2, [r3, #8]
#endif
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003156:	e003      	b.n	8003160 <LoopCopyDataInit>

08003158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800315a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800315c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800315e:	3104      	adds	r1, #4

08003160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003160:	480b      	ldr	r0, [pc, #44]	; (8003190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003168:	d3f6      	bcc.n	8003158 <CopyDataInit>
  ldr  r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800316c:	e002      	b.n	8003174 <LoopFillZerobss>

0800316e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800316e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003170:	f842 3b04 	str.w	r3, [r2], #4

08003174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003178:	d3f9      	bcc.n	800316e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800317a:	f7ff ffd3 	bl	8003124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f003 f975 	bl	800646c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7fe fbd5 	bl	8001930 <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003188:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800318c:	0800af24 	.word	0x0800af24
  ldr  r0, =_sdata
 8003190:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003194:	20000318 	.word	0x20000318
  ldr  r2, =_sbss
 8003198:	20000318 	.word	0x20000318
  ldr  r3, = _ebss
 800319c:	20000ac8 	.word	0x20000ac8

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_Init+0x40>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_Init+0x40>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_Init+0x40>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 fd2b 	bl	8003c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 f808 	bl	80031e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d8:	f7ff fb72 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x54>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x58>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fd35 	bl	8003c76 <HAL_SYSTICK_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e00e      	b.n	8003234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d80a      	bhi.n	8003232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321c:	2200      	movs	r2, #0
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f000 fd0b 	bl	8003c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_InitTick+0x5c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000138 	.word	0x20000138
 8003240:	20000140 	.word	0x20000140
 8003244:	2000013c 	.word	0x2000013c

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000140 	.word	0x20000140
 800326c:	20000ac0 	.word	0x20000ac0

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000ac0 	.word	0x20000ac0

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff ffee 	bl	8003270 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_Delay+0x40>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ae:	bf00      	nop
 80032b0:	f7ff ffde 	bl	8003270 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000140 	.word	0x20000140

080032cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e033      	b.n	800334a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fb10 	bl	8002910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003312:	f023 0302 	bic.w	r3, r3, #2
 8003316:	f043 0202 	orr.w	r2, r3, #2
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fad4 	bl	80038cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
 800333a:	e001      	b.n	8003340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADC_Start+0x1a>
 800336a:	2302      	movs	r3, #2
 800336c:	e0a5      	b.n	80034ba <HAL_ADC_Start+0x166>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d018      	beq.n	80033b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003394:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_ADC_Start+0x174>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_ADC_Start+0x178>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0c9a      	lsrs	r2, r3, #18
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033a8:	e002      	b.n	80033b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d179      	bne.n	80034b8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	d106      	bne.n	8003412 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f023 0206 	bic.w	r2, r3, #6
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
 8003410:	e002      	b.n	8003418 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_ADC_Start+0x17c>)
 8003422:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800342c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2b00      	cmp	r3, #0
 8003438:	d12a      	bne.n	8003490 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <HAL_ADC_Start+0x180>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d015      	beq.n	8003470 <HAL_ADC_Start+0x11c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_ADC_Start+0x184>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d105      	bne.n	800345a <HAL_ADC_Start+0x106>
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_ADC_Start+0x17c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <HAL_ADC_Start+0x188>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d129      	bne.n	80034b8 <HAL_ADC_Start+0x164>
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_ADC_Start+0x17c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d823      	bhi.n	80034b8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11c      	bne.n	80034b8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	e013      	b.n	80034b8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_ADC_Start+0x180>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10e      	bne.n	80034b8 <HAL_ADC_Start+0x164>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034b6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000138 	.word	0x20000138
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	40012300 	.word	0x40012300
 80034d4:	40012000 	.word	0x40012000
 80034d8:	40012100 	.word	0x40012100
 80034dc:	40012200 	.word	0x40012200

080034e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_Stop+0x16>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e021      	b.n	800353a <HAL_ADC_Stop+0x5a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d113      	bne.n	800358c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800356e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003572:	d10b      	bne.n	800358c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e05c      	b.n	8003646 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800358c:	f7ff fe70 	bl	8003270 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003592:	e01a      	b.n	80035ca <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d016      	beq.n	80035ca <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_ADC_PollForConversion+0x6c>
 80035a2:	f7ff fe65 	bl	8003270 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20b      	bcs.n	80035ca <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e03d      	b.n	8003646 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d1dd      	bne.n	8003594 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0212 	mvn.w	r2, #18
 80035e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d123      	bne.n	8003644 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11f      	bne.n	8003644 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1c>
 8003680:	2302      	movs	r3, #2
 8003682:	e113      	b.n	80038ac <HAL_ADC_ConfigChannel+0x244>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d925      	bls.n	80036e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68d9      	ldr	r1, [r3, #12]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	3b1e      	subs	r3, #30
 80036aa:	2207      	movs	r2, #7
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43da      	mvns	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	400a      	ands	r2, r1
 80036b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68d9      	ldr	r1, [r3, #12]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4618      	mov	r0, r3
 80036cc:	4603      	mov	r3, r0
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4403      	add	r3, r0
 80036d2:	3b1e      	subs	r3, #30
 80036d4:	409a      	lsls	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e022      	b.n	8003726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6919      	ldr	r1, [r3, #16]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	2207      	movs	r2, #7
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	400a      	ands	r2, r1
 8003702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6919      	ldr	r1, [r3, #16]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	4618      	mov	r0, r3
 8003716:	4603      	mov	r3, r0
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4403      	add	r3, r0
 800371c:	409a      	lsls	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d824      	bhi.n	8003778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	3b05      	subs	r3, #5
 8003740:	221f      	movs	r2, #31
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	400a      	ands	r2, r1
 800374e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	4618      	mov	r0, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	3b05      	subs	r3, #5
 800376a:	fa00 f203 	lsl.w	r2, r0, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
 8003776:	e04c      	b.n	8003812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d824      	bhi.n	80037ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	3b23      	subs	r3, #35	; 0x23
 8003792:	221f      	movs	r2, #31
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43da      	mvns	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	400a      	ands	r2, r1
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	3b23      	subs	r3, #35	; 0x23
 80037bc:	fa00 f203 	lsl.w	r2, r0, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
 80037c8:	e023      	b.n	8003812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	3b41      	subs	r3, #65	; 0x41
 80037dc:	221f      	movs	r2, #31
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4618      	mov	r0, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	3b41      	subs	r3, #65	; 0x41
 8003806:	fa00 f203 	lsl.w	r2, r0, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003812:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <HAL_ADC_ConfigChannel+0x250>)
 8003814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a28      	ldr	r2, [pc, #160]	; (80038bc <HAL_ADC_ConfigChannel+0x254>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10f      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x1d8>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b12      	cmp	r3, #18
 8003826:	d10b      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_ADC_ConfigChannel+0x254>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d12b      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x23a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_ADC_ConfigChannel+0x258>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <HAL_ADC_ConfigChannel+0x1f4>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b11      	cmp	r3, #17
 800385a:	d122      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <HAL_ADC_ConfigChannel+0x258>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d111      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a11      	ldr	r2, [pc, #68]	; (80038c8 <HAL_ADC_ConfigChannel+0x260>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	0c9a      	lsrs	r2, r3, #18
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003894:	e002      	b.n	800389c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3b01      	subs	r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f9      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40012300 	.word	0x40012300
 80038bc:	40012000 	.word	0x40012000
 80038c0:	10000012 	.word	0x10000012
 80038c4:	20000138 	.word	0x20000138
 80038c8:	431bde83 	.word	0x431bde83

080038cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038d4:	4b79      	ldr	r3, [pc, #484]	; (8003abc <ADC_Init+0x1f0>)
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	021a      	lsls	r2, r3, #8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	4a58      	ldr	r2, [pc, #352]	; (8003ac0 <ADC_Init+0x1f4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003972:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6899      	ldr	r1, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	e00f      	b.n	80039ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0202 	bic.w	r2, r2, #2
 80039d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7e1b      	ldrb	r3, [r3, #24]
 80039e4:	005a      	lsls	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	3b01      	subs	r3, #1
 8003a24:	035a      	lsls	r2, r3, #13
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	e007      	b.n	8003a40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	051a      	lsls	r2, r3, #20
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6899      	ldr	r1, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a82:	025a      	lsls	r2, r3, #9
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	029a      	lsls	r2, r3, #10
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40012300 	.word	0x40012300
 8003ac0:	0f000001 	.word	0x0f000001

08003ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	60d3      	str	r3, [r2, #12]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <__NVIC_GetPriorityGrouping+0x18>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 0307 	and.w	r3, r3, #7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	6039      	str	r1, [r7, #0]
 8003b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	db0a      	blt.n	8003b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	490c      	ldr	r1, [pc, #48]	; (8003b74 <__NVIC_SetPriority+0x4c>)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	0112      	lsls	r2, r2, #4
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b50:	e00a      	b.n	8003b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4908      	ldr	r1, [pc, #32]	; (8003b78 <__NVIC_SetPriority+0x50>)
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	3b04      	subs	r3, #4
 8003b60:	0112      	lsls	r2, r2, #4
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	440b      	add	r3, r1
 8003b66:	761a      	strb	r2, [r3, #24]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000e100 	.word	0xe000e100
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	; 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f1c3 0307 	rsb	r3, r3, #7
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	bf28      	it	cs
 8003b9a:	2304      	movcs	r3, #4
 8003b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2b06      	cmp	r3, #6
 8003ba4:	d902      	bls.n	8003bac <NVIC_EncodePriority+0x30>
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3b03      	subs	r3, #3
 8003baa:	e000      	b.n	8003bae <NVIC_EncodePriority+0x32>
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	43d9      	mvns	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	4313      	orrs	r3, r2
         );
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3724      	adds	r7, #36	; 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf4:	d301      	bcc.n	8003bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00f      	b.n	8003c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <SysTick_Config+0x40>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c02:	210f      	movs	r1, #15
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f7ff ff8e 	bl	8003b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <SysTick_Config+0x40>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c12:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <SysTick_Config+0x40>)
 8003c14:	2207      	movs	r2, #7
 8003c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	e000e010 	.word	0xe000e010

08003c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff47 	bl	8003ac4 <__NVIC_SetPriorityGrouping>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c50:	f7ff ff5c 	bl	8003b0c <__NVIC_GetPriorityGrouping>
 8003c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f7ff ff8e 	bl	8003b7c <NVIC_EncodePriority>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff5d 	bl	8003b28 <__NVIC_SetPriority>
}
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ffb0 	bl	8003be4 <SysTick_Config>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e165      	b.n	8003f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 8154 	bne.w	8003f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d00b      	beq.n	8003cea <HAL_GPIO_Init+0x5a>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cde:	2b11      	cmp	r3, #17
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b12      	cmp	r3, #18
 8003ce8:	d130      	bne.n	8003d4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 0201 	and.w	r2, r3, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0xfc>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b12      	cmp	r3, #18
 8003d8a:	d123      	bne.n	8003dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	08da      	lsrs	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3208      	adds	r2, #8
 8003d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0203 	and.w	r2, r3, #3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80ae 	beq.w	8003f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	; (8003f8c <HAL_GPIO_Init+0x2fc>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	4a5b      	ldr	r2, [pc, #364]	; (8003f8c <HAL_GPIO_Init+0x2fc>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e24:	6453      	str	r3, [r2, #68]	; 0x44
 8003e26:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_GPIO_Init+0x2fc>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e32:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <HAL_GPIO_Init+0x300>)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4e      	ldr	r2, [pc, #312]	; (8003f94 <HAL_GPIO_Init+0x304>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d025      	beq.n	8003eaa <HAL_GPIO_Init+0x21a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4d      	ldr	r2, [pc, #308]	; (8003f98 <HAL_GPIO_Init+0x308>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <HAL_GPIO_Init+0x216>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <HAL_GPIO_Init+0x30c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d019      	beq.n	8003ea2 <HAL_GPIO_Init+0x212>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4b      	ldr	r2, [pc, #300]	; (8003fa0 <HAL_GPIO_Init+0x310>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_GPIO_Init+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4a      	ldr	r2, [pc, #296]	; (8003fa4 <HAL_GPIO_Init+0x314>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00d      	beq.n	8003e9a <HAL_GPIO_Init+0x20a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a49      	ldr	r2, [pc, #292]	; (8003fa8 <HAL_GPIO_Init+0x318>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <HAL_GPIO_Init+0x206>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a48      	ldr	r2, [pc, #288]	; (8003fac <HAL_GPIO_Init+0x31c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_GPIO_Init+0x202>
 8003e8e:	2306      	movs	r3, #6
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e92:	2307      	movs	r3, #7
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_Init+0x21c>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ebc:	4934      	ldr	r1, [pc, #208]	; (8003f90 <HAL_GPIO_Init+0x300>)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eee:	4a30      	ldr	r2, [pc, #192]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f18:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f42:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f6c:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <HAL_GPIO_Init+0x320>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3301      	adds	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	f67f ae96 	bls.w	8003cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	3724      	adds	r7, #36	; 0x24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40013800 	.word	0x40013800
 8003f94:	40020000 	.word	0x40020000
 8003f98:	40020400 	.word	0x40020400
 8003f9c:	40020800 	.word	0x40020800
 8003fa0:	40020c00 	.word	0x40020c00
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40021400 	.word	0x40021400
 8003fac:	40021800 	.word	0x40021800
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e001      	b.n	8003fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004000:	e003      	b.n	800400a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e11f      	b.n	800426a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fe fd28 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	; 0x24
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800407c:	f001 f862 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8004080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a7b      	ldr	r2, [pc, #492]	; (8004274 <HAL_I2C_Init+0x25c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d807      	bhi.n	800409c <HAL_I2C_Init+0x84>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a7a      	ldr	r2, [pc, #488]	; (8004278 <HAL_I2C_Init+0x260>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e006      	b.n	80040aa <HAL_I2C_Init+0x92>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a77      	ldr	r2, [pc, #476]	; (800427c <HAL_I2C_Init+0x264>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0db      	b.n	800426a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a72      	ldr	r2, [pc, #456]	; (8004280 <HAL_I2C_Init+0x268>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0c9b      	lsrs	r3, r3, #18
 80040bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a64      	ldr	r2, [pc, #400]	; (8004274 <HAL_I2C_Init+0x25c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d802      	bhi.n	80040ec <HAL_I2C_Init+0xd4>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3301      	adds	r3, #1
 80040ea:	e009      	b.n	8004100 <HAL_I2C_Init+0xe8>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	4a63      	ldr	r2, [pc, #396]	; (8004284 <HAL_I2C_Init+0x26c>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	3301      	adds	r3, #1
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4956      	ldr	r1, [pc, #344]	; (8004274 <HAL_I2C_Init+0x25c>)
 800411c:	428b      	cmp	r3, r1
 800411e:	d80d      	bhi.n	800413c <HAL_I2C_Init+0x124>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e59      	subs	r1, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fbb1 f3f3 	udiv	r3, r1, r3
 800412e:	3301      	adds	r3, #1
 8004130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004134:	2b04      	cmp	r3, #4
 8004136:	bf38      	it	cc
 8004138:	2304      	movcc	r3, #4
 800413a:	e04f      	b.n	80041dc <HAL_I2C_Init+0x1c4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d111      	bne.n	8004168 <HAL_I2C_Init+0x150>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	440b      	add	r3, r1
 8004152:	fbb0 f3f3 	udiv	r3, r0, r3
 8004156:	3301      	adds	r3, #1
 8004158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e012      	b.n	800418e <HAL_I2C_Init+0x176>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	0099      	lsls	r1, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Init+0x17e>
 8004192:	2301      	movs	r3, #1
 8004194:	e022      	b.n	80041dc <HAL_I2C_Init+0x1c4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10e      	bne.n	80041bc <HAL_I2C_Init+0x1a4>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e58      	subs	r0, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	440b      	add	r3, r1
 80041ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ba:	e00f      	b.n	80041dc <HAL_I2C_Init+0x1c4>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1e58      	subs	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	0099      	lsls	r1, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	6809      	ldr	r1, [r1, #0]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800420a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6911      	ldr	r1, [r2, #16]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68d2      	ldr	r2, [r2, #12]
 8004216:	4311      	orrs	r1, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	430b      	orrs	r3, r1
 800421e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	000186a0 	.word	0x000186a0
 8004278:	001e847f 	.word	0x001e847f
 800427c:	003d08ff 	.word	0x003d08ff
 8004280:	431bde83 	.word	0x431bde83
 8004284:	10624dd3 	.word	0x10624dd3

08004288 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	461a      	mov	r2, r3
 8004294:	460b      	mov	r3, r1
 8004296:	817b      	strh	r3, [r7, #10]
 8004298:	4613      	mov	r3, r2
 800429a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800429c:	f7fe ffe8 	bl	8003270 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 80e0 	bne.w	8004470 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2319      	movs	r3, #25
 80042b6:	2201      	movs	r2, #1
 80042b8:	4970      	ldr	r1, [pc, #448]	; (800447c <HAL_I2C_Master_Transmit+0x1f4>)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fc72 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
 80042c8:	e0d3      	b.n	8004472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_I2C_Master_Transmit+0x50>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e0cc      	b.n	8004472 <HAL_I2C_Master_Transmit+0x1ea>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d007      	beq.n	80042fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2221      	movs	r2, #33	; 0x21
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2210      	movs	r2, #16
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a50      	ldr	r2, [pc, #320]	; (8004480 <HAL_I2C_Master_Transmit+0x1f8>)
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004340:	8979      	ldrh	r1, [r7, #10]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6a3a      	ldr	r2, [r7, #32]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fadc 	bl	8004904 <I2C_MasterRequestWrite>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e08d      	b.n	8004472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800436c:	e066      	b.n	800443c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	6a39      	ldr	r1, [r7, #32]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fcec 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00d      	beq.n	800439a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b04      	cmp	r3, #4
 8004384:	d107      	bne.n	8004396 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06b      	b.n	8004472 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11b      	bne.n	8004410 <HAL_I2C_Master_Transmit+0x188>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d017      	beq.n	8004410 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	6a39      	ldr	r1, [r7, #32]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fcdc 	bl	8004dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b04      	cmp	r3, #4
 8004426:	d107      	bne.n	8004438 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e01a      	b.n	8004472 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d194      	bne.n	800436e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	00100002 	.word	0x00100002
 8004480:	ffff0000 	.word	0xffff0000

08004484 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	461a      	mov	r2, r3
 8004490:	460b      	mov	r3, r1
 8004492:	817b      	strh	r3, [r7, #10]
 8004494:	4613      	mov	r3, r2
 8004496:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7fe feea 	bl	8003270 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	f040 820b 	bne.w	80048c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2319      	movs	r3, #25
 80044b2:	2201      	movs	r2, #1
 80044b4:	497c      	ldr	r1, [pc, #496]	; (80046a8 <HAL_I2C_Master_Receive+0x224>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fb74 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	e1fe      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_I2C_Master_Receive+0x50>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e1f7      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d007      	beq.n	80044fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2222      	movs	r2, #34	; 0x22
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2210      	movs	r2, #16
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	893a      	ldrh	r2, [r7, #8]
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a5c      	ldr	r2, [pc, #368]	; (80046ac <HAL_I2C_Master_Receive+0x228>)
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800453c:	8979      	ldrh	r1, [r7, #10]
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa60 	bl	8004a08 <I2C_MasterRequestRead>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1b8      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	d113      	bne.n	8004582 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e18c      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b01      	cmp	r3, #1
 8004588:	d11b      	bne.n	80045c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e16c      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d11b      	bne.n	8004602 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	e14c      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004628:	e138      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	2b03      	cmp	r3, #3
 8004630:	f200 80f1 	bhi.w	8004816 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	2b01      	cmp	r3, #1
 800463a:	d123      	bne.n	8004684 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fc07 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e139      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004682:	e10b      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	2b02      	cmp	r3, #2
 800468a:	d14e      	bne.n	800472a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2200      	movs	r2, #0
 8004694:	4906      	ldr	r1, [pc, #24]	; (80046b0 <HAL_I2C_Master_Receive+0x22c>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fa84 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e10e      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
 80046a6:	bf00      	nop
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000
 80046b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004728:	e0b8      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	2200      	movs	r2, #0
 8004732:	4966      	ldr	r1, [pc, #408]	; (80048cc <HAL_I2C_Master_Receive+0x448>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fa35 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0bf      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	2200      	movs	r2, #0
 800478e:	494f      	ldr	r1, [pc, #316]	; (80048cc <HAL_I2C_Master_Receive+0x448>)
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fa07 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e091      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004814:	e042      	b.n	800489c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fb1a 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e04c      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d118      	bne.n	800489c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f47f aec2 	bne.w	800462a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3728      	adds	r7, #40	; 0x28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	00010004 	.word	0x00010004

080048d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048de:	b2db      	uxtb	r3, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d006      	beq.n	800492e <I2C_MasterRequestWrite+0x2a>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d003      	beq.n	800492e <I2C_MasterRequestWrite+0x2a>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492c:	d108      	bne.n	8004940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e00b      	b.n	8004958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	2b12      	cmp	r3, #18
 8004946:	d107      	bne.n	8004958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f91d 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d103      	bne.n	8004988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e035      	b.n	80049f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004994:	d108      	bne.n	80049a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	e01b      	b.n	80049e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049a8:	897b      	ldrh	r3, [r7, #10]
 80049aa:	11db      	asrs	r3, r3, #7
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f063 030f 	orn	r3, r3, #15
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	490e      	ldr	r1, [pc, #56]	; (8004a00 <I2C_MasterRequestWrite+0xfc>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f943 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e010      	b.n	80049f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4907      	ldr	r1, [pc, #28]	; (8004a04 <I2C_MasterRequestWrite+0x100>)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f933 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	00010008 	.word	0x00010008
 8004a04:	00010002 	.word	0x00010002

08004a08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	460b      	mov	r3, r1
 8004a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d006      	beq.n	8004a42 <I2C_MasterRequestRead+0x3a>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d003      	beq.n	8004a42 <I2C_MasterRequestRead+0x3a>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a40:	d108      	bne.n	8004a54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e00b      	b.n	8004a6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	2b11      	cmp	r3, #17
 8004a5a:	d107      	bne.n	8004a6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f893 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00d      	beq.n	8004aa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d103      	bne.n	8004a9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e079      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa8:	d108      	bne.n	8004abc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]
 8004aba:	e05f      	b.n	8004b7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004abc:	897b      	ldrh	r3, [r7, #10]
 8004abe:	11db      	asrs	r3, r3, #7
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0306 	and.w	r3, r3, #6
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f063 030f 	orn	r3, r3, #15
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4930      	ldr	r1, [pc, #192]	; (8004b9c <I2C_MasterRequestRead+0x194>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8b9 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e054      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4929      	ldr	r1, [pc, #164]	; (8004ba0 <I2C_MasterRequestRead+0x198>)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f8a9 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e044      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f831 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d103      	bne.n	8004b60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e017      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b64:	897b      	ldrh	r3, [r7, #10]
 8004b66:	11db      	asrs	r3, r3, #7
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 0306 	and.w	r3, r3, #6
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f063 030e 	orn	r3, r3, #14
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4907      	ldr	r1, [pc, #28]	; (8004ba0 <I2C_MasterRequestRead+0x198>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f865 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	00010008 	.word	0x00010008
 8004ba0:	00010002 	.word	0x00010002

08004ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb4:	e025      	b.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d021      	beq.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe fb57 	bl	8003270 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d116      	bne.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e023      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10d      	bne.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	e00c      	b.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d0b6      	beq.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c60:	e051      	b.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d123      	bne.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e046      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d021      	beq.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fe fad5 	bl	8003270 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e020      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10c      	bne.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	43da      	mvns	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e00b      	b.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d18d      	bne.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d5c:	e02d      	b.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8ce 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e02d      	b.n	8004dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d021      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe fa7b 	bl	8003270 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e007      	b.n	8004dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d1ca      	bne.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dde:	e02d      	b.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f88d 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e02d      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d021      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df8:	f7fe fa3a 	bl	8003270 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d116      	bne.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e007      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d1ca      	bne.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e60:	e042      	b.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d119      	bne.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e029      	b.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fe f9e4 	bl	8003270 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e007      	b.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d1b5      	bne.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d11b      	bne.n	8004f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0cc      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b68      	ldr	r3, [pc, #416]	; (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d90c      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b65      	ldr	r3, [pc, #404]	; (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b63      	ldr	r3, [pc, #396]	; (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0b8      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb4:	4b59      	ldr	r3, [pc, #356]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4a58      	ldr	r2, [pc, #352]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fcc:	4b53      	ldr	r3, [pc, #332]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4a52      	ldr	r2, [pc, #328]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd8:	4b50      	ldr	r3, [pc, #320]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	494d      	ldr	r1, [pc, #308]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d044      	beq.n	8005080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d119      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07f      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d003      	beq.n	800501e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800501a:	2b03      	cmp	r3, #3
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501e:	4b3f      	ldr	r3, [pc, #252]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e06f      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b3b      	ldr	r3, [pc, #236]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e067      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503e:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 0203 	bic.w	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4934      	ldr	r1, [pc, #208]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005050:	f7fe f90e 	bl	8003270 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	e00a      	b.n	800506e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005058:	f7fe f90a 	bl	8003270 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	; 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e04f      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	4b2b      	ldr	r3, [pc, #172]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 020c 	and.w	r2, r3, #12
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d1eb      	bne.n	8005058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005080:	4b25      	ldr	r3, [pc, #148]	; (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d20c      	bcs.n	80050a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508e:	4b22      	ldr	r3, [pc, #136]	; (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b20      	ldr	r3, [pc, #128]	; (8005118 <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e032      	b.n	800510e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4916      	ldr	r1, [pc, #88]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	490e      	ldr	r1, [pc, #56]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050e6:	f000 f855 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 80050ea:	4601      	mov	r1, r0
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x1c0>)
 80050f8:	5cd3      	ldrb	r3, [r2, r3]
 80050fa:	fa21 f303 	lsr.w	r3, r1, r3
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1c8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe f86e 	bl	80031e8 <HAL_InitTick>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023c00 	.word	0x40023c00
 800511c:	40023800 	.word	0x40023800
 8005120:	0800abe0 	.word	0x0800abe0
 8005124:	20000138 	.word	0x20000138
 8005128:	2000013c 	.word	0x2000013c

0800512c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <HAL_RCC_GetHCLKFreq+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000138 	.word	0x20000138

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005148:	f7ff fff0 	bl	800512c <HAL_RCC_GetHCLKFreq>
 800514c:	4601      	mov	r1, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0a9b      	lsrs	r3, r3, #10
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4a03      	ldr	r2, [pc, #12]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515a:	5cd3      	ldrb	r3, [r2, r3]
 800515c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	0800abf0 	.word	0x0800abf0

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005170:	f7ff ffdc 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8005174:	4601      	mov	r1, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0b5b      	lsrs	r3, r3, #13
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005182:	5cd3      	ldrb	r3, [r2, r3]
 8005184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	0800abf0 	.word	0x0800abf0

08005194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ae:	4b9f      	ldr	r3, [pc, #636]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	f200 8130 	bhi.w	800541c <HAL_RCC_GetSysClockFreq+0x288>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	0800541d 	.word	0x0800541d
 80051cc:	0800541d 	.word	0x0800541d
 80051d0:	0800541d 	.word	0x0800541d
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	0800541d 	.word	0x0800541d
 80051dc:	0800541d 	.word	0x0800541d
 80051e0:	0800541d 	.word	0x0800541d
 80051e4:	08005205 	.word	0x08005205
 80051e8:	0800541d 	.word	0x0800541d
 80051ec:	0800541d 	.word	0x0800541d
 80051f0:	0800541d 	.word	0x0800541d
 80051f4:	08005313 	.word	0x08005313
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b8d      	ldr	r3, [pc, #564]	; (8005430 <HAL_RCC_GetSysClockFreq+0x29c>)
 80051fa:	613b      	str	r3, [r7, #16]
       break;
 80051fc:	e111      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fe:	4b8d      	ldr	r3, [pc, #564]	; (8005434 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005200:	613b      	str	r3, [r7, #16]
      break;
 8005202:	e10e      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005204:	4b89      	ldr	r3, [pc, #548]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800520e:	4b87      	ldr	r3, [pc, #540]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d023      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521a:	4b84      	ldr	r3, [pc, #528]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	099b      	lsrs	r3, r3, #6
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	ea03 0501 	and.w	r5, r3, r1
 8005230:	ea04 0602 	and.w	r6, r4, r2
 8005234:	4a7f      	ldr	r2, [pc, #508]	; (8005434 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005236:	fb02 f106 	mul.w	r1, r2, r6
 800523a:	2200      	movs	r2, #0
 800523c:	fb02 f205 	mul.w	r2, r2, r5
 8005240:	440a      	add	r2, r1
 8005242:	497c      	ldr	r1, [pc, #496]	; (8005434 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005244:	fba5 0101 	umull	r0, r1, r5, r1
 8005248:	1853      	adds	r3, r2, r1
 800524a:	4619      	mov	r1, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f04f 0400 	mov.w	r4, #0
 8005252:	461a      	mov	r2, r3
 8005254:	4623      	mov	r3, r4
 8005256:	f7fb fd37 	bl	8000cc8 <__aeabi_uldivmod>
 800525a:	4603      	mov	r3, r0
 800525c:	460c      	mov	r4, r1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e049      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005262:	4b72      	ldr	r3, [pc, #456]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	f04f 0400 	mov.w	r4, #0
 800526c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	ea03 0501 	and.w	r5, r3, r1
 8005278:	ea04 0602 	and.w	r6, r4, r2
 800527c:	4629      	mov	r1, r5
 800527e:	4632      	mov	r2, r6
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	0154      	lsls	r4, r2, #5
 800528a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800528e:	014b      	lsls	r3, r1, #5
 8005290:	4619      	mov	r1, r3
 8005292:	4622      	mov	r2, r4
 8005294:	1b49      	subs	r1, r1, r5
 8005296:	eb62 0206 	sbc.w	r2, r2, r6
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	f04f 0400 	mov.w	r4, #0
 80052a2:	0194      	lsls	r4, r2, #6
 80052a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052a8:	018b      	lsls	r3, r1, #6
 80052aa:	1a5b      	subs	r3, r3, r1
 80052ac:	eb64 0402 	sbc.w	r4, r4, r2
 80052b0:	f04f 0100 	mov.w	r1, #0
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	00e2      	lsls	r2, r4, #3
 80052ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052be:	00d9      	lsls	r1, r3, #3
 80052c0:	460b      	mov	r3, r1
 80052c2:	4614      	mov	r4, r2
 80052c4:	195b      	adds	r3, r3, r5
 80052c6:	eb44 0406 	adc.w	r4, r4, r6
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	02a2      	lsls	r2, r4, #10
 80052d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052d8:	0299      	lsls	r1, r3, #10
 80052da:	460b      	mov	r3, r1
 80052dc:	4614      	mov	r4, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	4621      	mov	r1, r4
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	f7fb fcec 	bl	8000cc8 <__aeabi_uldivmod>
 80052f0:	4603      	mov	r3, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052f6:	4b4d      	ldr	r3, [pc, #308]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	3301      	adds	r3, #1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	613b      	str	r3, [r7, #16]
      break;
 8005310:	e087      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005312:	4b46      	ldr	r3, [pc, #280]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800531c:	4b43      	ldr	r3, [pc, #268]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d023      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005328:	4b40      	ldr	r3, [pc, #256]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	099b      	lsrs	r3, r3, #6
 800532e:	f04f 0400 	mov.w	r4, #0
 8005332:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	ea03 0501 	and.w	r5, r3, r1
 800533e:	ea04 0602 	and.w	r6, r4, r2
 8005342:	4a3c      	ldr	r2, [pc, #240]	; (8005434 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005344:	fb02 f106 	mul.w	r1, r2, r6
 8005348:	2200      	movs	r2, #0
 800534a:	fb02 f205 	mul.w	r2, r2, r5
 800534e:	440a      	add	r2, r1
 8005350:	4938      	ldr	r1, [pc, #224]	; (8005434 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005352:	fba5 0101 	umull	r0, r1, r5, r1
 8005356:	1853      	adds	r3, r2, r1
 8005358:	4619      	mov	r1, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f04f 0400 	mov.w	r4, #0
 8005360:	461a      	mov	r2, r3
 8005362:	4623      	mov	r3, r4
 8005364:	f7fb fcb0 	bl	8000cc8 <__aeabi_uldivmod>
 8005368:	4603      	mov	r3, r0
 800536a:	460c      	mov	r4, r1
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e049      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005370:	4b2e      	ldr	r3, [pc, #184]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	ea03 0501 	and.w	r5, r3, r1
 8005386:	ea04 0602 	and.w	r6, r4, r2
 800538a:	4629      	mov	r1, r5
 800538c:	4632      	mov	r2, r6
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	f04f 0400 	mov.w	r4, #0
 8005396:	0154      	lsls	r4, r2, #5
 8005398:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800539c:	014b      	lsls	r3, r1, #5
 800539e:	4619      	mov	r1, r3
 80053a0:	4622      	mov	r2, r4
 80053a2:	1b49      	subs	r1, r1, r5
 80053a4:	eb62 0206 	sbc.w	r2, r2, r6
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	0194      	lsls	r4, r2, #6
 80053b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053b6:	018b      	lsls	r3, r1, #6
 80053b8:	1a5b      	subs	r3, r3, r1
 80053ba:	eb64 0402 	sbc.w	r4, r4, r2
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	00e2      	lsls	r2, r4, #3
 80053c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053cc:	00d9      	lsls	r1, r3, #3
 80053ce:	460b      	mov	r3, r1
 80053d0:	4614      	mov	r4, r2
 80053d2:	195b      	adds	r3, r3, r5
 80053d4:	eb44 0406 	adc.w	r4, r4, r6
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	02a2      	lsls	r2, r4, #10
 80053e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053e6:	0299      	lsls	r1, r3, #10
 80053e8:	460b      	mov	r3, r1
 80053ea:	4614      	mov	r4, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	4621      	mov	r1, r4
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f04f 0400 	mov.w	r4, #0
 80053f6:	461a      	mov	r2, r3
 80053f8:	4623      	mov	r3, r4
 80053fa:	f7fb fc65 	bl	8000cc8 <__aeabi_uldivmod>
 80053fe:	4603      	mov	r3, r0
 8005400:	460c      	mov	r4, r1
 8005402:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <HAL_RCC_GetSysClockFreq+0x298>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	0f1b      	lsrs	r3, r3, #28
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	613b      	str	r3, [r7, #16]
      break;
 800541a:	e002      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <HAL_RCC_GetSysClockFreq+0x29c>)
 800541e:	613b      	str	r3, [r7, #16]
      break;
 8005420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005422:	693b      	ldr	r3, [r7, #16]
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	00f42400 	.word	0x00f42400
 8005434:	017d7840 	.word	0x017d7840

08005438 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8083 	beq.w	8005558 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005452:	4b95      	ldr	r3, [pc, #596]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b04      	cmp	r3, #4
 800545c:	d019      	beq.n	8005492 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800545e:	4b92      	ldr	r3, [pc, #584]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005466:	2b08      	cmp	r3, #8
 8005468:	d106      	bne.n	8005478 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800546a:	4b8f      	ldr	r3, [pc, #572]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005476:	d00c      	beq.n	8005492 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005478:	4b8b      	ldr	r3, [pc, #556]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005480:	2b0c      	cmp	r3, #12
 8005482:	d112      	bne.n	80054aa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005484:	4b88      	ldr	r3, [pc, #544]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005490:	d10b      	bne.n	80054aa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005492:	4b85      	ldr	r3, [pc, #532]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d05b      	beq.n	8005556 <HAL_RCC_OscConfig+0x11e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d157      	bne.n	8005556 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e216      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_OscConfig+0x8a>
 80054b4:	4b7c      	ldr	r3, [pc, #496]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7b      	ldr	r2, [pc, #492]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e01d      	b.n	80054fe <HAL_RCC_OscConfig+0xc6>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ca:	d10c      	bne.n	80054e6 <HAL_RCC_OscConfig+0xae>
 80054cc:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a75      	ldr	r2, [pc, #468]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4b73      	ldr	r3, [pc, #460]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a72      	ldr	r2, [pc, #456]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e00b      	b.n	80054fe <HAL_RCC_OscConfig+0xc6>
 80054e6:	4b70      	ldr	r3, [pc, #448]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a6f      	ldr	r2, [pc, #444]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6c      	ldr	r2, [pc, #432]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80054f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd feb3 	bl	8003270 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550e:	f7fd feaf 	bl	8003270 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	; 0x64
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e1db      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005520:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0xd6>
 800552c:	e014      	b.n	8005558 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fd fe9f 	bl	8003270 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005536:	f7fd fe9b 	bl	8003270 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b64      	cmp	r3, #100	; 0x64
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1c7      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005548:	4b57      	ldr	r3, [pc, #348]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCC_OscConfig+0xfe>
 8005554:	e000      	b.n	8005558 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005556:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d06f      	beq.n	8005644 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b00      	cmp	r3, #0
 800556e:	d017      	beq.n	80055a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005570:	4b4d      	ldr	r3, [pc, #308]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005578:	2b08      	cmp	r3, #8
 800557a:	d105      	bne.n	8005588 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800557c:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005588:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d11c      	bne.n	80055ce <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005594:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a0:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_OscConfig+0x180>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e18f      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b8:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4938      	ldr	r1, [pc, #224]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055cc:	e03a      	b.n	8005644 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d020      	beq.n	8005618 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d6:	4b35      	ldr	r3, [pc, #212]	; (80056ac <HAL_RCC_OscConfig+0x274>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fd fe48 	bl	8003270 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e4:	f7fd fe44 	bl	8003270 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e170      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f6:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005602:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4925      	ldr	r1, [pc, #148]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
 8005616:	e015      	b.n	8005644 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HAL_RCC_OscConfig+0x274>)
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fd fe27 	bl	8003270 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005626:	f7fd fe23 	bl	8003270 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e14f      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d037      	beq.n	80056c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d016      	beq.n	8005686 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005658:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <HAL_RCC_OscConfig+0x278>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565e:	f7fd fe07 	bl	8003270 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005666:	f7fd fe03 	bl	8003270 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e12f      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_OscConfig+0x270>)
 800567a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x22e>
 8005684:	e01c      	b.n	80056c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <HAL_RCC_OscConfig+0x278>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568c:	f7fd fdf0 	bl	8003270 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005692:	e00f      	b.n	80056b4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005694:	f7fd fdec 	bl	8003270 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d908      	bls.n	80056b4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e118      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	42470000 	.word	0x42470000
 80056b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b4:	4b8a      	ldr	r3, [pc, #552]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80056b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e9      	bne.n	8005694 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8097 	beq.w	80057fc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d2:	4b83      	ldr	r3, [pc, #524]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10f      	bne.n	80056fe <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	4b7f      	ldr	r3, [pc, #508]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	4a7e      	ldr	r2, [pc, #504]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80056e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ec:	6413      	str	r3, [r2, #64]	; 0x40
 80056ee:	4b7c      	ldr	r3, [pc, #496]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fe:	4b79      	ldr	r3, [pc, #484]	; (80058e4 <HAL_RCC_OscConfig+0x4ac>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d118      	bne.n	800573c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800570a:	4b76      	ldr	r3, [pc, #472]	; (80058e4 <HAL_RCC_OscConfig+0x4ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a75      	ldr	r2, [pc, #468]	; (80058e4 <HAL_RCC_OscConfig+0x4ac>)
 8005710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005716:	f7fd fdab 	bl	8003270 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571e:	f7fd fda7 	bl	8003270 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0d3      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	4b6c      	ldr	r3, [pc, #432]	; (80058e4 <HAL_RCC_OscConfig+0x4ac>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f0      	beq.n	800571e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d106      	bne.n	8005752 <HAL_RCC_OscConfig+0x31a>
 8005744:	4b66      	ldr	r3, [pc, #408]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	4a65      	ldr	r2, [pc, #404]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6713      	str	r3, [r2, #112]	; 0x70
 8005750:	e01c      	b.n	800578c <HAL_RCC_OscConfig+0x354>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b05      	cmp	r3, #5
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0x33c>
 800575a:	4b61      	ldr	r3, [pc, #388]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a60      	ldr	r2, [pc, #384]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005760:	f043 0304 	orr.w	r3, r3, #4
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	4b5e      	ldr	r3, [pc, #376]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
 8005772:	e00b      	b.n	800578c <HAL_RCC_OscConfig+0x354>
 8005774:	4b5a      	ldr	r3, [pc, #360]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	4a59      	ldr	r2, [pc, #356]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	6713      	str	r3, [r2, #112]	; 0x70
 8005780:	4b57      	ldr	r3, [pc, #348]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4a56      	ldr	r2, [pc, #344]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005786:	f023 0304 	bic.w	r3, r3, #4
 800578a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fd fd6c 	bl	8003270 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fd fd68 	bl	8003270 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e092      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b2:	4b4b      	ldr	r3, [pc, #300]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ee      	beq.n	800579c <HAL_RCC_OscConfig+0x364>
 80057be:	e014      	b.n	80057ea <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c0:	f7fd fd56 	bl	8003270 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c6:	e00a      	b.n	80057de <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c8:	f7fd fd52 	bl	8003270 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e07c      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057de:	4b40      	ldr	r3, [pc, #256]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1ee      	bne.n	80057c8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d105      	bne.n	80057fc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f0:	4b3b      	ldr	r3, [pc, #236]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	4a3a      	ldr	r2, [pc, #232]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d068      	beq.n	80058d6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005804:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b08      	cmp	r3, #8
 800580e:	d060      	beq.n	80058d2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d145      	bne.n	80058a4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_RCC_OscConfig+0x4b0>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7fd fd27 	bl	8003270 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005826:	f7fd fd23 	bl	8003270 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e04f      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005838:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	019b      	lsls	r3, r3, #6
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	071b      	lsls	r3, r3, #28
 8005870:	491b      	ldr	r1, [pc, #108]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005876:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <HAL_RCC_OscConfig+0x4b0>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fd fcf8 	bl	8003270 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7fd fcf4 	bl	8003270 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e020      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x44c>
 80058a2:	e018      	b.n	80058d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <HAL_RCC_OscConfig+0x4b0>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fd fce1 	bl	8003270 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fd fcdd 	bl	8003270 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e009      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_RCC_OscConfig+0x4a8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x47a>
 80058d0:	e001      	b.n	80058d6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	40007000 	.word	0x40007000
 80058e8:	42470060 	.word	0x42470060

080058ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e056      	b.n	80059ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fd f95b 	bl	8002bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005934:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	ea42 0103 	orr.w	r1, r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	f003 0104 	and.w	r1, r3, #4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800599a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e03f      	b.n	8005a46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fd f972 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	; 0x24
 80059e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f9b1 	bl	8005d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b088      	sub	sp, #32
 8005a52:	af02      	add	r7, sp, #8
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	f040 8083 	bne.w	8005b76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Transmit+0x2e>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e07b      	b.n	8005b78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Transmit+0x40>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e074      	b.n	8005b78 <HAL_UART_Transmit+0x12a>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2221      	movs	r2, #33	; 0x21
 8005aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005aa4:	f7fd fbe4 	bl	8003270 <HAL_GetTick>
 8005aa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005abe:	e042      	b.n	8005b46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	d122      	bne.n	8005b1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f8f2 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e042      	b.n	8005b78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	3302      	adds	r3, #2
 8005b12:	60bb      	str	r3, [r7, #8]
 8005b14:	e017      	b.n	8005b46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	e013      	b.n	8005b46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2180      	movs	r1, #128	; 0x80
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f8cf 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e01f      	b.n	8005b78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	60ba      	str	r2, [r7, #8]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1b7      	bne.n	8005ac0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f8b6 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e006      	b.n	8005b78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e000      	b.n	8005b78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
  }
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	f040 8090 	bne.w	8005cc2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_Receive+0x2e>
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e088      	b.n	8005cc4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Receive+0x40>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e081      	b.n	8005cc4 <HAL_UART_Receive+0x144>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2222      	movs	r2, #34	; 0x22
 8005bd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bd6:	f7fd fb4b 	bl	8003270 <HAL_GetTick>
 8005bda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005bf0:	e05c      	b.n	8005cac <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d12b      	bne.n	8005c62 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2120      	movs	r1, #32
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f859 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e04f      	b.n	8005cc4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10c      	bne.n	8005c4a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	3302      	adds	r3, #2
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	e030      	b.n	8005cac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	e024      	b.n	8005cac <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f82d 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e023      	b.n	8005cc4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	60ba      	str	r2, [r7, #8]
 8005c90:	b2ca      	uxtb	r2, r1
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e00a      	b.n	8005cac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d19d      	bne.n	8005bf2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cdc:	e02c      	b.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce4:	d028      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005cec:	f7fd fac0 	bl	8003270 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d21d      	bcs.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e00f      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d0c3      	beq.n	8005cde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005da2:	f023 030c 	bic.w	r3, r3, #12
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dce:	f040 818b 	bne.w	80060e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4ac1      	ldr	r2, [pc, #772]	; (80060dc <UART_SetConfig+0x37c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d005      	beq.n	8005de8 <UART_SetConfig+0x88>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4abf      	ldr	r2, [pc, #764]	; (80060e0 <UART_SetConfig+0x380>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	f040 80bd 	bne.w	8005f62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7ff f9c0 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8005dec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	461d      	mov	r5, r3
 8005df2:	f04f 0600 	mov.w	r6, #0
 8005df6:	46a8      	mov	r8, r5
 8005df8:	46b1      	mov	r9, r6
 8005dfa:	eb18 0308 	adds.w	r3, r8, r8
 8005dfe:	eb49 0409 	adc.w	r4, r9, r9
 8005e02:	4698      	mov	r8, r3
 8005e04:	46a1      	mov	r9, r4
 8005e06:	eb18 0805 	adds.w	r8, r8, r5
 8005e0a:	eb49 0906 	adc.w	r9, r9, r6
 8005e0e:	f04f 0100 	mov.w	r1, #0
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e22:	4688      	mov	r8, r1
 8005e24:	4691      	mov	r9, r2
 8005e26:	eb18 0005 	adds.w	r0, r8, r5
 8005e2a:	eb49 0106 	adc.w	r1, r9, r6
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	461d      	mov	r5, r3
 8005e34:	f04f 0600 	mov.w	r6, #0
 8005e38:	196b      	adds	r3, r5, r5
 8005e3a:	eb46 0406 	adc.w	r4, r6, r6
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4623      	mov	r3, r4
 8005e42:	f7fa ff41 	bl	8000cc8 <__aeabi_uldivmod>
 8005e46:	4603      	mov	r3, r0
 8005e48:	460c      	mov	r4, r1
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4ba5      	ldr	r3, [pc, #660]	; (80060e4 <UART_SetConfig+0x384>)
 8005e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	f04f 0600 	mov.w	r6, #0
 8005e60:	46a9      	mov	r9, r5
 8005e62:	46b2      	mov	sl, r6
 8005e64:	eb19 0309 	adds.w	r3, r9, r9
 8005e68:	eb4a 040a 	adc.w	r4, sl, sl
 8005e6c:	4699      	mov	r9, r3
 8005e6e:	46a2      	mov	sl, r4
 8005e70:	eb19 0905 	adds.w	r9, r9, r5
 8005e74:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e78:	f04f 0100 	mov.w	r1, #0
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e8c:	4689      	mov	r9, r1
 8005e8e:	4692      	mov	sl, r2
 8005e90:	eb19 0005 	adds.w	r0, r9, r5
 8005e94:	eb4a 0106 	adc.w	r1, sl, r6
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	461d      	mov	r5, r3
 8005e9e:	f04f 0600 	mov.w	r6, #0
 8005ea2:	196b      	adds	r3, r5, r5
 8005ea4:	eb46 0406 	adc.w	r4, r6, r6
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4623      	mov	r3, r4
 8005eac:	f7fa ff0c 	bl	8000cc8 <__aeabi_uldivmod>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b8b      	ldr	r3, [pc, #556]	; (80060e4 <UART_SetConfig+0x384>)
 8005eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	2164      	movs	r1, #100	; 0x64
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	3332      	adds	r3, #50	; 0x32
 8005eca:	4a86      	ldr	r2, [pc, #536]	; (80060e4 <UART_SetConfig+0x384>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ed8:	4498      	add	r8, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	461d      	mov	r5, r3
 8005ede:	f04f 0600 	mov.w	r6, #0
 8005ee2:	46a9      	mov	r9, r5
 8005ee4:	46b2      	mov	sl, r6
 8005ee6:	eb19 0309 	adds.w	r3, r9, r9
 8005eea:	eb4a 040a 	adc.w	r4, sl, sl
 8005eee:	4699      	mov	r9, r3
 8005ef0:	46a2      	mov	sl, r4
 8005ef2:	eb19 0905 	adds.w	r9, r9, r5
 8005ef6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005efa:	f04f 0100 	mov.w	r1, #0
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f0e:	4689      	mov	r9, r1
 8005f10:	4692      	mov	sl, r2
 8005f12:	eb19 0005 	adds.w	r0, r9, r5
 8005f16:	eb4a 0106 	adc.w	r1, sl, r6
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	461d      	mov	r5, r3
 8005f20:	f04f 0600 	mov.w	r6, #0
 8005f24:	196b      	adds	r3, r5, r5
 8005f26:	eb46 0406 	adc.w	r4, r6, r6
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	f7fa fecb 	bl	8000cc8 <__aeabi_uldivmod>
 8005f32:	4603      	mov	r3, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b6a      	ldr	r3, [pc, #424]	; (80060e4 <UART_SetConfig+0x384>)
 8005f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	2164      	movs	r1, #100	; 0x64
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	3332      	adds	r3, #50	; 0x32
 8005f4c:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <UART_SetConfig+0x384>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	f003 0207 	and.w	r2, r3, #7
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4442      	add	r2, r8
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	e26f      	b.n	8006442 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f62:	f7ff f8ef 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8005f66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	461d      	mov	r5, r3
 8005f6c:	f04f 0600 	mov.w	r6, #0
 8005f70:	46a8      	mov	r8, r5
 8005f72:	46b1      	mov	r9, r6
 8005f74:	eb18 0308 	adds.w	r3, r8, r8
 8005f78:	eb49 0409 	adc.w	r4, r9, r9
 8005f7c:	4698      	mov	r8, r3
 8005f7e:	46a1      	mov	r9, r4
 8005f80:	eb18 0805 	adds.w	r8, r8, r5
 8005f84:	eb49 0906 	adc.w	r9, r9, r6
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f9c:	4688      	mov	r8, r1
 8005f9e:	4691      	mov	r9, r2
 8005fa0:	eb18 0005 	adds.w	r0, r8, r5
 8005fa4:	eb49 0106 	adc.w	r1, r9, r6
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	461d      	mov	r5, r3
 8005fae:	f04f 0600 	mov.w	r6, #0
 8005fb2:	196b      	adds	r3, r5, r5
 8005fb4:	eb46 0406 	adc.w	r4, r6, r6
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4623      	mov	r3, r4
 8005fbc:	f7fa fe84 	bl	8000cc8 <__aeabi_uldivmod>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <UART_SetConfig+0x384>)
 8005fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	461d      	mov	r5, r3
 8005fd6:	f04f 0600 	mov.w	r6, #0
 8005fda:	46a9      	mov	r9, r5
 8005fdc:	46b2      	mov	sl, r6
 8005fde:	eb19 0309 	adds.w	r3, r9, r9
 8005fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	46a2      	mov	sl, r4
 8005fea:	eb19 0905 	adds.w	r9, r9, r5
 8005fee:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006006:	4689      	mov	r9, r1
 8006008:	4692      	mov	sl, r2
 800600a:	eb19 0005 	adds.w	r0, r9, r5
 800600e:	eb4a 0106 	adc.w	r1, sl, r6
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	461d      	mov	r5, r3
 8006018:	f04f 0600 	mov.w	r6, #0
 800601c:	196b      	adds	r3, r5, r5
 800601e:	eb46 0406 	adc.w	r4, r6, r6
 8006022:	461a      	mov	r2, r3
 8006024:	4623      	mov	r3, r4
 8006026:	f7fa fe4f 	bl	8000cc8 <__aeabi_uldivmod>
 800602a:	4603      	mov	r3, r0
 800602c:	460c      	mov	r4, r1
 800602e:	461a      	mov	r2, r3
 8006030:	4b2c      	ldr	r3, [pc, #176]	; (80060e4 <UART_SetConfig+0x384>)
 8006032:	fba3 1302 	umull	r1, r3, r3, r2
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	2164      	movs	r1, #100	; 0x64
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	3332      	adds	r3, #50	; 0x32
 8006044:	4a27      	ldr	r2, [pc, #156]	; (80060e4 <UART_SetConfig+0x384>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006052:	4498      	add	r8, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	461d      	mov	r5, r3
 8006058:	f04f 0600 	mov.w	r6, #0
 800605c:	46a9      	mov	r9, r5
 800605e:	46b2      	mov	sl, r6
 8006060:	eb19 0309 	adds.w	r3, r9, r9
 8006064:	eb4a 040a 	adc.w	r4, sl, sl
 8006068:	4699      	mov	r9, r3
 800606a:	46a2      	mov	sl, r4
 800606c:	eb19 0905 	adds.w	r9, r9, r5
 8006070:	eb4a 0a06 	adc.w	sl, sl, r6
 8006074:	f04f 0100 	mov.w	r1, #0
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006080:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006084:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006088:	4689      	mov	r9, r1
 800608a:	4692      	mov	sl, r2
 800608c:	eb19 0005 	adds.w	r0, r9, r5
 8006090:	eb4a 0106 	adc.w	r1, sl, r6
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	461d      	mov	r5, r3
 800609a:	f04f 0600 	mov.w	r6, #0
 800609e:	196b      	adds	r3, r5, r5
 80060a0:	eb46 0406 	adc.w	r4, r6, r6
 80060a4:	461a      	mov	r2, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	f7fa fe0e 	bl	8000cc8 <__aeabi_uldivmod>
 80060ac:	4603      	mov	r3, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <UART_SetConfig+0x384>)
 80060b4:	fba3 1302 	umull	r1, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	2164      	movs	r1, #100	; 0x64
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	3332      	adds	r3, #50	; 0x32
 80060c6:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <UART_SetConfig+0x384>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f003 0207 	and.w	r2, r3, #7
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4442      	add	r2, r8
 80060d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060da:	e1b2      	b.n	8006442 <UART_SetConfig+0x6e2>
 80060dc:	40011000 	.word	0x40011000
 80060e0:	40011400 	.word	0x40011400
 80060e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4ad7      	ldr	r2, [pc, #860]	; (800644c <UART_SetConfig+0x6ec>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d005      	beq.n	80060fe <UART_SetConfig+0x39e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4ad6      	ldr	r2, [pc, #856]	; (8006450 <UART_SetConfig+0x6f0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	f040 80d1 	bne.w	80062a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060fe:	f7ff f835 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8006102:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	469a      	mov	sl, r3
 8006108:	f04f 0b00 	mov.w	fp, #0
 800610c:	46d0      	mov	r8, sl
 800610e:	46d9      	mov	r9, fp
 8006110:	eb18 0308 	adds.w	r3, r8, r8
 8006114:	eb49 0409 	adc.w	r4, r9, r9
 8006118:	4698      	mov	r8, r3
 800611a:	46a1      	mov	r9, r4
 800611c:	eb18 080a 	adds.w	r8, r8, sl
 8006120:	eb49 090b 	adc.w	r9, r9, fp
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006130:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006134:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006138:	4688      	mov	r8, r1
 800613a:	4691      	mov	r9, r2
 800613c:	eb1a 0508 	adds.w	r5, sl, r8
 8006140:	eb4b 0609 	adc.w	r6, fp, r9
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	f04f 0400 	mov.w	r4, #0
 8006156:	0094      	lsls	r4, r2, #2
 8006158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800615c:	008b      	lsls	r3, r1, #2
 800615e:	461a      	mov	r2, r3
 8006160:	4623      	mov	r3, r4
 8006162:	4628      	mov	r0, r5
 8006164:	4631      	mov	r1, r6
 8006166:	f7fa fdaf 	bl	8000cc8 <__aeabi_uldivmod>
 800616a:	4603      	mov	r3, r0
 800616c:	460c      	mov	r4, r1
 800616e:	461a      	mov	r2, r3
 8006170:	4bb8      	ldr	r3, [pc, #736]	; (8006454 <UART_SetConfig+0x6f4>)
 8006172:	fba3 2302 	umull	r2, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	469b      	mov	fp, r3
 8006180:	f04f 0c00 	mov.w	ip, #0
 8006184:	46d9      	mov	r9, fp
 8006186:	46e2      	mov	sl, ip
 8006188:	eb19 0309 	adds.w	r3, r9, r9
 800618c:	eb4a 040a 	adc.w	r4, sl, sl
 8006190:	4699      	mov	r9, r3
 8006192:	46a2      	mov	sl, r4
 8006194:	eb19 090b 	adds.w	r9, r9, fp
 8006198:	eb4a 0a0c 	adc.w	sl, sl, ip
 800619c:	f04f 0100 	mov.w	r1, #0
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061b0:	4689      	mov	r9, r1
 80061b2:	4692      	mov	sl, r2
 80061b4:	eb1b 0509 	adds.w	r5, fp, r9
 80061b8:	eb4c 060a 	adc.w	r6, ip, sl
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4619      	mov	r1, r3
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	f04f 0400 	mov.w	r4, #0
 80061ce:	0094      	lsls	r4, r2, #2
 80061d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061d4:	008b      	lsls	r3, r1, #2
 80061d6:	461a      	mov	r2, r3
 80061d8:	4623      	mov	r3, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	4631      	mov	r1, r6
 80061de:	f7fa fd73 	bl	8000cc8 <__aeabi_uldivmod>
 80061e2:	4603      	mov	r3, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	461a      	mov	r2, r3
 80061e8:	4b9a      	ldr	r3, [pc, #616]	; (8006454 <UART_SetConfig+0x6f4>)
 80061ea:	fba3 1302 	umull	r1, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	2164      	movs	r1, #100	; 0x64
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	3332      	adds	r3, #50	; 0x32
 80061fc:	4a95      	ldr	r2, [pc, #596]	; (8006454 <UART_SetConfig+0x6f4>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006208:	4498      	add	r8, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	469b      	mov	fp, r3
 800620e:	f04f 0c00 	mov.w	ip, #0
 8006212:	46d9      	mov	r9, fp
 8006214:	46e2      	mov	sl, ip
 8006216:	eb19 0309 	adds.w	r3, r9, r9
 800621a:	eb4a 040a 	adc.w	r4, sl, sl
 800621e:	4699      	mov	r9, r3
 8006220:	46a2      	mov	sl, r4
 8006222:	eb19 090b 	adds.w	r9, r9, fp
 8006226:	eb4a 0a0c 	adc.w	sl, sl, ip
 800622a:	f04f 0100 	mov.w	r1, #0
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800623a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800623e:	4689      	mov	r9, r1
 8006240:	4692      	mov	sl, r2
 8006242:	eb1b 0509 	adds.w	r5, fp, r9
 8006246:	eb4c 060a 	adc.w	r6, ip, sl
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4619      	mov	r1, r3
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	f04f 0400 	mov.w	r4, #0
 800625c:	0094      	lsls	r4, r2, #2
 800625e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006262:	008b      	lsls	r3, r1, #2
 8006264:	461a      	mov	r2, r3
 8006266:	4623      	mov	r3, r4
 8006268:	4628      	mov	r0, r5
 800626a:	4631      	mov	r1, r6
 800626c:	f7fa fd2c 	bl	8000cc8 <__aeabi_uldivmod>
 8006270:	4603      	mov	r3, r0
 8006272:	460c      	mov	r4, r1
 8006274:	461a      	mov	r2, r3
 8006276:	4b77      	ldr	r3, [pc, #476]	; (8006454 <UART_SetConfig+0x6f4>)
 8006278:	fba3 1302 	umull	r1, r3, r3, r2
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	2164      	movs	r1, #100	; 0x64
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	3332      	adds	r3, #50	; 0x32
 800628a:	4a72      	ldr	r2, [pc, #456]	; (8006454 <UART_SetConfig+0x6f4>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f003 020f 	and.w	r2, r3, #15
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4442      	add	r2, r8
 800629c:	609a      	str	r2, [r3, #8]
 800629e:	e0d0      	b.n	8006442 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe ff50 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 80062a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	469a      	mov	sl, r3
 80062aa:	f04f 0b00 	mov.w	fp, #0
 80062ae:	46d0      	mov	r8, sl
 80062b0:	46d9      	mov	r9, fp
 80062b2:	eb18 0308 	adds.w	r3, r8, r8
 80062b6:	eb49 0409 	adc.w	r4, r9, r9
 80062ba:	4698      	mov	r8, r3
 80062bc:	46a1      	mov	r9, r4
 80062be:	eb18 080a 	adds.w	r8, r8, sl
 80062c2:	eb49 090b 	adc.w	r9, r9, fp
 80062c6:	f04f 0100 	mov.w	r1, #0
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062da:	4688      	mov	r8, r1
 80062dc:	4691      	mov	r9, r2
 80062de:	eb1a 0508 	adds.w	r5, sl, r8
 80062e2:	eb4b 0609 	adc.w	r6, fp, r9
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	4619      	mov	r1, r3
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	f04f 0400 	mov.w	r4, #0
 80062f8:	0094      	lsls	r4, r2, #2
 80062fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062fe:	008b      	lsls	r3, r1, #2
 8006300:	461a      	mov	r2, r3
 8006302:	4623      	mov	r3, r4
 8006304:	4628      	mov	r0, r5
 8006306:	4631      	mov	r1, r6
 8006308:	f7fa fcde 	bl	8000cc8 <__aeabi_uldivmod>
 800630c:	4603      	mov	r3, r0
 800630e:	460c      	mov	r4, r1
 8006310:	461a      	mov	r2, r3
 8006312:	4b50      	ldr	r3, [pc, #320]	; (8006454 <UART_SetConfig+0x6f4>)
 8006314:	fba3 2302 	umull	r2, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	469b      	mov	fp, r3
 8006322:	f04f 0c00 	mov.w	ip, #0
 8006326:	46d9      	mov	r9, fp
 8006328:	46e2      	mov	sl, ip
 800632a:	eb19 0309 	adds.w	r3, r9, r9
 800632e:	eb4a 040a 	adc.w	r4, sl, sl
 8006332:	4699      	mov	r9, r3
 8006334:	46a2      	mov	sl, r4
 8006336:	eb19 090b 	adds.w	r9, r9, fp
 800633a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800633e:	f04f 0100 	mov.w	r1, #0
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800634a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800634e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006352:	4689      	mov	r9, r1
 8006354:	4692      	mov	sl, r2
 8006356:	eb1b 0509 	adds.w	r5, fp, r9
 800635a:	eb4c 060a 	adc.w	r6, ip, sl
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	f04f 0400 	mov.w	r4, #0
 8006370:	0094      	lsls	r4, r2, #2
 8006372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006376:	008b      	lsls	r3, r1, #2
 8006378:	461a      	mov	r2, r3
 800637a:	4623      	mov	r3, r4
 800637c:	4628      	mov	r0, r5
 800637e:	4631      	mov	r1, r6
 8006380:	f7fa fca2 	bl	8000cc8 <__aeabi_uldivmod>
 8006384:	4603      	mov	r3, r0
 8006386:	460c      	mov	r4, r1
 8006388:	461a      	mov	r2, r3
 800638a:	4b32      	ldr	r3, [pc, #200]	; (8006454 <UART_SetConfig+0x6f4>)
 800638c:	fba3 1302 	umull	r1, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	2164      	movs	r1, #100	; 0x64
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	3332      	adds	r3, #50	; 0x32
 800639e:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <UART_SetConfig+0x6f4>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063aa:	4498      	add	r8, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	469b      	mov	fp, r3
 80063b0:	f04f 0c00 	mov.w	ip, #0
 80063b4:	46d9      	mov	r9, fp
 80063b6:	46e2      	mov	sl, ip
 80063b8:	eb19 0309 	adds.w	r3, r9, r9
 80063bc:	eb4a 040a 	adc.w	r4, sl, sl
 80063c0:	4699      	mov	r9, r3
 80063c2:	46a2      	mov	sl, r4
 80063c4:	eb19 090b 	adds.w	r9, r9, fp
 80063c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063cc:	f04f 0100 	mov.w	r1, #0
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063e0:	4689      	mov	r9, r1
 80063e2:	4692      	mov	sl, r2
 80063e4:	eb1b 0509 	adds.w	r5, fp, r9
 80063e8:	eb4c 060a 	adc.w	r6, ip, sl
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	f04f 0400 	mov.w	r4, #0
 80063fe:	0094      	lsls	r4, r2, #2
 8006400:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006404:	008b      	lsls	r3, r1, #2
 8006406:	461a      	mov	r2, r3
 8006408:	4623      	mov	r3, r4
 800640a:	4628      	mov	r0, r5
 800640c:	4631      	mov	r1, r6
 800640e:	f7fa fc5b 	bl	8000cc8 <__aeabi_uldivmod>
 8006412:	4603      	mov	r3, r0
 8006414:	460c      	mov	r4, r1
 8006416:	461a      	mov	r2, r3
 8006418:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <UART_SetConfig+0x6f4>)
 800641a:	fba3 1302 	umull	r1, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2164      	movs	r1, #100	; 0x64
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	3332      	adds	r3, #50	; 0x32
 800642c:	4a09      	ldr	r2, [pc, #36]	; (8006454 <UART_SetConfig+0x6f4>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4442      	add	r2, r8
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	e7ff      	b.n	8006442 <UART_SetConfig+0x6e2>
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	40011000 	.word	0x40011000
 8006450:	40011400 	.word	0x40011400
 8006454:	51eb851f 	.word	0x51eb851f

08006458 <atof>:
 8006458:	2100      	movs	r1, #0
 800645a:	f001 bb49 	b.w	8007af0 <strtod>
	...

08006460 <__errno>:
 8006460:	4b01      	ldr	r3, [pc, #4]	; (8006468 <__errno+0x8>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000144 	.word	0x20000144

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4e0d      	ldr	r6, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1ba4      	subs	r4, r4, r6
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2500      	movs	r5, #0
 8006478:	42a5      	cmp	r5, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4e0b      	ldr	r6, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f004 fa26 	bl	800a8d0 <_init>
 8006484:	1ba4      	subs	r4, r4, r6
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2500      	movs	r5, #0
 800648a:	42a5      	cmp	r5, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006494:	4798      	blx	r3
 8006496:	3501      	adds	r5, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800649e:	4798      	blx	r3
 80064a0:	3501      	adds	r5, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	0800af1c 	.word	0x0800af1c
 80064a8:	0800af1c 	.word	0x0800af1c
 80064ac:	0800af1c 	.word	0x0800af1c
 80064b0:	0800af20 	.word	0x0800af20

080064b4 <memcpy>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	1e43      	subs	r3, r0, #1
 80064b8:	440a      	add	r2, r1
 80064ba:	4291      	cmp	r1, r2
 80064bc:	d100      	bne.n	80064c0 <memcpy+0xc>
 80064be:	bd10      	pop	{r4, pc}
 80064c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064c8:	e7f7      	b.n	80064ba <memcpy+0x6>

080064ca <memset>:
 80064ca:	4402      	add	r2, r0
 80064cc:	4603      	mov	r3, r0
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d100      	bne.n	80064d4 <memset+0xa>
 80064d2:	4770      	bx	lr
 80064d4:	f803 1b01 	strb.w	r1, [r3], #1
 80064d8:	e7f9      	b.n	80064ce <memset+0x4>

080064da <__cvt>:
 80064da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064de:	ec55 4b10 	vmov	r4, r5, d0
 80064e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80064e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	460e      	mov	r6, r1
 80064ec:	4691      	mov	r9, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	bfb8      	it	lt
 80064f2:	4622      	movlt	r2, r4
 80064f4:	462b      	mov	r3, r5
 80064f6:	f027 0720 	bic.w	r7, r7, #32
 80064fa:	bfbb      	ittet	lt
 80064fc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006500:	461d      	movlt	r5, r3
 8006502:	2300      	movge	r3, #0
 8006504:	232d      	movlt	r3, #45	; 0x2d
 8006506:	bfb8      	it	lt
 8006508:	4614      	movlt	r4, r2
 800650a:	2f46      	cmp	r7, #70	; 0x46
 800650c:	700b      	strb	r3, [r1, #0]
 800650e:	d004      	beq.n	800651a <__cvt+0x40>
 8006510:	2f45      	cmp	r7, #69	; 0x45
 8006512:	d100      	bne.n	8006516 <__cvt+0x3c>
 8006514:	3601      	adds	r6, #1
 8006516:	2102      	movs	r1, #2
 8006518:	e000      	b.n	800651c <__cvt+0x42>
 800651a:	2103      	movs	r1, #3
 800651c:	ab03      	add	r3, sp, #12
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	ab02      	add	r3, sp, #8
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4632      	mov	r2, r6
 8006526:	4653      	mov	r3, sl
 8006528:	ec45 4b10 	vmov	d0, r4, r5
 800652c:	f001 fc40 	bl	8007db0 <_dtoa_r>
 8006530:	2f47      	cmp	r7, #71	; 0x47
 8006532:	4680      	mov	r8, r0
 8006534:	d102      	bne.n	800653c <__cvt+0x62>
 8006536:	f019 0f01 	tst.w	r9, #1
 800653a:	d026      	beq.n	800658a <__cvt+0xb0>
 800653c:	2f46      	cmp	r7, #70	; 0x46
 800653e:	eb08 0906 	add.w	r9, r8, r6
 8006542:	d111      	bne.n	8006568 <__cvt+0x8e>
 8006544:	f898 3000 	ldrb.w	r3, [r8]
 8006548:	2b30      	cmp	r3, #48	; 0x30
 800654a:	d10a      	bne.n	8006562 <__cvt+0x88>
 800654c:	2200      	movs	r2, #0
 800654e:	2300      	movs	r3, #0
 8006550:	4620      	mov	r0, r4
 8006552:	4629      	mov	r1, r5
 8006554:	f7fa fad8 	bl	8000b08 <__aeabi_dcmpeq>
 8006558:	b918      	cbnz	r0, 8006562 <__cvt+0x88>
 800655a:	f1c6 0601 	rsb	r6, r6, #1
 800655e:	f8ca 6000 	str.w	r6, [sl]
 8006562:	f8da 3000 	ldr.w	r3, [sl]
 8006566:	4499      	add	r9, r3
 8006568:	2200      	movs	r2, #0
 800656a:	2300      	movs	r3, #0
 800656c:	4620      	mov	r0, r4
 800656e:	4629      	mov	r1, r5
 8006570:	f7fa faca 	bl	8000b08 <__aeabi_dcmpeq>
 8006574:	b938      	cbnz	r0, 8006586 <__cvt+0xac>
 8006576:	2230      	movs	r2, #48	; 0x30
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	454b      	cmp	r3, r9
 800657c:	d205      	bcs.n	800658a <__cvt+0xb0>
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	9103      	str	r1, [sp, #12]
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e7f8      	b.n	8006578 <__cvt+0x9e>
 8006586:	f8cd 900c 	str.w	r9, [sp, #12]
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800658e:	eba3 0308 	sub.w	r3, r3, r8
 8006592:	4640      	mov	r0, r8
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	b004      	add	sp, #16
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800659c <__exponent>:
 800659c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800659e:	2900      	cmp	r1, #0
 80065a0:	4604      	mov	r4, r0
 80065a2:	bfba      	itte	lt
 80065a4:	4249      	neglt	r1, r1
 80065a6:	232d      	movlt	r3, #45	; 0x2d
 80065a8:	232b      	movge	r3, #43	; 0x2b
 80065aa:	2909      	cmp	r1, #9
 80065ac:	f804 2b02 	strb.w	r2, [r4], #2
 80065b0:	7043      	strb	r3, [r0, #1]
 80065b2:	dd20      	ble.n	80065f6 <__exponent+0x5a>
 80065b4:	f10d 0307 	add.w	r3, sp, #7
 80065b8:	461f      	mov	r7, r3
 80065ba:	260a      	movs	r6, #10
 80065bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80065c0:	fb06 1115 	mls	r1, r6, r5, r1
 80065c4:	3130      	adds	r1, #48	; 0x30
 80065c6:	2d09      	cmp	r5, #9
 80065c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065cc:	f103 32ff 	add.w	r2, r3, #4294967295
 80065d0:	4629      	mov	r1, r5
 80065d2:	dc09      	bgt.n	80065e8 <__exponent+0x4c>
 80065d4:	3130      	adds	r1, #48	; 0x30
 80065d6:	3b02      	subs	r3, #2
 80065d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065dc:	42bb      	cmp	r3, r7
 80065de:	4622      	mov	r2, r4
 80065e0:	d304      	bcc.n	80065ec <__exponent+0x50>
 80065e2:	1a10      	subs	r0, r2, r0
 80065e4:	b003      	add	sp, #12
 80065e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e8:	4613      	mov	r3, r2
 80065ea:	e7e7      	b.n	80065bc <__exponent+0x20>
 80065ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f0:	f804 2b01 	strb.w	r2, [r4], #1
 80065f4:	e7f2      	b.n	80065dc <__exponent+0x40>
 80065f6:	2330      	movs	r3, #48	; 0x30
 80065f8:	4419      	add	r1, r3
 80065fa:	7083      	strb	r3, [r0, #2]
 80065fc:	1d02      	adds	r2, r0, #4
 80065fe:	70c1      	strb	r1, [r0, #3]
 8006600:	e7ef      	b.n	80065e2 <__exponent+0x46>
	...

08006604 <_printf_float>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	b08d      	sub	sp, #52	; 0x34
 800660a:	460c      	mov	r4, r1
 800660c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006610:	4616      	mov	r6, r2
 8006612:	461f      	mov	r7, r3
 8006614:	4605      	mov	r5, r0
 8006616:	f002 fe25 	bl	8009264 <_localeconv_r>
 800661a:	6803      	ldr	r3, [r0, #0]
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	4618      	mov	r0, r3
 8006620:	f7f9 fdf6 	bl	8000210 <strlen>
 8006624:	2300      	movs	r3, #0
 8006626:	930a      	str	r3, [sp, #40]	; 0x28
 8006628:	f8d8 3000 	ldr.w	r3, [r8]
 800662c:	9005      	str	r0, [sp, #20]
 800662e:	3307      	adds	r3, #7
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	f103 0208 	add.w	r2, r3, #8
 8006638:	f894 a018 	ldrb.w	sl, [r4, #24]
 800663c:	f8d4 b000 	ldr.w	fp, [r4]
 8006640:	f8c8 2000 	str.w	r2, [r8]
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800664c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006650:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006654:	9307      	str	r3, [sp, #28]
 8006656:	f8cd 8018 	str.w	r8, [sp, #24]
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	4ba7      	ldr	r3, [pc, #668]	; (80068fc <_printf_float+0x2f8>)
 8006660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006664:	f7fa fa82 	bl	8000b6c <__aeabi_dcmpun>
 8006668:	bb70      	cbnz	r0, 80066c8 <_printf_float+0xc4>
 800666a:	f04f 32ff 	mov.w	r2, #4294967295
 800666e:	4ba3      	ldr	r3, [pc, #652]	; (80068fc <_printf_float+0x2f8>)
 8006670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006674:	f7fa fa5c 	bl	8000b30 <__aeabi_dcmple>
 8006678:	bb30      	cbnz	r0, 80066c8 <_printf_float+0xc4>
 800667a:	2200      	movs	r2, #0
 800667c:	2300      	movs	r3, #0
 800667e:	4640      	mov	r0, r8
 8006680:	4649      	mov	r1, r9
 8006682:	f7fa fa4b 	bl	8000b1c <__aeabi_dcmplt>
 8006686:	b110      	cbz	r0, 800668e <_printf_float+0x8a>
 8006688:	232d      	movs	r3, #45	; 0x2d
 800668a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800668e:	4a9c      	ldr	r2, [pc, #624]	; (8006900 <_printf_float+0x2fc>)
 8006690:	4b9c      	ldr	r3, [pc, #624]	; (8006904 <_printf_float+0x300>)
 8006692:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006696:	bf8c      	ite	hi
 8006698:	4690      	movhi	r8, r2
 800669a:	4698      	movls	r8, r3
 800669c:	2303      	movs	r3, #3
 800669e:	f02b 0204 	bic.w	r2, fp, #4
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	f04f 0900 	mov.w	r9, #0
 80066aa:	9700      	str	r7, [sp, #0]
 80066ac:	4633      	mov	r3, r6
 80066ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f9e6 	bl	8006a84 <_printf_common>
 80066b8:	3001      	adds	r0, #1
 80066ba:	f040 808d 	bne.w	80067d8 <_printf_float+0x1d4>
 80066be:	f04f 30ff 	mov.w	r0, #4294967295
 80066c2:	b00d      	add	sp, #52	; 0x34
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7fa fa4c 	bl	8000b6c <__aeabi_dcmpun>
 80066d4:	b110      	cbz	r0, 80066dc <_printf_float+0xd8>
 80066d6:	4a8c      	ldr	r2, [pc, #560]	; (8006908 <_printf_float+0x304>)
 80066d8:	4b8c      	ldr	r3, [pc, #560]	; (800690c <_printf_float+0x308>)
 80066da:	e7da      	b.n	8006692 <_printf_float+0x8e>
 80066dc:	6861      	ldr	r1, [r4, #4]
 80066de:	1c4b      	adds	r3, r1, #1
 80066e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80066e4:	a80a      	add	r0, sp, #40	; 0x28
 80066e6:	d13e      	bne.n	8006766 <_printf_float+0x162>
 80066e8:	2306      	movs	r3, #6
 80066ea:	6063      	str	r3, [r4, #4]
 80066ec:	2300      	movs	r3, #0
 80066ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80066f2:	ab09      	add	r3, sp, #36	; 0x24
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	ec49 8b10 	vmov	d0, r8, r9
 80066fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	f8cd a004 	str.w	sl, [sp, #4]
 8006704:	6861      	ldr	r1, [r4, #4]
 8006706:	4628      	mov	r0, r5
 8006708:	f7ff fee7 	bl	80064da <__cvt>
 800670c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006710:	2b47      	cmp	r3, #71	; 0x47
 8006712:	4680      	mov	r8, r0
 8006714:	d109      	bne.n	800672a <_printf_float+0x126>
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	1cd8      	adds	r0, r3, #3
 800671a:	db02      	blt.n	8006722 <_printf_float+0x11e>
 800671c:	6862      	ldr	r2, [r4, #4]
 800671e:	4293      	cmp	r3, r2
 8006720:	dd47      	ble.n	80067b2 <_printf_float+0x1ae>
 8006722:	f1aa 0a02 	sub.w	sl, sl, #2
 8006726:	fa5f fa8a 	uxtb.w	sl, sl
 800672a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800672e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006730:	d824      	bhi.n	800677c <_printf_float+0x178>
 8006732:	3901      	subs	r1, #1
 8006734:	4652      	mov	r2, sl
 8006736:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800673a:	9109      	str	r1, [sp, #36]	; 0x24
 800673c:	f7ff ff2e 	bl	800659c <__exponent>
 8006740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006742:	1813      	adds	r3, r2, r0
 8006744:	2a01      	cmp	r2, #1
 8006746:	4681      	mov	r9, r0
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	dc02      	bgt.n	8006752 <_printf_float+0x14e>
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	07d1      	lsls	r1, r2, #31
 8006750:	d501      	bpl.n	8006756 <_printf_float+0x152>
 8006752:	3301      	adds	r3, #1
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0a5      	beq.n	80066aa <_printf_float+0xa6>
 800675e:	232d      	movs	r3, #45	; 0x2d
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006764:	e7a1      	b.n	80066aa <_printf_float+0xa6>
 8006766:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800676a:	f000 8177 	beq.w	8006a5c <_printf_float+0x458>
 800676e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006772:	d1bb      	bne.n	80066ec <_printf_float+0xe8>
 8006774:	2900      	cmp	r1, #0
 8006776:	d1b9      	bne.n	80066ec <_printf_float+0xe8>
 8006778:	2301      	movs	r3, #1
 800677a:	e7b6      	b.n	80066ea <_printf_float+0xe6>
 800677c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006780:	d119      	bne.n	80067b6 <_printf_float+0x1b2>
 8006782:	2900      	cmp	r1, #0
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	dd0c      	ble.n	80067a2 <_printf_float+0x19e>
 8006788:	6121      	str	r1, [r4, #16]
 800678a:	b913      	cbnz	r3, 8006792 <_printf_float+0x18e>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	07d2      	lsls	r2, r2, #31
 8006790:	d502      	bpl.n	8006798 <_printf_float+0x194>
 8006792:	3301      	adds	r3, #1
 8006794:	440b      	add	r3, r1
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	65a3      	str	r3, [r4, #88]	; 0x58
 800679c:	f04f 0900 	mov.w	r9, #0
 80067a0:	e7d9      	b.n	8006756 <_printf_float+0x152>
 80067a2:	b913      	cbnz	r3, 80067aa <_printf_float+0x1a6>
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	07d0      	lsls	r0, r2, #31
 80067a8:	d501      	bpl.n	80067ae <_printf_float+0x1aa>
 80067aa:	3302      	adds	r3, #2
 80067ac:	e7f3      	b.n	8006796 <_printf_float+0x192>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7f1      	b.n	8006796 <_printf_float+0x192>
 80067b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80067b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067ba:	4293      	cmp	r3, r2
 80067bc:	db05      	blt.n	80067ca <_printf_float+0x1c6>
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	07d1      	lsls	r1, r2, #31
 80067c4:	d5e8      	bpl.n	8006798 <_printf_float+0x194>
 80067c6:	3301      	adds	r3, #1
 80067c8:	e7e5      	b.n	8006796 <_printf_float+0x192>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bfd4      	ite	le
 80067ce:	f1c3 0302 	rsble	r3, r3, #2
 80067d2:	2301      	movgt	r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	e7de      	b.n	8006796 <_printf_float+0x192>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	055a      	lsls	r2, r3, #21
 80067dc:	d407      	bmi.n	80067ee <_printf_float+0x1ea>
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	4642      	mov	r2, r8
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	d12b      	bne.n	8006844 <_printf_float+0x240>
 80067ec:	e767      	b.n	80066be <_printf_float+0xba>
 80067ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067f2:	f240 80dc 	bls.w	80069ae <_printf_float+0x3aa>
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fe:	f7fa f983 	bl	8000b08 <__aeabi_dcmpeq>
 8006802:	2800      	cmp	r0, #0
 8006804:	d033      	beq.n	800686e <_printf_float+0x26a>
 8006806:	2301      	movs	r3, #1
 8006808:	4a41      	ldr	r2, [pc, #260]	; (8006910 <_printf_float+0x30c>)
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f af54 	beq.w	80066be <_printf_float+0xba>
 8006816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800681a:	429a      	cmp	r2, r3
 800681c:	db02      	blt.n	8006824 <_printf_float+0x220>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	07d8      	lsls	r0, r3, #31
 8006822:	d50f      	bpl.n	8006844 <_printf_float+0x240>
 8006824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af45 	beq.w	80066be <_printf_float+0xba>
 8006834:	f04f 0800 	mov.w	r8, #0
 8006838:	f104 091a 	add.w	r9, r4, #26
 800683c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683e:	3b01      	subs	r3, #1
 8006840:	4543      	cmp	r3, r8
 8006842:	dc09      	bgt.n	8006858 <_printf_float+0x254>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	079b      	lsls	r3, r3, #30
 8006848:	f100 8103 	bmi.w	8006a52 <_printf_float+0x44e>
 800684c:	68e0      	ldr	r0, [r4, #12]
 800684e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006850:	4298      	cmp	r0, r3
 8006852:	bfb8      	it	lt
 8006854:	4618      	movlt	r0, r3
 8006856:	e734      	b.n	80066c2 <_printf_float+0xbe>
 8006858:	2301      	movs	r3, #1
 800685a:	464a      	mov	r2, r9
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af2b 	beq.w	80066be <_printf_float+0xba>
 8006868:	f108 0801 	add.w	r8, r8, #1
 800686c:	e7e6      	b.n	800683c <_printf_float+0x238>
 800686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	dc2b      	bgt.n	80068cc <_printf_float+0x2c8>
 8006874:	2301      	movs	r3, #1
 8006876:	4a26      	ldr	r2, [pc, #152]	; (8006910 <_printf_float+0x30c>)
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f af1d 	beq.w	80066be <_printf_float+0xba>
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	b923      	cbnz	r3, 8006892 <_printf_float+0x28e>
 8006888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688a:	b913      	cbnz	r3, 8006892 <_printf_float+0x28e>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	07d9      	lsls	r1, r3, #31
 8006890:	d5d8      	bpl.n	8006844 <_printf_float+0x240>
 8006892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f af0e 	beq.w	80066be <_printf_float+0xba>
 80068a2:	f04f 0900 	mov.w	r9, #0
 80068a6:	f104 0a1a 	add.w	sl, r4, #26
 80068aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ac:	425b      	negs	r3, r3
 80068ae:	454b      	cmp	r3, r9
 80068b0:	dc01      	bgt.n	80068b6 <_printf_float+0x2b2>
 80068b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b4:	e794      	b.n	80067e0 <_printf_float+0x1dc>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f aefc 	beq.w	80066be <_printf_float+0xba>
 80068c6:	f109 0901 	add.w	r9, r9, #1
 80068ca:	e7ee      	b.n	80068aa <_printf_float+0x2a6>
 80068cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068d0:	429a      	cmp	r2, r3
 80068d2:	bfa8      	it	ge
 80068d4:	461a      	movge	r2, r3
 80068d6:	2a00      	cmp	r2, #0
 80068d8:	4691      	mov	r9, r2
 80068da:	dd07      	ble.n	80068ec <_printf_float+0x2e8>
 80068dc:	4613      	mov	r3, r2
 80068de:	4631      	mov	r1, r6
 80068e0:	4642      	mov	r2, r8
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f aee9 	beq.w	80066be <_printf_float+0xba>
 80068ec:	f104 031a 	add.w	r3, r4, #26
 80068f0:	f04f 0b00 	mov.w	fp, #0
 80068f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068f8:	9306      	str	r3, [sp, #24]
 80068fa:	e015      	b.n	8006928 <_printf_float+0x324>
 80068fc:	7fefffff 	.word	0x7fefffff
 8006900:	0800ac00 	.word	0x0800ac00
 8006904:	0800abfc 	.word	0x0800abfc
 8006908:	0800ac08 	.word	0x0800ac08
 800690c:	0800ac04 	.word	0x0800ac04
 8006910:	0800ac0c 	.word	0x0800ac0c
 8006914:	2301      	movs	r3, #1
 8006916:	9a06      	ldr	r2, [sp, #24]
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f aecd 	beq.w	80066be <_printf_float+0xba>
 8006924:	f10b 0b01 	add.w	fp, fp, #1
 8006928:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800692c:	ebaa 0309 	sub.w	r3, sl, r9
 8006930:	455b      	cmp	r3, fp
 8006932:	dcef      	bgt.n	8006914 <_printf_float+0x310>
 8006934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006938:	429a      	cmp	r2, r3
 800693a:	44d0      	add	r8, sl
 800693c:	db15      	blt.n	800696a <_printf_float+0x366>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	07da      	lsls	r2, r3, #31
 8006942:	d412      	bmi.n	800696a <_printf_float+0x366>
 8006944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006946:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006948:	eba3 020a 	sub.w	r2, r3, sl
 800694c:	eba3 0a01 	sub.w	sl, r3, r1
 8006950:	4592      	cmp	sl, r2
 8006952:	bfa8      	it	ge
 8006954:	4692      	movge	sl, r2
 8006956:	f1ba 0f00 	cmp.w	sl, #0
 800695a:	dc0e      	bgt.n	800697a <_printf_float+0x376>
 800695c:	f04f 0800 	mov.w	r8, #0
 8006960:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006964:	f104 091a 	add.w	r9, r4, #26
 8006968:	e019      	b.n	800699e <_printf_float+0x39a>
 800696a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	d1e5      	bne.n	8006944 <_printf_float+0x340>
 8006978:	e6a1      	b.n	80066be <_printf_float+0xba>
 800697a:	4653      	mov	r3, sl
 800697c:	4642      	mov	r2, r8
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	d1e9      	bne.n	800695c <_printf_float+0x358>
 8006988:	e699      	b.n	80066be <_printf_float+0xba>
 800698a:	2301      	movs	r3, #1
 800698c:	464a      	mov	r2, r9
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f ae92 	beq.w	80066be <_printf_float+0xba>
 800699a:	f108 0801 	add.w	r8, r8, #1
 800699e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	eba3 030a 	sub.w	r3, r3, sl
 80069a8:	4543      	cmp	r3, r8
 80069aa:	dcee      	bgt.n	800698a <_printf_float+0x386>
 80069ac:	e74a      	b.n	8006844 <_printf_float+0x240>
 80069ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b0:	2a01      	cmp	r2, #1
 80069b2:	dc01      	bgt.n	80069b8 <_printf_float+0x3b4>
 80069b4:	07db      	lsls	r3, r3, #31
 80069b6:	d53a      	bpl.n	8006a2e <_printf_float+0x42a>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4642      	mov	r2, r8
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f ae7b 	beq.w	80066be <_printf_float+0xba>
 80069c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	f108 0801 	add.w	r8, r8, #1
 80069d8:	f43f ae71 	beq.w	80066be <_printf_float+0xba>
 80069dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069de:	2200      	movs	r2, #0
 80069e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80069e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069e8:	2300      	movs	r3, #0
 80069ea:	f7fa f88d 	bl	8000b08 <__aeabi_dcmpeq>
 80069ee:	b9c8      	cbnz	r0, 8006a24 <_printf_float+0x420>
 80069f0:	4653      	mov	r3, sl
 80069f2:	4642      	mov	r2, r8
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	d10e      	bne.n	8006a1c <_printf_float+0x418>
 80069fe:	e65e      	b.n	80066be <_printf_float+0xba>
 8006a00:	2301      	movs	r3, #1
 8006a02:	4652      	mov	r2, sl
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b8      	blx	r7
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	f43f ae57 	beq.w	80066be <_printf_float+0xba>
 8006a10:	f108 0801 	add.w	r8, r8, #1
 8006a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4543      	cmp	r3, r8
 8006a1a:	dcf1      	bgt.n	8006a00 <_printf_float+0x3fc>
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a22:	e6de      	b.n	80067e2 <_printf_float+0x1de>
 8006a24:	f04f 0800 	mov.w	r8, #0
 8006a28:	f104 0a1a 	add.w	sl, r4, #26
 8006a2c:	e7f2      	b.n	8006a14 <_printf_float+0x410>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e7df      	b.n	80069f2 <_printf_float+0x3ee>
 8006a32:	2301      	movs	r3, #1
 8006a34:	464a      	mov	r2, r9
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f ae3e 	beq.w	80066be <_printf_float+0xba>
 8006a42:	f108 0801 	add.w	r8, r8, #1
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	dcf0      	bgt.n	8006a32 <_printf_float+0x42e>
 8006a50:	e6fc      	b.n	800684c <_printf_float+0x248>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0919 	add.w	r9, r4, #25
 8006a5a:	e7f4      	b.n	8006a46 <_printf_float+0x442>
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	f43f ae8b 	beq.w	8006778 <_printf_float+0x174>
 8006a62:	2300      	movs	r3, #0
 8006a64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a68:	ab09      	add	r3, sp, #36	; 0x24
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	ec49 8b10 	vmov	d0, r8, r9
 8006a70:	6022      	str	r2, [r4, #0]
 8006a72:	f8cd a004 	str.w	sl, [sp, #4]
 8006a76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f7ff fd2d 	bl	80064da <__cvt>
 8006a80:	4680      	mov	r8, r0
 8006a82:	e648      	b.n	8006716 <_printf_float+0x112>

08006a84 <_printf_common>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	4691      	mov	r9, r2
 8006a8a:	461f      	mov	r7, r3
 8006a8c:	688a      	ldr	r2, [r1, #8]
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	bfb8      	it	lt
 8006a98:	4613      	movlt	r3, r2
 8006a9a:	f8c9 3000 	str.w	r3, [r9]
 8006a9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	b112      	cbz	r2, 8006aae <_printf_common+0x2a>
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f8c9 3000 	str.w	r3, [r9]
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	0699      	lsls	r1, r3, #26
 8006ab2:	bf42      	ittt	mi
 8006ab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ab8:	3302      	addmi	r3, #2
 8006aba:	f8c9 3000 	strmi.w	r3, [r9]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d107      	bne.n	8006ad6 <_printf_common+0x52>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	42ab      	cmp	r3, r5
 8006ad4:	dc28      	bgt.n	8006b28 <_printf_common+0xa4>
 8006ad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	3300      	adds	r3, #0
 8006ade:	bf18      	it	ne
 8006ae0:	2301      	movne	r3, #1
 8006ae2:	0692      	lsls	r2, r2, #26
 8006ae4:	d42d      	bmi.n	8006b42 <_printf_common+0xbe>
 8006ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aea:	4639      	mov	r1, r7
 8006aec:	4630      	mov	r0, r6
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d020      	beq.n	8006b36 <_printf_common+0xb2>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	68e5      	ldr	r5, [r4, #12]
 8006af8:	f8d9 2000 	ldr.w	r2, [r9]
 8006afc:	f003 0306 	and.w	r3, r3, #6
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	bf08      	it	eq
 8006b04:	1aad      	subeq	r5, r5, r2
 8006b06:	68a3      	ldr	r3, [r4, #8]
 8006b08:	6922      	ldr	r2, [r4, #16]
 8006b0a:	bf0c      	ite	eq
 8006b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b10:	2500      	movne	r5, #0
 8006b12:	4293      	cmp	r3, r2
 8006b14:	bfc4      	itt	gt
 8006b16:	1a9b      	subgt	r3, r3, r2
 8006b18:	18ed      	addgt	r5, r5, r3
 8006b1a:	f04f 0900 	mov.w	r9, #0
 8006b1e:	341a      	adds	r4, #26
 8006b20:	454d      	cmp	r5, r9
 8006b22:	d11a      	bne.n	8006b5a <_printf_common+0xd6>
 8006b24:	2000      	movs	r0, #0
 8006b26:	e008      	b.n	8006b3a <_printf_common+0xb6>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4652      	mov	r2, sl
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	4630      	mov	r0, r6
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d103      	bne.n	8006b3e <_printf_common+0xba>
 8006b36:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3e:	3501      	adds	r5, #1
 8006b40:	e7c3      	b.n	8006aca <_printf_common+0x46>
 8006b42:	18e1      	adds	r1, r4, r3
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	2030      	movs	r0, #48	; 0x30
 8006b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4c:	4422      	add	r2, r4
 8006b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b56:	3302      	adds	r3, #2
 8006b58:	e7c5      	b.n	8006ae6 <_printf_common+0x62>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4630      	mov	r0, r6
 8006b62:	47c0      	blx	r8
 8006b64:	3001      	adds	r0, #1
 8006b66:	d0e6      	beq.n	8006b36 <_printf_common+0xb2>
 8006b68:	f109 0901 	add.w	r9, r9, #1
 8006b6c:	e7d8      	b.n	8006b20 <_printf_common+0x9c>
	...

08006b70 <_printf_i>:
 8006b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b78:	460c      	mov	r4, r1
 8006b7a:	7e09      	ldrb	r1, [r1, #24]
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	296e      	cmp	r1, #110	; 0x6e
 8006b80:	4617      	mov	r7, r2
 8006b82:	4606      	mov	r6, r0
 8006b84:	4698      	mov	r8, r3
 8006b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b88:	f000 80b3 	beq.w	8006cf2 <_printf_i+0x182>
 8006b8c:	d822      	bhi.n	8006bd4 <_printf_i+0x64>
 8006b8e:	2963      	cmp	r1, #99	; 0x63
 8006b90:	d036      	beq.n	8006c00 <_printf_i+0x90>
 8006b92:	d80a      	bhi.n	8006baa <_printf_i+0x3a>
 8006b94:	2900      	cmp	r1, #0
 8006b96:	f000 80b9 	beq.w	8006d0c <_printf_i+0x19c>
 8006b9a:	2958      	cmp	r1, #88	; 0x58
 8006b9c:	f000 8083 	beq.w	8006ca6 <_printf_i+0x136>
 8006ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ba8:	e032      	b.n	8006c10 <_printf_i+0xa0>
 8006baa:	2964      	cmp	r1, #100	; 0x64
 8006bac:	d001      	beq.n	8006bb2 <_printf_i+0x42>
 8006bae:	2969      	cmp	r1, #105	; 0x69
 8006bb0:	d1f6      	bne.n	8006ba0 <_printf_i+0x30>
 8006bb2:	6820      	ldr	r0, [r4, #0]
 8006bb4:	6813      	ldr	r3, [r2, #0]
 8006bb6:	0605      	lsls	r5, r0, #24
 8006bb8:	f103 0104 	add.w	r1, r3, #4
 8006bbc:	d52a      	bpl.n	8006c14 <_printf_i+0xa4>
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da03      	bge.n	8006bce <_printf_i+0x5e>
 8006bc6:	222d      	movs	r2, #45	; 0x2d
 8006bc8:	425b      	negs	r3, r3
 8006bca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bce:	486f      	ldr	r0, [pc, #444]	; (8006d8c <_printf_i+0x21c>)
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	e039      	b.n	8006c48 <_printf_i+0xd8>
 8006bd4:	2973      	cmp	r1, #115	; 0x73
 8006bd6:	f000 809d 	beq.w	8006d14 <_printf_i+0x1a4>
 8006bda:	d808      	bhi.n	8006bee <_printf_i+0x7e>
 8006bdc:	296f      	cmp	r1, #111	; 0x6f
 8006bde:	d020      	beq.n	8006c22 <_printf_i+0xb2>
 8006be0:	2970      	cmp	r1, #112	; 0x70
 8006be2:	d1dd      	bne.n	8006ba0 <_printf_i+0x30>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	f043 0320 	orr.w	r3, r3, #32
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	e003      	b.n	8006bf6 <_printf_i+0x86>
 8006bee:	2975      	cmp	r1, #117	; 0x75
 8006bf0:	d017      	beq.n	8006c22 <_printf_i+0xb2>
 8006bf2:	2978      	cmp	r1, #120	; 0x78
 8006bf4:	d1d4      	bne.n	8006ba0 <_printf_i+0x30>
 8006bf6:	2378      	movs	r3, #120	; 0x78
 8006bf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bfc:	4864      	ldr	r0, [pc, #400]	; (8006d90 <_printf_i+0x220>)
 8006bfe:	e055      	b.n	8006cac <_printf_i+0x13c>
 8006c00:	6813      	ldr	r3, [r2, #0]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6011      	str	r1, [r2, #0]
 8006c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e08c      	b.n	8006d2e <_printf_i+0x1be>
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6011      	str	r1, [r2, #0]
 8006c18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c1c:	bf18      	it	ne
 8006c1e:	b21b      	sxthne	r3, r3
 8006c20:	e7cf      	b.n	8006bc2 <_printf_i+0x52>
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	6825      	ldr	r5, [r4, #0]
 8006c26:	1d18      	adds	r0, r3, #4
 8006c28:	6010      	str	r0, [r2, #0]
 8006c2a:	0628      	lsls	r0, r5, #24
 8006c2c:	d501      	bpl.n	8006c32 <_printf_i+0xc2>
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	e002      	b.n	8006c38 <_printf_i+0xc8>
 8006c32:	0668      	lsls	r0, r5, #25
 8006c34:	d5fb      	bpl.n	8006c2e <_printf_i+0xbe>
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	4854      	ldr	r0, [pc, #336]	; (8006d8c <_printf_i+0x21c>)
 8006c3a:	296f      	cmp	r1, #111	; 0x6f
 8006c3c:	bf14      	ite	ne
 8006c3e:	220a      	movne	r2, #10
 8006c40:	2208      	moveq	r2, #8
 8006c42:	2100      	movs	r1, #0
 8006c44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c48:	6865      	ldr	r5, [r4, #4]
 8006c4a:	60a5      	str	r5, [r4, #8]
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	f2c0 8095 	blt.w	8006d7c <_printf_i+0x20c>
 8006c52:	6821      	ldr	r1, [r4, #0]
 8006c54:	f021 0104 	bic.w	r1, r1, #4
 8006c58:	6021      	str	r1, [r4, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d13d      	bne.n	8006cda <_printf_i+0x16a>
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	f040 808e 	bne.w	8006d80 <_printf_i+0x210>
 8006c64:	4665      	mov	r5, ip
 8006c66:	2a08      	cmp	r2, #8
 8006c68:	d10b      	bne.n	8006c82 <_printf_i+0x112>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	07db      	lsls	r3, r3, #31
 8006c6e:	d508      	bpl.n	8006c82 <_printf_i+0x112>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	6862      	ldr	r2, [r4, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	bfde      	ittt	le
 8006c78:	2330      	movle	r3, #48	; 0x30
 8006c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c82:	ebac 0305 	sub.w	r3, ip, r5
 8006c86:	6123      	str	r3, [r4, #16]
 8006c88:	f8cd 8000 	str.w	r8, [sp]
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	aa03      	add	r2, sp, #12
 8006c90:	4621      	mov	r1, r4
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff fef6 	bl	8006a84 <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d14d      	bne.n	8006d38 <_printf_i+0x1c8>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	b005      	add	sp, #20
 8006ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	4839      	ldr	r0, [pc, #228]	; (8006d8c <_printf_i+0x21c>)
 8006ca8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006cac:	6813      	ldr	r3, [r2, #0]
 8006cae:	6821      	ldr	r1, [r4, #0]
 8006cb0:	1d1d      	adds	r5, r3, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6015      	str	r5, [r2, #0]
 8006cb6:	060a      	lsls	r2, r1, #24
 8006cb8:	d50b      	bpl.n	8006cd2 <_printf_i+0x162>
 8006cba:	07ca      	lsls	r2, r1, #31
 8006cbc:	bf44      	itt	mi
 8006cbe:	f041 0120 	orrmi.w	r1, r1, #32
 8006cc2:	6021      	strmi	r1, [r4, #0]
 8006cc4:	b91b      	cbnz	r3, 8006cce <_printf_i+0x15e>
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	f022 0220 	bic.w	r2, r2, #32
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	e7b7      	b.n	8006c42 <_printf_i+0xd2>
 8006cd2:	064d      	lsls	r5, r1, #25
 8006cd4:	bf48      	it	mi
 8006cd6:	b29b      	uxthmi	r3, r3
 8006cd8:	e7ef      	b.n	8006cba <_printf_i+0x14a>
 8006cda:	4665      	mov	r5, ip
 8006cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce0:	fb02 3311 	mls	r3, r2, r1, r3
 8006ce4:	5cc3      	ldrb	r3, [r0, r3]
 8006ce6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cea:	460b      	mov	r3, r1
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d1f5      	bne.n	8006cdc <_printf_i+0x16c>
 8006cf0:	e7b9      	b.n	8006c66 <_printf_i+0xf6>
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	6825      	ldr	r5, [r4, #0]
 8006cf6:	6961      	ldr	r1, [r4, #20]
 8006cf8:	1d18      	adds	r0, r3, #4
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	0628      	lsls	r0, r5, #24
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	d501      	bpl.n	8006d06 <_printf_i+0x196>
 8006d02:	6019      	str	r1, [r3, #0]
 8006d04:	e002      	b.n	8006d0c <_printf_i+0x19c>
 8006d06:	066a      	lsls	r2, r5, #25
 8006d08:	d5fb      	bpl.n	8006d02 <_printf_i+0x192>
 8006d0a:	8019      	strh	r1, [r3, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	4665      	mov	r5, ip
 8006d12:	e7b9      	b.n	8006c88 <_printf_i+0x118>
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	1d19      	adds	r1, r3, #4
 8006d18:	6011      	str	r1, [r2, #0]
 8006d1a:	681d      	ldr	r5, [r3, #0]
 8006d1c:	6862      	ldr	r2, [r4, #4]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4628      	mov	r0, r5
 8006d22:	f7f9 fa7d 	bl	8000220 <memchr>
 8006d26:	b108      	cbz	r0, 8006d2c <_printf_i+0x1bc>
 8006d28:	1b40      	subs	r0, r0, r5
 8006d2a:	6060      	str	r0, [r4, #4]
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	2300      	movs	r3, #0
 8006d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d36:	e7a7      	b.n	8006c88 <_printf_i+0x118>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	4630      	mov	r0, r6
 8006d40:	47c0      	blx	r8
 8006d42:	3001      	adds	r0, #1
 8006d44:	d0aa      	beq.n	8006c9c <_printf_i+0x12c>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	079b      	lsls	r3, r3, #30
 8006d4a:	d413      	bmi.n	8006d74 <_printf_i+0x204>
 8006d4c:	68e0      	ldr	r0, [r4, #12]
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	4298      	cmp	r0, r3
 8006d52:	bfb8      	it	lt
 8006d54:	4618      	movlt	r0, r3
 8006d56:	e7a3      	b.n	8006ca0 <_printf_i+0x130>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	464a      	mov	r2, r9
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4630      	mov	r0, r6
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d09a      	beq.n	8006c9c <_printf_i+0x12c>
 8006d66:	3501      	adds	r5, #1
 8006d68:	68e3      	ldr	r3, [r4, #12]
 8006d6a:	9a03      	ldr	r2, [sp, #12]
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	42ab      	cmp	r3, r5
 8006d70:	dcf2      	bgt.n	8006d58 <_printf_i+0x1e8>
 8006d72:	e7eb      	b.n	8006d4c <_printf_i+0x1dc>
 8006d74:	2500      	movs	r5, #0
 8006d76:	f104 0919 	add.w	r9, r4, #25
 8006d7a:	e7f5      	b.n	8006d68 <_printf_i+0x1f8>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1ac      	bne.n	8006cda <_printf_i+0x16a>
 8006d80:	7803      	ldrb	r3, [r0, #0]
 8006d82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d8a:	e76c      	b.n	8006c66 <_printf_i+0xf6>
 8006d8c:	0800ac0e 	.word	0x0800ac0e
 8006d90:	0800ac1f 	.word	0x0800ac1f

08006d94 <iprintf>:
 8006d94:	b40f      	push	{r0, r1, r2, r3}
 8006d96:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <iprintf+0x2c>)
 8006d98:	b513      	push	{r0, r1, r4, lr}
 8006d9a:	681c      	ldr	r4, [r3, #0]
 8006d9c:	b124      	cbz	r4, 8006da8 <iprintf+0x14>
 8006d9e:	69a3      	ldr	r3, [r4, #24]
 8006da0:	b913      	cbnz	r3, 8006da8 <iprintf+0x14>
 8006da2:	4620      	mov	r0, r4
 8006da4:	f001 feac 	bl	8008b00 <__sinit>
 8006da8:	ab05      	add	r3, sp, #20
 8006daa:	9a04      	ldr	r2, [sp, #16]
 8006dac:	68a1      	ldr	r1, [r4, #8]
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	4620      	mov	r0, r4
 8006db2:	f003 f915 	bl	8009fe0 <_vfiprintf_r>
 8006db6:	b002      	add	sp, #8
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	b004      	add	sp, #16
 8006dbe:	4770      	bx	lr
 8006dc0:	20000144 	.word	0x20000144

08006dc4 <_puts_r>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	460e      	mov	r6, r1
 8006dc8:	4605      	mov	r5, r0
 8006dca:	b118      	cbz	r0, 8006dd4 <_puts_r+0x10>
 8006dcc:	6983      	ldr	r3, [r0, #24]
 8006dce:	b90b      	cbnz	r3, 8006dd4 <_puts_r+0x10>
 8006dd0:	f001 fe96 	bl	8008b00 <__sinit>
 8006dd4:	69ab      	ldr	r3, [r5, #24]
 8006dd6:	68ac      	ldr	r4, [r5, #8]
 8006dd8:	b913      	cbnz	r3, 8006de0 <_puts_r+0x1c>
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f001 fe90 	bl	8008b00 <__sinit>
 8006de0:	4b23      	ldr	r3, [pc, #140]	; (8006e70 <_puts_r+0xac>)
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d117      	bne.n	8006e16 <_puts_r+0x52>
 8006de6:	686c      	ldr	r4, [r5, #4]
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	071b      	lsls	r3, r3, #28
 8006dec:	d51d      	bpl.n	8006e2a <_puts_r+0x66>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	b1db      	cbz	r3, 8006e2a <_puts_r+0x66>
 8006df2:	3e01      	subs	r6, #1
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	b9e9      	cbnz	r1, 8006e3c <_puts_r+0x78>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da2e      	bge.n	8006e62 <_puts_r+0x9e>
 8006e04:	4622      	mov	r2, r4
 8006e06:	210a      	movs	r1, #10
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 fe85 	bl	8007b18 <__swbuf_r>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d011      	beq.n	8006e36 <_puts_r+0x72>
 8006e12:	200a      	movs	r0, #10
 8006e14:	e011      	b.n	8006e3a <_puts_r+0x76>
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <_puts_r+0xb0>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d101      	bne.n	8006e20 <_puts_r+0x5c>
 8006e1c:	68ac      	ldr	r4, [r5, #8]
 8006e1e:	e7e3      	b.n	8006de8 <_puts_r+0x24>
 8006e20:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <_puts_r+0xb4>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	bf08      	it	eq
 8006e26:	68ec      	ldreq	r4, [r5, #12]
 8006e28:	e7de      	b.n	8006de8 <_puts_r+0x24>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 fec5 	bl	8007bbc <__swsetup_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d0dd      	beq.n	8006df2 <_puts_r+0x2e>
 8006e36:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da04      	bge.n	8006e4a <_puts_r+0x86>
 8006e40:	69a2      	ldr	r2, [r4, #24]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	dc06      	bgt.n	8006e54 <_puts_r+0x90>
 8006e46:	290a      	cmp	r1, #10
 8006e48:	d004      	beq.n	8006e54 <_puts_r+0x90>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	6022      	str	r2, [r4, #0]
 8006e50:	7019      	strb	r1, [r3, #0]
 8006e52:	e7cf      	b.n	8006df4 <_puts_r+0x30>
 8006e54:	4622      	mov	r2, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 fe5e 	bl	8007b18 <__swbuf_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d1c9      	bne.n	8006df4 <_puts_r+0x30>
 8006e60:	e7e9      	b.n	8006e36 <_puts_r+0x72>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	200a      	movs	r0, #10
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	6022      	str	r2, [r4, #0]
 8006e6a:	7018      	strb	r0, [r3, #0]
 8006e6c:	e7e5      	b.n	8006e3a <_puts_r+0x76>
 8006e6e:	bf00      	nop
 8006e70:	0800acb0 	.word	0x0800acb0
 8006e74:	0800acd0 	.word	0x0800acd0
 8006e78:	0800ac90 	.word	0x0800ac90

08006e7c <puts>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <puts+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f7ff bf9f 	b.w	8006dc4 <_puts_r>
 8006e86:	bf00      	nop
 8006e88:	20000144 	.word	0x20000144

08006e8c <siprintf>:
 8006e8c:	b40e      	push	{r1, r2, r3}
 8006e8e:	b500      	push	{lr}
 8006e90:	b09c      	sub	sp, #112	; 0x70
 8006e92:	ab1d      	add	r3, sp, #116	; 0x74
 8006e94:	9002      	str	r0, [sp, #8]
 8006e96:	9006      	str	r0, [sp, #24]
 8006e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e9c:	4809      	ldr	r0, [pc, #36]	; (8006ec4 <siprintf+0x38>)
 8006e9e:	9107      	str	r1, [sp, #28]
 8006ea0:	9104      	str	r1, [sp, #16]
 8006ea2:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <siprintf+0x3c>)
 8006ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	a902      	add	r1, sp, #8
 8006eb0:	f002 ff74 	bl	8009d9c <_svfiprintf_r>
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	b01c      	add	sp, #112	; 0x70
 8006ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec0:	b003      	add	sp, #12
 8006ec2:	4770      	bx	lr
 8006ec4:	20000144 	.word	0x20000144
 8006ec8:	ffff0208 	.word	0xffff0208

08006ecc <sulp>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4604      	mov	r4, r0
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	ec45 4b10 	vmov	d0, r4, r5
 8006ed6:	4616      	mov	r6, r2
 8006ed8:	f002 fd1c 	bl	8009914 <__ulp>
 8006edc:	ec51 0b10 	vmov	r0, r1, d0
 8006ee0:	b17e      	cbz	r6, 8006f02 <sulp+0x36>
 8006ee2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ee6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dd09      	ble.n	8006f02 <sulp+0x36>
 8006eee:	051b      	lsls	r3, r3, #20
 8006ef0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ef4:	2400      	movs	r4, #0
 8006ef6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006efa:	4622      	mov	r2, r4
 8006efc:	462b      	mov	r3, r5
 8006efe:	f7f9 fb9b 	bl	8000638 <__aeabi_dmul>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	0000      	movs	r0, r0
	...

08006f08 <_strtod_l>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	461f      	mov	r7, r3
 8006f0e:	b0a1      	sub	sp, #132	; 0x84
 8006f10:	2300      	movs	r3, #0
 8006f12:	4681      	mov	r9, r0
 8006f14:	4638      	mov	r0, r7
 8006f16:	460e      	mov	r6, r1
 8006f18:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f1a:	931c      	str	r3, [sp, #112]	; 0x70
 8006f1c:	f002 f9a0 	bl	8009260 <__localeconv_l>
 8006f20:	4680      	mov	r8, r0
 8006f22:	6800      	ldr	r0, [r0, #0]
 8006f24:	f7f9 f974 	bl	8000210 <strlen>
 8006f28:	f04f 0a00 	mov.w	sl, #0
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	f04f 0b00 	mov.w	fp, #0
 8006f32:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	2a0d      	cmp	r2, #13
 8006f3a:	d832      	bhi.n	8006fa2 <_strtod_l+0x9a>
 8006f3c:	2a09      	cmp	r2, #9
 8006f3e:	d236      	bcs.n	8006fae <_strtod_l+0xa6>
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d03e      	beq.n	8006fc2 <_strtod_l+0xba>
 8006f44:	2300      	movs	r3, #0
 8006f46:	930d      	str	r3, [sp, #52]	; 0x34
 8006f48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f4a:	782b      	ldrb	r3, [r5, #0]
 8006f4c:	2b30      	cmp	r3, #48	; 0x30
 8006f4e:	f040 80ac 	bne.w	80070aa <_strtod_l+0x1a2>
 8006f52:	786b      	ldrb	r3, [r5, #1]
 8006f54:	2b58      	cmp	r3, #88	; 0x58
 8006f56:	d001      	beq.n	8006f5c <_strtod_l+0x54>
 8006f58:	2b78      	cmp	r3, #120	; 0x78
 8006f5a:	d167      	bne.n	800702c <_strtod_l+0x124>
 8006f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	ab1c      	add	r3, sp, #112	; 0x70
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	9702      	str	r7, [sp, #8]
 8006f66:	ab1d      	add	r3, sp, #116	; 0x74
 8006f68:	4a88      	ldr	r2, [pc, #544]	; (800718c <_strtod_l+0x284>)
 8006f6a:	a91b      	add	r1, sp, #108	; 0x6c
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f001 fea0 	bl	8008cb2 <__gethex>
 8006f72:	f010 0407 	ands.w	r4, r0, #7
 8006f76:	4606      	mov	r6, r0
 8006f78:	d005      	beq.n	8006f86 <_strtod_l+0x7e>
 8006f7a:	2c06      	cmp	r4, #6
 8006f7c:	d12b      	bne.n	8006fd6 <_strtod_l+0xce>
 8006f7e:	3501      	adds	r5, #1
 8006f80:	2300      	movs	r3, #0
 8006f82:	951b      	str	r5, [sp, #108]	; 0x6c
 8006f84:	930d      	str	r3, [sp, #52]	; 0x34
 8006f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 859a 	bne.w	8007ac2 <_strtod_l+0xbba>
 8006f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f90:	b1e3      	cbz	r3, 8006fcc <_strtod_l+0xc4>
 8006f92:	4652      	mov	r2, sl
 8006f94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f98:	ec43 2b10 	vmov	d0, r2, r3
 8006f9c:	b021      	add	sp, #132	; 0x84
 8006f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa2:	2a2b      	cmp	r2, #43	; 0x2b
 8006fa4:	d015      	beq.n	8006fd2 <_strtod_l+0xca>
 8006fa6:	2a2d      	cmp	r2, #45	; 0x2d
 8006fa8:	d004      	beq.n	8006fb4 <_strtod_l+0xac>
 8006faa:	2a20      	cmp	r2, #32
 8006fac:	d1ca      	bne.n	8006f44 <_strtod_l+0x3c>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006fb2:	e7bf      	b.n	8006f34 <_strtod_l+0x2c>
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	920d      	str	r2, [sp, #52]	; 0x34
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	921b      	str	r2, [sp, #108]	; 0x6c
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1c2      	bne.n	8006f48 <_strtod_l+0x40>
 8006fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 8579 	bne.w	8007abe <_strtod_l+0xbb6>
 8006fcc:	4652      	mov	r2, sl
 8006fce:	465b      	mov	r3, fp
 8006fd0:	e7e2      	b.n	8006f98 <_strtod_l+0x90>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	e7ef      	b.n	8006fb6 <_strtod_l+0xae>
 8006fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006fd8:	b13a      	cbz	r2, 8006fea <_strtod_l+0xe2>
 8006fda:	2135      	movs	r1, #53	; 0x35
 8006fdc:	a81e      	add	r0, sp, #120	; 0x78
 8006fde:	f002 fd91 	bl	8009b04 <__copybits>
 8006fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fe4:	4648      	mov	r0, r9
 8006fe6:	f002 f9fd 	bl	80093e4 <_Bfree>
 8006fea:	3c01      	subs	r4, #1
 8006fec:	2c04      	cmp	r4, #4
 8006fee:	d806      	bhi.n	8006ffe <_strtod_l+0xf6>
 8006ff0:	e8df f004 	tbb	[pc, r4]
 8006ff4:	1714030a 	.word	0x1714030a
 8006ff8:	0a          	.byte	0x0a
 8006ff9:	00          	.byte	0x00
 8006ffa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006ffe:	0730      	lsls	r0, r6, #28
 8007000:	d5c1      	bpl.n	8006f86 <_strtod_l+0x7e>
 8007002:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007006:	e7be      	b.n	8006f86 <_strtod_l+0x7e>
 8007008:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800700c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800700e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007012:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007016:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800701a:	e7f0      	b.n	8006ffe <_strtod_l+0xf6>
 800701c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007190 <_strtod_l+0x288>
 8007020:	e7ed      	b.n	8006ffe <_strtod_l+0xf6>
 8007022:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007026:	f04f 3aff 	mov.w	sl, #4294967295
 800702a:	e7e8      	b.n	8006ffe <_strtod_l+0xf6>
 800702c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	921b      	str	r2, [sp, #108]	; 0x6c
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	2b30      	cmp	r3, #48	; 0x30
 8007036:	d0f9      	beq.n	800702c <_strtod_l+0x124>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0a4      	beq.n	8006f86 <_strtod_l+0x7e>
 800703c:	2301      	movs	r3, #1
 800703e:	2500      	movs	r5, #0
 8007040:	9306      	str	r3, [sp, #24]
 8007042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007044:	9308      	str	r3, [sp, #32]
 8007046:	9507      	str	r5, [sp, #28]
 8007048:	9505      	str	r5, [sp, #20]
 800704a:	220a      	movs	r2, #10
 800704c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800704e:	7807      	ldrb	r7, [r0, #0]
 8007050:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007054:	b2d9      	uxtb	r1, r3
 8007056:	2909      	cmp	r1, #9
 8007058:	d929      	bls.n	80070ae <_strtod_l+0x1a6>
 800705a:	4622      	mov	r2, r4
 800705c:	f8d8 1000 	ldr.w	r1, [r8]
 8007060:	f003 f927 	bl	800a2b2 <strncmp>
 8007064:	2800      	cmp	r0, #0
 8007066:	d031      	beq.n	80070cc <_strtod_l+0x1c4>
 8007068:	2000      	movs	r0, #0
 800706a:	9c05      	ldr	r4, [sp, #20]
 800706c:	9004      	str	r0, [sp, #16]
 800706e:	463b      	mov	r3, r7
 8007070:	4602      	mov	r2, r0
 8007072:	2b65      	cmp	r3, #101	; 0x65
 8007074:	d001      	beq.n	800707a <_strtod_l+0x172>
 8007076:	2b45      	cmp	r3, #69	; 0x45
 8007078:	d114      	bne.n	80070a4 <_strtod_l+0x19c>
 800707a:	b924      	cbnz	r4, 8007086 <_strtod_l+0x17e>
 800707c:	b910      	cbnz	r0, 8007084 <_strtod_l+0x17c>
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d09e      	beq.n	8006fc2 <_strtod_l+0xba>
 8007084:	2400      	movs	r4, #0
 8007086:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007088:	1c73      	adds	r3, r6, #1
 800708a:	931b      	str	r3, [sp, #108]	; 0x6c
 800708c:	7873      	ldrb	r3, [r6, #1]
 800708e:	2b2b      	cmp	r3, #43	; 0x2b
 8007090:	d078      	beq.n	8007184 <_strtod_l+0x27c>
 8007092:	2b2d      	cmp	r3, #45	; 0x2d
 8007094:	d070      	beq.n	8007178 <_strtod_l+0x270>
 8007096:	f04f 0c00 	mov.w	ip, #0
 800709a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800709e:	2f09      	cmp	r7, #9
 80070a0:	d97c      	bls.n	800719c <_strtod_l+0x294>
 80070a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80070a4:	f04f 0e00 	mov.w	lr, #0
 80070a8:	e09a      	b.n	80071e0 <_strtod_l+0x2d8>
 80070aa:	2300      	movs	r3, #0
 80070ac:	e7c7      	b.n	800703e <_strtod_l+0x136>
 80070ae:	9905      	ldr	r1, [sp, #20]
 80070b0:	2908      	cmp	r1, #8
 80070b2:	bfdd      	ittte	le
 80070b4:	9907      	ldrle	r1, [sp, #28]
 80070b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80070ba:	9307      	strle	r3, [sp, #28]
 80070bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80070c0:	9b05      	ldr	r3, [sp, #20]
 80070c2:	3001      	adds	r0, #1
 80070c4:	3301      	adds	r3, #1
 80070c6:	9305      	str	r3, [sp, #20]
 80070c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80070ca:	e7bf      	b.n	800704c <_strtod_l+0x144>
 80070cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070ce:	191a      	adds	r2, r3, r4
 80070d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80070d2:	9a05      	ldr	r2, [sp, #20]
 80070d4:	5d1b      	ldrb	r3, [r3, r4]
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	d037      	beq.n	800714a <_strtod_l+0x242>
 80070da:	9c05      	ldr	r4, [sp, #20]
 80070dc:	4602      	mov	r2, r0
 80070de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80070e2:	2909      	cmp	r1, #9
 80070e4:	d913      	bls.n	800710e <_strtod_l+0x206>
 80070e6:	2101      	movs	r1, #1
 80070e8:	9104      	str	r1, [sp, #16]
 80070ea:	e7c2      	b.n	8007072 <_strtod_l+0x16a>
 80070ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	3001      	adds	r0, #1
 80070f6:	2b30      	cmp	r3, #48	; 0x30
 80070f8:	d0f8      	beq.n	80070ec <_strtod_l+0x1e4>
 80070fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80070fe:	2a08      	cmp	r2, #8
 8007100:	f200 84e4 	bhi.w	8007acc <_strtod_l+0xbc4>
 8007104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007106:	9208      	str	r2, [sp, #32]
 8007108:	4602      	mov	r2, r0
 800710a:	2000      	movs	r0, #0
 800710c:	4604      	mov	r4, r0
 800710e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007112:	f100 0101 	add.w	r1, r0, #1
 8007116:	d012      	beq.n	800713e <_strtod_l+0x236>
 8007118:	440a      	add	r2, r1
 800711a:	eb00 0c04 	add.w	ip, r0, r4
 800711e:	4621      	mov	r1, r4
 8007120:	270a      	movs	r7, #10
 8007122:	458c      	cmp	ip, r1
 8007124:	d113      	bne.n	800714e <_strtod_l+0x246>
 8007126:	1821      	adds	r1, r4, r0
 8007128:	2908      	cmp	r1, #8
 800712a:	f104 0401 	add.w	r4, r4, #1
 800712e:	4404      	add	r4, r0
 8007130:	dc19      	bgt.n	8007166 <_strtod_l+0x25e>
 8007132:	9b07      	ldr	r3, [sp, #28]
 8007134:	210a      	movs	r1, #10
 8007136:	fb01 e303 	mla	r3, r1, r3, lr
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	2100      	movs	r1, #0
 800713e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007140:	1c58      	adds	r0, r3, #1
 8007142:	901b      	str	r0, [sp, #108]	; 0x6c
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	4608      	mov	r0, r1
 8007148:	e7c9      	b.n	80070de <_strtod_l+0x1d6>
 800714a:	9805      	ldr	r0, [sp, #20]
 800714c:	e7d3      	b.n	80070f6 <_strtod_l+0x1ee>
 800714e:	2908      	cmp	r1, #8
 8007150:	f101 0101 	add.w	r1, r1, #1
 8007154:	dc03      	bgt.n	800715e <_strtod_l+0x256>
 8007156:	9b07      	ldr	r3, [sp, #28]
 8007158:	437b      	muls	r3, r7
 800715a:	9307      	str	r3, [sp, #28]
 800715c:	e7e1      	b.n	8007122 <_strtod_l+0x21a>
 800715e:	2910      	cmp	r1, #16
 8007160:	bfd8      	it	le
 8007162:	437d      	mulle	r5, r7
 8007164:	e7dd      	b.n	8007122 <_strtod_l+0x21a>
 8007166:	2c10      	cmp	r4, #16
 8007168:	bfdc      	itt	le
 800716a:	210a      	movle	r1, #10
 800716c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007170:	e7e4      	b.n	800713c <_strtod_l+0x234>
 8007172:	2301      	movs	r3, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	e781      	b.n	800707c <_strtod_l+0x174>
 8007178:	f04f 0c01 	mov.w	ip, #1
 800717c:	1cb3      	adds	r3, r6, #2
 800717e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007180:	78b3      	ldrb	r3, [r6, #2]
 8007182:	e78a      	b.n	800709a <_strtod_l+0x192>
 8007184:	f04f 0c00 	mov.w	ip, #0
 8007188:	e7f8      	b.n	800717c <_strtod_l+0x274>
 800718a:	bf00      	nop
 800718c:	0800ac30 	.word	0x0800ac30
 8007190:	7ff00000 	.word	0x7ff00000
 8007194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007196:	1c5f      	adds	r7, r3, #1
 8007198:	971b      	str	r7, [sp, #108]	; 0x6c
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	d0f9      	beq.n	8007194 <_strtod_l+0x28c>
 80071a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80071a4:	2f08      	cmp	r7, #8
 80071a6:	f63f af7d 	bhi.w	80070a4 <_strtod_l+0x19c>
 80071aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80071ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b0:	930a      	str	r3, [sp, #40]	; 0x28
 80071b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b4:	1c5f      	adds	r7, r3, #1
 80071b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80071be:	f1b8 0f09 	cmp.w	r8, #9
 80071c2:	d937      	bls.n	8007234 <_strtod_l+0x32c>
 80071c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071c6:	1a7f      	subs	r7, r7, r1
 80071c8:	2f08      	cmp	r7, #8
 80071ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80071ce:	dc37      	bgt.n	8007240 <_strtod_l+0x338>
 80071d0:	45be      	cmp	lr, r7
 80071d2:	bfa8      	it	ge
 80071d4:	46be      	movge	lr, r7
 80071d6:	f1bc 0f00 	cmp.w	ip, #0
 80071da:	d001      	beq.n	80071e0 <_strtod_l+0x2d8>
 80071dc:	f1ce 0e00 	rsb	lr, lr, #0
 80071e0:	2c00      	cmp	r4, #0
 80071e2:	d151      	bne.n	8007288 <_strtod_l+0x380>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f47f aece 	bne.w	8006f86 <_strtod_l+0x7e>
 80071ea:	9a06      	ldr	r2, [sp, #24]
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	f47f aeca 	bne.w	8006f86 <_strtod_l+0x7e>
 80071f2:	9a04      	ldr	r2, [sp, #16]
 80071f4:	2a00      	cmp	r2, #0
 80071f6:	f47f aee4 	bne.w	8006fc2 <_strtod_l+0xba>
 80071fa:	2b4e      	cmp	r3, #78	; 0x4e
 80071fc:	d027      	beq.n	800724e <_strtod_l+0x346>
 80071fe:	dc21      	bgt.n	8007244 <_strtod_l+0x33c>
 8007200:	2b49      	cmp	r3, #73	; 0x49
 8007202:	f47f aede 	bne.w	8006fc2 <_strtod_l+0xba>
 8007206:	49a0      	ldr	r1, [pc, #640]	; (8007488 <_strtod_l+0x580>)
 8007208:	a81b      	add	r0, sp, #108	; 0x6c
 800720a:	f001 ff85 	bl	8009118 <__match>
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aed7 	beq.w	8006fc2 <_strtod_l+0xba>
 8007214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007216:	499d      	ldr	r1, [pc, #628]	; (800748c <_strtod_l+0x584>)
 8007218:	3b01      	subs	r3, #1
 800721a:	a81b      	add	r0, sp, #108	; 0x6c
 800721c:	931b      	str	r3, [sp, #108]	; 0x6c
 800721e:	f001 ff7b 	bl	8009118 <__match>
 8007222:	b910      	cbnz	r0, 800722a <_strtod_l+0x322>
 8007224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007226:	3301      	adds	r3, #1
 8007228:	931b      	str	r3, [sp, #108]	; 0x6c
 800722a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80074a0 <_strtod_l+0x598>
 800722e:	f04f 0a00 	mov.w	sl, #0
 8007232:	e6a8      	b.n	8006f86 <_strtod_l+0x7e>
 8007234:	210a      	movs	r1, #10
 8007236:	fb01 3e0e 	mla	lr, r1, lr, r3
 800723a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800723e:	e7b8      	b.n	80071b2 <_strtod_l+0x2aa>
 8007240:	46be      	mov	lr, r7
 8007242:	e7c8      	b.n	80071d6 <_strtod_l+0x2ce>
 8007244:	2b69      	cmp	r3, #105	; 0x69
 8007246:	d0de      	beq.n	8007206 <_strtod_l+0x2fe>
 8007248:	2b6e      	cmp	r3, #110	; 0x6e
 800724a:	f47f aeba 	bne.w	8006fc2 <_strtod_l+0xba>
 800724e:	4990      	ldr	r1, [pc, #576]	; (8007490 <_strtod_l+0x588>)
 8007250:	a81b      	add	r0, sp, #108	; 0x6c
 8007252:	f001 ff61 	bl	8009118 <__match>
 8007256:	2800      	cmp	r0, #0
 8007258:	f43f aeb3 	beq.w	8006fc2 <_strtod_l+0xba>
 800725c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b28      	cmp	r3, #40	; 0x28
 8007262:	d10e      	bne.n	8007282 <_strtod_l+0x37a>
 8007264:	aa1e      	add	r2, sp, #120	; 0x78
 8007266:	498b      	ldr	r1, [pc, #556]	; (8007494 <_strtod_l+0x58c>)
 8007268:	a81b      	add	r0, sp, #108	; 0x6c
 800726a:	f001 ff69 	bl	8009140 <__hexnan>
 800726e:	2805      	cmp	r0, #5
 8007270:	d107      	bne.n	8007282 <_strtod_l+0x37a>
 8007272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007274:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007278:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800727c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007280:	e681      	b.n	8006f86 <_strtod_l+0x7e>
 8007282:	f8df b224 	ldr.w	fp, [pc, #548]	; 80074a8 <_strtod_l+0x5a0>
 8007286:	e7d2      	b.n	800722e <_strtod_l+0x326>
 8007288:	ebae 0302 	sub.w	r3, lr, r2
 800728c:	9306      	str	r3, [sp, #24]
 800728e:	9b05      	ldr	r3, [sp, #20]
 8007290:	9807      	ldr	r0, [sp, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	bf08      	it	eq
 8007296:	4623      	moveq	r3, r4
 8007298:	2c10      	cmp	r4, #16
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	46a0      	mov	r8, r4
 800729e:	bfa8      	it	ge
 80072a0:	f04f 0810 	movge.w	r8, #16
 80072a4:	f7f9 f94e 	bl	8000544 <__aeabi_ui2d>
 80072a8:	2c09      	cmp	r4, #9
 80072aa:	4682      	mov	sl, r0
 80072ac:	468b      	mov	fp, r1
 80072ae:	dc13      	bgt.n	80072d8 <_strtod_l+0x3d0>
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f43f ae67 	beq.w	8006f86 <_strtod_l+0x7e>
 80072b8:	9b06      	ldr	r3, [sp, #24]
 80072ba:	dd7a      	ble.n	80073b2 <_strtod_l+0x4aa>
 80072bc:	2b16      	cmp	r3, #22
 80072be:	dc61      	bgt.n	8007384 <_strtod_l+0x47c>
 80072c0:	4a75      	ldr	r2, [pc, #468]	; (8007498 <_strtod_l+0x590>)
 80072c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80072c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	f7f9 f9b3 	bl	8000638 <__aeabi_dmul>
 80072d2:	4682      	mov	sl, r0
 80072d4:	468b      	mov	fp, r1
 80072d6:	e656      	b.n	8006f86 <_strtod_l+0x7e>
 80072d8:	4b6f      	ldr	r3, [pc, #444]	; (8007498 <_strtod_l+0x590>)
 80072da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80072de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072e2:	f7f9 f9a9 	bl	8000638 <__aeabi_dmul>
 80072e6:	4606      	mov	r6, r0
 80072e8:	4628      	mov	r0, r5
 80072ea:	460f      	mov	r7, r1
 80072ec:	f7f9 f92a 	bl	8000544 <__aeabi_ui2d>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f8 ffe8 	bl	80002cc <__adddf3>
 80072fc:	2c0f      	cmp	r4, #15
 80072fe:	4682      	mov	sl, r0
 8007300:	468b      	mov	fp, r1
 8007302:	ddd5      	ble.n	80072b0 <_strtod_l+0x3a8>
 8007304:	9b06      	ldr	r3, [sp, #24]
 8007306:	eba4 0808 	sub.w	r8, r4, r8
 800730a:	4498      	add	r8, r3
 800730c:	f1b8 0f00 	cmp.w	r8, #0
 8007310:	f340 8096 	ble.w	8007440 <_strtod_l+0x538>
 8007314:	f018 030f 	ands.w	r3, r8, #15
 8007318:	d00a      	beq.n	8007330 <_strtod_l+0x428>
 800731a:	495f      	ldr	r1, [pc, #380]	; (8007498 <_strtod_l+0x590>)
 800731c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007320:	4652      	mov	r2, sl
 8007322:	465b      	mov	r3, fp
 8007324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007328:	f7f9 f986 	bl	8000638 <__aeabi_dmul>
 800732c:	4682      	mov	sl, r0
 800732e:	468b      	mov	fp, r1
 8007330:	f038 080f 	bics.w	r8, r8, #15
 8007334:	d073      	beq.n	800741e <_strtod_l+0x516>
 8007336:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800733a:	dd47      	ble.n	80073cc <_strtod_l+0x4c4>
 800733c:	2400      	movs	r4, #0
 800733e:	46a0      	mov	r8, r4
 8007340:	9407      	str	r4, [sp, #28]
 8007342:	9405      	str	r4, [sp, #20]
 8007344:	2322      	movs	r3, #34	; 0x22
 8007346:	f8df b158 	ldr.w	fp, [pc, #344]	; 80074a0 <_strtod_l+0x598>
 800734a:	f8c9 3000 	str.w	r3, [r9]
 800734e:	f04f 0a00 	mov.w	sl, #0
 8007352:	9b07      	ldr	r3, [sp, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f43f ae16 	beq.w	8006f86 <_strtod_l+0x7e>
 800735a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800735c:	4648      	mov	r0, r9
 800735e:	f002 f841 	bl	80093e4 <_Bfree>
 8007362:	9905      	ldr	r1, [sp, #20]
 8007364:	4648      	mov	r0, r9
 8007366:	f002 f83d 	bl	80093e4 <_Bfree>
 800736a:	4641      	mov	r1, r8
 800736c:	4648      	mov	r0, r9
 800736e:	f002 f839 	bl	80093e4 <_Bfree>
 8007372:	9907      	ldr	r1, [sp, #28]
 8007374:	4648      	mov	r0, r9
 8007376:	f002 f835 	bl	80093e4 <_Bfree>
 800737a:	4621      	mov	r1, r4
 800737c:	4648      	mov	r0, r9
 800737e:	f002 f831 	bl	80093e4 <_Bfree>
 8007382:	e600      	b.n	8006f86 <_strtod_l+0x7e>
 8007384:	9a06      	ldr	r2, [sp, #24]
 8007386:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800738a:	4293      	cmp	r3, r2
 800738c:	dbba      	blt.n	8007304 <_strtod_l+0x3fc>
 800738e:	4d42      	ldr	r5, [pc, #264]	; (8007498 <_strtod_l+0x590>)
 8007390:	f1c4 040f 	rsb	r4, r4, #15
 8007394:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007398:	4652      	mov	r2, sl
 800739a:	465b      	mov	r3, fp
 800739c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a0:	f7f9 f94a 	bl	8000638 <__aeabi_dmul>
 80073a4:	9b06      	ldr	r3, [sp, #24]
 80073a6:	1b1c      	subs	r4, r3, r4
 80073a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80073ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073b0:	e78d      	b.n	80072ce <_strtod_l+0x3c6>
 80073b2:	f113 0f16 	cmn.w	r3, #22
 80073b6:	dba5      	blt.n	8007304 <_strtod_l+0x3fc>
 80073b8:	4a37      	ldr	r2, [pc, #220]	; (8007498 <_strtod_l+0x590>)
 80073ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80073be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80073c2:	4650      	mov	r0, sl
 80073c4:	4659      	mov	r1, fp
 80073c6:	f7f9 fa61 	bl	800088c <__aeabi_ddiv>
 80073ca:	e782      	b.n	80072d2 <_strtod_l+0x3ca>
 80073cc:	2300      	movs	r3, #0
 80073ce:	4e33      	ldr	r6, [pc, #204]	; (800749c <_strtod_l+0x594>)
 80073d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80073d4:	4650      	mov	r0, sl
 80073d6:	4659      	mov	r1, fp
 80073d8:	461d      	mov	r5, r3
 80073da:	f1b8 0f01 	cmp.w	r8, #1
 80073de:	dc21      	bgt.n	8007424 <_strtod_l+0x51c>
 80073e0:	b10b      	cbz	r3, 80073e6 <_strtod_l+0x4de>
 80073e2:	4682      	mov	sl, r0
 80073e4:	468b      	mov	fp, r1
 80073e6:	4b2d      	ldr	r3, [pc, #180]	; (800749c <_strtod_l+0x594>)
 80073e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80073ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80073f0:	4652      	mov	r2, sl
 80073f2:	465b      	mov	r3, fp
 80073f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80073f8:	f7f9 f91e 	bl	8000638 <__aeabi_dmul>
 80073fc:	4b28      	ldr	r3, [pc, #160]	; (80074a0 <_strtod_l+0x598>)
 80073fe:	460a      	mov	r2, r1
 8007400:	400b      	ands	r3, r1
 8007402:	4928      	ldr	r1, [pc, #160]	; (80074a4 <_strtod_l+0x59c>)
 8007404:	428b      	cmp	r3, r1
 8007406:	4682      	mov	sl, r0
 8007408:	d898      	bhi.n	800733c <_strtod_l+0x434>
 800740a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800740e:	428b      	cmp	r3, r1
 8007410:	bf86      	itte	hi
 8007412:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80074ac <_strtod_l+0x5a4>
 8007416:	f04f 3aff 	movhi.w	sl, #4294967295
 800741a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800741e:	2300      	movs	r3, #0
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	e077      	b.n	8007514 <_strtod_l+0x60c>
 8007424:	f018 0f01 	tst.w	r8, #1
 8007428:	d006      	beq.n	8007438 <_strtod_l+0x530>
 800742a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f7f9 f901 	bl	8000638 <__aeabi_dmul>
 8007436:	2301      	movs	r3, #1
 8007438:	3501      	adds	r5, #1
 800743a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800743e:	e7cc      	b.n	80073da <_strtod_l+0x4d2>
 8007440:	d0ed      	beq.n	800741e <_strtod_l+0x516>
 8007442:	f1c8 0800 	rsb	r8, r8, #0
 8007446:	f018 020f 	ands.w	r2, r8, #15
 800744a:	d00a      	beq.n	8007462 <_strtod_l+0x55a>
 800744c:	4b12      	ldr	r3, [pc, #72]	; (8007498 <_strtod_l+0x590>)
 800744e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007452:	4650      	mov	r0, sl
 8007454:	4659      	mov	r1, fp
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f9 fa17 	bl	800088c <__aeabi_ddiv>
 800745e:	4682      	mov	sl, r0
 8007460:	468b      	mov	fp, r1
 8007462:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007466:	d0da      	beq.n	800741e <_strtod_l+0x516>
 8007468:	f1b8 0f1f 	cmp.w	r8, #31
 800746c:	dd20      	ble.n	80074b0 <_strtod_l+0x5a8>
 800746e:	2400      	movs	r4, #0
 8007470:	46a0      	mov	r8, r4
 8007472:	9407      	str	r4, [sp, #28]
 8007474:	9405      	str	r4, [sp, #20]
 8007476:	2322      	movs	r3, #34	; 0x22
 8007478:	f04f 0a00 	mov.w	sl, #0
 800747c:	f04f 0b00 	mov.w	fp, #0
 8007480:	f8c9 3000 	str.w	r3, [r9]
 8007484:	e765      	b.n	8007352 <_strtod_l+0x44a>
 8007486:	bf00      	nop
 8007488:	0800ac01 	.word	0x0800ac01
 800748c:	0800ac83 	.word	0x0800ac83
 8007490:	0800ac09 	.word	0x0800ac09
 8007494:	0800ac44 	.word	0x0800ac44
 8007498:	0800ad28 	.word	0x0800ad28
 800749c:	0800ad00 	.word	0x0800ad00
 80074a0:	7ff00000 	.word	0x7ff00000
 80074a4:	7ca00000 	.word	0x7ca00000
 80074a8:	fff80000 	.word	0xfff80000
 80074ac:	7fefffff 	.word	0x7fefffff
 80074b0:	f018 0310 	ands.w	r3, r8, #16
 80074b4:	bf18      	it	ne
 80074b6:	236a      	movne	r3, #106	; 0x6a
 80074b8:	4da0      	ldr	r5, [pc, #640]	; (800773c <_strtod_l+0x834>)
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	4650      	mov	r0, sl
 80074be:	4659      	mov	r1, fp
 80074c0:	2300      	movs	r3, #0
 80074c2:	f1b8 0f00 	cmp.w	r8, #0
 80074c6:	f300 810a 	bgt.w	80076de <_strtod_l+0x7d6>
 80074ca:	b10b      	cbz	r3, 80074d0 <_strtod_l+0x5c8>
 80074cc:	4682      	mov	sl, r0
 80074ce:	468b      	mov	fp, r1
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	b1bb      	cbz	r3, 8007504 <_strtod_l+0x5fc>
 80074d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80074d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074dc:	2b00      	cmp	r3, #0
 80074de:	4659      	mov	r1, fp
 80074e0:	dd10      	ble.n	8007504 <_strtod_l+0x5fc>
 80074e2:	2b1f      	cmp	r3, #31
 80074e4:	f340 8107 	ble.w	80076f6 <_strtod_l+0x7ee>
 80074e8:	2b34      	cmp	r3, #52	; 0x34
 80074ea:	bfde      	ittt	le
 80074ec:	3b20      	suble	r3, #32
 80074ee:	f04f 32ff 	movle.w	r2, #4294967295
 80074f2:	fa02 f303 	lslle.w	r3, r2, r3
 80074f6:	f04f 0a00 	mov.w	sl, #0
 80074fa:	bfcc      	ite	gt
 80074fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007500:	ea03 0b01 	andle.w	fp, r3, r1
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	4650      	mov	r0, sl
 800750a:	4659      	mov	r1, fp
 800750c:	f7f9 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 8007510:	2800      	cmp	r0, #0
 8007512:	d1ac      	bne.n	800746e <_strtod_l+0x566>
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	9a05      	ldr	r2, [sp, #20]
 800751a:	9908      	ldr	r1, [sp, #32]
 800751c:	4623      	mov	r3, r4
 800751e:	4648      	mov	r0, r9
 8007520:	f001 ffb2 	bl	8009488 <__s2b>
 8007524:	9007      	str	r0, [sp, #28]
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f af08 	beq.w	800733c <_strtod_l+0x434>
 800752c:	9a06      	ldr	r2, [sp, #24]
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	2a00      	cmp	r2, #0
 8007532:	f1c3 0300 	rsb	r3, r3, #0
 8007536:	bfa8      	it	ge
 8007538:	2300      	movge	r3, #0
 800753a:	930e      	str	r3, [sp, #56]	; 0x38
 800753c:	2400      	movs	r4, #0
 800753e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007542:	9316      	str	r3, [sp, #88]	; 0x58
 8007544:	46a0      	mov	r8, r4
 8007546:	9b07      	ldr	r3, [sp, #28]
 8007548:	4648      	mov	r0, r9
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	f001 ff16 	bl	800937c <_Balloc>
 8007550:	9005      	str	r0, [sp, #20]
 8007552:	2800      	cmp	r0, #0
 8007554:	f43f aef6 	beq.w	8007344 <_strtod_l+0x43c>
 8007558:	9b07      	ldr	r3, [sp, #28]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	3202      	adds	r2, #2
 800755e:	f103 010c 	add.w	r1, r3, #12
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	300c      	adds	r0, #12
 8007566:	f7fe ffa5 	bl	80064b4 <memcpy>
 800756a:	aa1e      	add	r2, sp, #120	; 0x78
 800756c:	a91d      	add	r1, sp, #116	; 0x74
 800756e:	ec4b ab10 	vmov	d0, sl, fp
 8007572:	4648      	mov	r0, r9
 8007574:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007578:	f002 fa42 	bl	8009a00 <__d2b>
 800757c:	901c      	str	r0, [sp, #112]	; 0x70
 800757e:	2800      	cmp	r0, #0
 8007580:	f43f aee0 	beq.w	8007344 <_strtod_l+0x43c>
 8007584:	2101      	movs	r1, #1
 8007586:	4648      	mov	r0, r9
 8007588:	f002 f80a 	bl	80095a0 <__i2b>
 800758c:	4680      	mov	r8, r0
 800758e:	2800      	cmp	r0, #0
 8007590:	f43f aed8 	beq.w	8007344 <_strtod_l+0x43c>
 8007594:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007596:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007598:	2e00      	cmp	r6, #0
 800759a:	bfab      	itete	ge
 800759c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800759e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80075a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80075a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80075a4:	bfac      	ite	ge
 80075a6:	18f7      	addge	r7, r6, r3
 80075a8:	1b9d      	sublt	r5, r3, r6
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	1af6      	subs	r6, r6, r3
 80075ae:	4416      	add	r6, r2
 80075b0:	4b63      	ldr	r3, [pc, #396]	; (8007740 <_strtod_l+0x838>)
 80075b2:	3e01      	subs	r6, #1
 80075b4:	429e      	cmp	r6, r3
 80075b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075ba:	f280 80af 	bge.w	800771c <_strtod_l+0x814>
 80075be:	1b9b      	subs	r3, r3, r6
 80075c0:	2b1f      	cmp	r3, #31
 80075c2:	eba2 0203 	sub.w	r2, r2, r3
 80075c6:	f04f 0101 	mov.w	r1, #1
 80075ca:	f300 809b 	bgt.w	8007704 <_strtod_l+0x7fc>
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80075d4:	2300      	movs	r3, #0
 80075d6:	930a      	str	r3, [sp, #40]	; 0x28
 80075d8:	18be      	adds	r6, r7, r2
 80075da:	9b04      	ldr	r3, [sp, #16]
 80075dc:	42b7      	cmp	r7, r6
 80075de:	4415      	add	r5, r2
 80075e0:	441d      	add	r5, r3
 80075e2:	463b      	mov	r3, r7
 80075e4:	bfa8      	it	ge
 80075e6:	4633      	movge	r3, r6
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	bfa8      	it	ge
 80075ec:	462b      	movge	r3, r5
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfc2      	ittt	gt
 80075f2:	1af6      	subgt	r6, r6, r3
 80075f4:	1aed      	subgt	r5, r5, r3
 80075f6:	1aff      	subgt	r7, r7, r3
 80075f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075fa:	b1bb      	cbz	r3, 800762c <_strtod_l+0x724>
 80075fc:	4641      	mov	r1, r8
 80075fe:	461a      	mov	r2, r3
 8007600:	4648      	mov	r0, r9
 8007602:	f002 f86d 	bl	80096e0 <__pow5mult>
 8007606:	4680      	mov	r8, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	f43f ae9b 	beq.w	8007344 <_strtod_l+0x43c>
 800760e:	4601      	mov	r1, r0
 8007610:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007612:	4648      	mov	r0, r9
 8007614:	f001 ffcd 	bl	80095b2 <__multiply>
 8007618:	900c      	str	r0, [sp, #48]	; 0x30
 800761a:	2800      	cmp	r0, #0
 800761c:	f43f ae92 	beq.w	8007344 <_strtod_l+0x43c>
 8007620:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007622:	4648      	mov	r0, r9
 8007624:	f001 fede 	bl	80093e4 <_Bfree>
 8007628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800762a:	931c      	str	r3, [sp, #112]	; 0x70
 800762c:	2e00      	cmp	r6, #0
 800762e:	dc7a      	bgt.n	8007726 <_strtod_l+0x81e>
 8007630:	9b06      	ldr	r3, [sp, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	dd08      	ble.n	8007648 <_strtod_l+0x740>
 8007636:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007638:	9905      	ldr	r1, [sp, #20]
 800763a:	4648      	mov	r0, r9
 800763c:	f002 f850 	bl	80096e0 <__pow5mult>
 8007640:	9005      	str	r0, [sp, #20]
 8007642:	2800      	cmp	r0, #0
 8007644:	f43f ae7e 	beq.w	8007344 <_strtod_l+0x43c>
 8007648:	2d00      	cmp	r5, #0
 800764a:	dd08      	ble.n	800765e <_strtod_l+0x756>
 800764c:	462a      	mov	r2, r5
 800764e:	9905      	ldr	r1, [sp, #20]
 8007650:	4648      	mov	r0, r9
 8007652:	f002 f893 	bl	800977c <__lshift>
 8007656:	9005      	str	r0, [sp, #20]
 8007658:	2800      	cmp	r0, #0
 800765a:	f43f ae73 	beq.w	8007344 <_strtod_l+0x43c>
 800765e:	2f00      	cmp	r7, #0
 8007660:	dd08      	ble.n	8007674 <_strtod_l+0x76c>
 8007662:	4641      	mov	r1, r8
 8007664:	463a      	mov	r2, r7
 8007666:	4648      	mov	r0, r9
 8007668:	f002 f888 	bl	800977c <__lshift>
 800766c:	4680      	mov	r8, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f ae68 	beq.w	8007344 <_strtod_l+0x43c>
 8007674:	9a05      	ldr	r2, [sp, #20]
 8007676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007678:	4648      	mov	r0, r9
 800767a:	f002 f8ed 	bl	8009858 <__mdiff>
 800767e:	4604      	mov	r4, r0
 8007680:	2800      	cmp	r0, #0
 8007682:	f43f ae5f 	beq.w	8007344 <_strtod_l+0x43c>
 8007686:	68c3      	ldr	r3, [r0, #12]
 8007688:	930c      	str	r3, [sp, #48]	; 0x30
 800768a:	2300      	movs	r3, #0
 800768c:	60c3      	str	r3, [r0, #12]
 800768e:	4641      	mov	r1, r8
 8007690:	f002 f8c8 	bl	8009824 <__mcmp>
 8007694:	2800      	cmp	r0, #0
 8007696:	da55      	bge.n	8007744 <_strtod_l+0x83c>
 8007698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800769a:	b9e3      	cbnz	r3, 80076d6 <_strtod_l+0x7ce>
 800769c:	f1ba 0f00 	cmp.w	sl, #0
 80076a0:	d119      	bne.n	80076d6 <_strtod_l+0x7ce>
 80076a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076a6:	b9b3      	cbnz	r3, 80076d6 <_strtod_l+0x7ce>
 80076a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076ac:	0d1b      	lsrs	r3, r3, #20
 80076ae:	051b      	lsls	r3, r3, #20
 80076b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80076b4:	d90f      	bls.n	80076d6 <_strtod_l+0x7ce>
 80076b6:	6963      	ldr	r3, [r4, #20]
 80076b8:	b913      	cbnz	r3, 80076c0 <_strtod_l+0x7b8>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	dd0a      	ble.n	80076d6 <_strtod_l+0x7ce>
 80076c0:	4621      	mov	r1, r4
 80076c2:	2201      	movs	r2, #1
 80076c4:	4648      	mov	r0, r9
 80076c6:	f002 f859 	bl	800977c <__lshift>
 80076ca:	4641      	mov	r1, r8
 80076cc:	4604      	mov	r4, r0
 80076ce:	f002 f8a9 	bl	8009824 <__mcmp>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	dc67      	bgt.n	80077a6 <_strtod_l+0x89e>
 80076d6:	9b04      	ldr	r3, [sp, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d171      	bne.n	80077c0 <_strtod_l+0x8b8>
 80076dc:	e63d      	b.n	800735a <_strtod_l+0x452>
 80076de:	f018 0f01 	tst.w	r8, #1
 80076e2:	d004      	beq.n	80076ee <_strtod_l+0x7e6>
 80076e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076e8:	f7f8 ffa6 	bl	8000638 <__aeabi_dmul>
 80076ec:	2301      	movs	r3, #1
 80076ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076f2:	3508      	adds	r5, #8
 80076f4:	e6e5      	b.n	80074c2 <_strtod_l+0x5ba>
 80076f6:	f04f 32ff 	mov.w	r2, #4294967295
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	ea03 0a0a 	and.w	sl, r3, sl
 8007702:	e6ff      	b.n	8007504 <_strtod_l+0x5fc>
 8007704:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007708:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800770c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007710:	36e2      	adds	r6, #226	; 0xe2
 8007712:	fa01 f306 	lsl.w	r3, r1, r6
 8007716:	930a      	str	r3, [sp, #40]	; 0x28
 8007718:	910f      	str	r1, [sp, #60]	; 0x3c
 800771a:	e75d      	b.n	80075d8 <_strtod_l+0x6d0>
 800771c:	2300      	movs	r3, #0
 800771e:	930a      	str	r3, [sp, #40]	; 0x28
 8007720:	2301      	movs	r3, #1
 8007722:	930f      	str	r3, [sp, #60]	; 0x3c
 8007724:	e758      	b.n	80075d8 <_strtod_l+0x6d0>
 8007726:	4632      	mov	r2, r6
 8007728:	991c      	ldr	r1, [sp, #112]	; 0x70
 800772a:	4648      	mov	r0, r9
 800772c:	f002 f826 	bl	800977c <__lshift>
 8007730:	901c      	str	r0, [sp, #112]	; 0x70
 8007732:	2800      	cmp	r0, #0
 8007734:	f47f af7c 	bne.w	8007630 <_strtod_l+0x728>
 8007738:	e604      	b.n	8007344 <_strtod_l+0x43c>
 800773a:	bf00      	nop
 800773c:	0800ac58 	.word	0x0800ac58
 8007740:	fffffc02 	.word	0xfffffc02
 8007744:	465d      	mov	r5, fp
 8007746:	f040 8086 	bne.w	8007856 <_strtod_l+0x94e>
 800774a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007750:	b32a      	cbz	r2, 800779e <_strtod_l+0x896>
 8007752:	4aaf      	ldr	r2, [pc, #700]	; (8007a10 <_strtod_l+0xb08>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d153      	bne.n	8007800 <_strtod_l+0x8f8>
 8007758:	9b04      	ldr	r3, [sp, #16]
 800775a:	4650      	mov	r0, sl
 800775c:	b1d3      	cbz	r3, 8007794 <_strtod_l+0x88c>
 800775e:	4aad      	ldr	r2, [pc, #692]	; (8007a14 <_strtod_l+0xb0c>)
 8007760:	402a      	ands	r2, r5
 8007762:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007766:	f04f 31ff 	mov.w	r1, #4294967295
 800776a:	d816      	bhi.n	800779a <_strtod_l+0x892>
 800776c:	0d12      	lsrs	r2, r2, #20
 800776e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	4298      	cmp	r0, r3
 8007778:	d142      	bne.n	8007800 <_strtod_l+0x8f8>
 800777a:	4ba7      	ldr	r3, [pc, #668]	; (8007a18 <_strtod_l+0xb10>)
 800777c:	429d      	cmp	r5, r3
 800777e:	d102      	bne.n	8007786 <_strtod_l+0x87e>
 8007780:	3001      	adds	r0, #1
 8007782:	f43f addf 	beq.w	8007344 <_strtod_l+0x43c>
 8007786:	4ba3      	ldr	r3, [pc, #652]	; (8007a14 <_strtod_l+0xb0c>)
 8007788:	402b      	ands	r3, r5
 800778a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800778e:	f04f 0a00 	mov.w	sl, #0
 8007792:	e7a0      	b.n	80076d6 <_strtod_l+0x7ce>
 8007794:	f04f 33ff 	mov.w	r3, #4294967295
 8007798:	e7ed      	b.n	8007776 <_strtod_l+0x86e>
 800779a:	460b      	mov	r3, r1
 800779c:	e7eb      	b.n	8007776 <_strtod_l+0x86e>
 800779e:	bb7b      	cbnz	r3, 8007800 <_strtod_l+0x8f8>
 80077a0:	f1ba 0f00 	cmp.w	sl, #0
 80077a4:	d12c      	bne.n	8007800 <_strtod_l+0x8f8>
 80077a6:	9904      	ldr	r1, [sp, #16]
 80077a8:	4a9a      	ldr	r2, [pc, #616]	; (8007a14 <_strtod_l+0xb0c>)
 80077aa:	465b      	mov	r3, fp
 80077ac:	b1f1      	cbz	r1, 80077ec <_strtod_l+0x8e4>
 80077ae:	ea02 010b 	and.w	r1, r2, fp
 80077b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077b6:	dc19      	bgt.n	80077ec <_strtod_l+0x8e4>
 80077b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077bc:	f77f ae5b 	ble.w	8007476 <_strtod_l+0x56e>
 80077c0:	4a96      	ldr	r2, [pc, #600]	; (8007a1c <_strtod_l+0xb14>)
 80077c2:	2300      	movs	r3, #0
 80077c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80077c8:	4650      	mov	r0, sl
 80077ca:	4659      	mov	r1, fp
 80077cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077d0:	f7f8 ff32 	bl	8000638 <__aeabi_dmul>
 80077d4:	4682      	mov	sl, r0
 80077d6:	468b      	mov	fp, r1
 80077d8:	2900      	cmp	r1, #0
 80077da:	f47f adbe 	bne.w	800735a <_strtod_l+0x452>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f47f adbb 	bne.w	800735a <_strtod_l+0x452>
 80077e4:	2322      	movs	r3, #34	; 0x22
 80077e6:	f8c9 3000 	str.w	r3, [r9]
 80077ea:	e5b6      	b.n	800735a <_strtod_l+0x452>
 80077ec:	4013      	ands	r3, r2
 80077ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077fa:	f04f 3aff 	mov.w	sl, #4294967295
 80077fe:	e76a      	b.n	80076d6 <_strtod_l+0x7ce>
 8007800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007802:	b193      	cbz	r3, 800782a <_strtod_l+0x922>
 8007804:	422b      	tst	r3, r5
 8007806:	f43f af66 	beq.w	80076d6 <_strtod_l+0x7ce>
 800780a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780c:	9a04      	ldr	r2, [sp, #16]
 800780e:	4650      	mov	r0, sl
 8007810:	4659      	mov	r1, fp
 8007812:	b173      	cbz	r3, 8007832 <_strtod_l+0x92a>
 8007814:	f7ff fb5a 	bl	8006ecc <sulp>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007820:	f7f8 fd54 	bl	80002cc <__adddf3>
 8007824:	4682      	mov	sl, r0
 8007826:	468b      	mov	fp, r1
 8007828:	e755      	b.n	80076d6 <_strtod_l+0x7ce>
 800782a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800782c:	ea13 0f0a 	tst.w	r3, sl
 8007830:	e7e9      	b.n	8007806 <_strtod_l+0x8fe>
 8007832:	f7ff fb4b 	bl	8006ecc <sulp>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800783e:	f7f8 fd43 	bl	80002c8 <__aeabi_dsub>
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	4682      	mov	sl, r0
 8007848:	468b      	mov	fp, r1
 800784a:	f7f9 f95d 	bl	8000b08 <__aeabi_dcmpeq>
 800784e:	2800      	cmp	r0, #0
 8007850:	f47f ae11 	bne.w	8007476 <_strtod_l+0x56e>
 8007854:	e73f      	b.n	80076d6 <_strtod_l+0x7ce>
 8007856:	4641      	mov	r1, r8
 8007858:	4620      	mov	r0, r4
 800785a:	f002 f920 	bl	8009a9e <__ratio>
 800785e:	ec57 6b10 	vmov	r6, r7, d0
 8007862:	2200      	movs	r2, #0
 8007864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007868:	ee10 0a10 	vmov	r0, s0
 800786c:	4639      	mov	r1, r7
 800786e:	f7f9 f95f 	bl	8000b30 <__aeabi_dcmple>
 8007872:	2800      	cmp	r0, #0
 8007874:	d077      	beq.n	8007966 <_strtod_l+0xa5e>
 8007876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007878:	2b00      	cmp	r3, #0
 800787a:	d04a      	beq.n	8007912 <_strtod_l+0xa0a>
 800787c:	4b68      	ldr	r3, [pc, #416]	; (8007a20 <_strtod_l+0xb18>)
 800787e:	2200      	movs	r2, #0
 8007880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007884:	4f66      	ldr	r7, [pc, #408]	; (8007a20 <_strtod_l+0xb18>)
 8007886:	2600      	movs	r6, #0
 8007888:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <_strtod_l+0xb0c>)
 800788a:	402b      	ands	r3, r5
 800788c:	930f      	str	r3, [sp, #60]	; 0x3c
 800788e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007890:	4b64      	ldr	r3, [pc, #400]	; (8007a24 <_strtod_l+0xb1c>)
 8007892:	429a      	cmp	r2, r3
 8007894:	f040 80ce 	bne.w	8007a34 <_strtod_l+0xb2c>
 8007898:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800789c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80078a4:	ec4b ab10 	vmov	d0, sl, fp
 80078a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80078ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078b0:	f002 f830 	bl	8009914 <__ulp>
 80078b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078b8:	ec53 2b10 	vmov	r2, r3, d0
 80078bc:	f7f8 febc 	bl	8000638 <__aeabi_dmul>
 80078c0:	4652      	mov	r2, sl
 80078c2:	465b      	mov	r3, fp
 80078c4:	f7f8 fd02 	bl	80002cc <__adddf3>
 80078c8:	460b      	mov	r3, r1
 80078ca:	4952      	ldr	r1, [pc, #328]	; (8007a14 <_strtod_l+0xb0c>)
 80078cc:	4a56      	ldr	r2, [pc, #344]	; (8007a28 <_strtod_l+0xb20>)
 80078ce:	4019      	ands	r1, r3
 80078d0:	4291      	cmp	r1, r2
 80078d2:	4682      	mov	sl, r0
 80078d4:	d95b      	bls.n	800798e <_strtod_l+0xa86>
 80078d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078dc:	4293      	cmp	r3, r2
 80078de:	d103      	bne.n	80078e8 <_strtod_l+0x9e0>
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	3301      	adds	r3, #1
 80078e4:	f43f ad2e 	beq.w	8007344 <_strtod_l+0x43c>
 80078e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007a18 <_strtod_l+0xb10>
 80078ec:	f04f 3aff 	mov.w	sl, #4294967295
 80078f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80078f2:	4648      	mov	r0, r9
 80078f4:	f001 fd76 	bl	80093e4 <_Bfree>
 80078f8:	9905      	ldr	r1, [sp, #20]
 80078fa:	4648      	mov	r0, r9
 80078fc:	f001 fd72 	bl	80093e4 <_Bfree>
 8007900:	4641      	mov	r1, r8
 8007902:	4648      	mov	r0, r9
 8007904:	f001 fd6e 	bl	80093e4 <_Bfree>
 8007908:	4621      	mov	r1, r4
 800790a:	4648      	mov	r0, r9
 800790c:	f001 fd6a 	bl	80093e4 <_Bfree>
 8007910:	e619      	b.n	8007546 <_strtod_l+0x63e>
 8007912:	f1ba 0f00 	cmp.w	sl, #0
 8007916:	d11a      	bne.n	800794e <_strtod_l+0xa46>
 8007918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800791c:	b9eb      	cbnz	r3, 800795a <_strtod_l+0xa52>
 800791e:	2200      	movs	r2, #0
 8007920:	4b3f      	ldr	r3, [pc, #252]	; (8007a20 <_strtod_l+0xb18>)
 8007922:	4630      	mov	r0, r6
 8007924:	4639      	mov	r1, r7
 8007926:	f7f9 f8f9 	bl	8000b1c <__aeabi_dcmplt>
 800792a:	b9c8      	cbnz	r0, 8007960 <_strtod_l+0xa58>
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	2200      	movs	r2, #0
 8007932:	4b3e      	ldr	r3, [pc, #248]	; (8007a2c <_strtod_l+0xb24>)
 8007934:	f7f8 fe80 	bl	8000638 <__aeabi_dmul>
 8007938:	4606      	mov	r6, r0
 800793a:	460f      	mov	r7, r1
 800793c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007940:	9618      	str	r6, [sp, #96]	; 0x60
 8007942:	9319      	str	r3, [sp, #100]	; 0x64
 8007944:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007948:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800794c:	e79c      	b.n	8007888 <_strtod_l+0x980>
 800794e:	f1ba 0f01 	cmp.w	sl, #1
 8007952:	d102      	bne.n	800795a <_strtod_l+0xa52>
 8007954:	2d00      	cmp	r5, #0
 8007956:	f43f ad8e 	beq.w	8007476 <_strtod_l+0x56e>
 800795a:	2200      	movs	r2, #0
 800795c:	4b34      	ldr	r3, [pc, #208]	; (8007a30 <_strtod_l+0xb28>)
 800795e:	e78f      	b.n	8007880 <_strtod_l+0x978>
 8007960:	2600      	movs	r6, #0
 8007962:	4f32      	ldr	r7, [pc, #200]	; (8007a2c <_strtod_l+0xb24>)
 8007964:	e7ea      	b.n	800793c <_strtod_l+0xa34>
 8007966:	4b31      	ldr	r3, [pc, #196]	; (8007a2c <_strtod_l+0xb24>)
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	2200      	movs	r2, #0
 800796e:	f7f8 fe63 	bl	8000638 <__aeabi_dmul>
 8007972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007974:	4606      	mov	r6, r0
 8007976:	460f      	mov	r7, r1
 8007978:	b933      	cbnz	r3, 8007988 <_strtod_l+0xa80>
 800797a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800797e:	9010      	str	r0, [sp, #64]	; 0x40
 8007980:	9311      	str	r3, [sp, #68]	; 0x44
 8007982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007986:	e7df      	b.n	8007948 <_strtod_l+0xa40>
 8007988:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800798c:	e7f9      	b.n	8007982 <_strtod_l+0xa7a>
 800798e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1ab      	bne.n	80078f0 <_strtod_l+0x9e8>
 8007998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800799c:	0d1b      	lsrs	r3, r3, #20
 800799e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079a0:	051b      	lsls	r3, r3, #20
 80079a2:	429a      	cmp	r2, r3
 80079a4:	465d      	mov	r5, fp
 80079a6:	d1a3      	bne.n	80078f0 <_strtod_l+0x9e8>
 80079a8:	4639      	mov	r1, r7
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7f9 f8f4 	bl	8000b98 <__aeabi_d2iz>
 80079b0:	f7f8 fdd8 	bl	8000564 <__aeabi_i2d>
 80079b4:	460b      	mov	r3, r1
 80079b6:	4602      	mov	r2, r0
 80079b8:	4639      	mov	r1, r7
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7f8 fc84 	bl	80002c8 <__aeabi_dsub>
 80079c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079c2:	4606      	mov	r6, r0
 80079c4:	460f      	mov	r7, r1
 80079c6:	b933      	cbnz	r3, 80079d6 <_strtod_l+0xace>
 80079c8:	f1ba 0f00 	cmp.w	sl, #0
 80079cc:	d103      	bne.n	80079d6 <_strtod_l+0xace>
 80079ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	d06d      	beq.n	8007ab2 <_strtod_l+0xbaa>
 80079d6:	a30a      	add	r3, pc, #40	; (adr r3, 8007a00 <_strtod_l+0xaf8>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f9 f89c 	bl	8000b1c <__aeabi_dcmplt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f47f acb8 	bne.w	800735a <_strtod_l+0x452>
 80079ea:	a307      	add	r3, pc, #28	; (adr r3, 8007a08 <_strtod_l+0xb00>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f9 f8b0 	bl	8000b58 <__aeabi_dcmpgt>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f43f af79 	beq.w	80078f0 <_strtod_l+0x9e8>
 80079fe:	e4ac      	b.n	800735a <_strtod_l+0x452>
 8007a00:	94a03595 	.word	0x94a03595
 8007a04:	3fdfffff 	.word	0x3fdfffff
 8007a08:	35afe535 	.word	0x35afe535
 8007a0c:	3fe00000 	.word	0x3fe00000
 8007a10:	000fffff 	.word	0x000fffff
 8007a14:	7ff00000 	.word	0x7ff00000
 8007a18:	7fefffff 	.word	0x7fefffff
 8007a1c:	39500000 	.word	0x39500000
 8007a20:	3ff00000 	.word	0x3ff00000
 8007a24:	7fe00000 	.word	0x7fe00000
 8007a28:	7c9fffff 	.word	0x7c9fffff
 8007a2c:	3fe00000 	.word	0x3fe00000
 8007a30:	bff00000 	.word	0xbff00000
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	b333      	cbz	r3, 8007a86 <_strtod_l+0xb7e>
 8007a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a3e:	d822      	bhi.n	8007a86 <_strtod_l+0xb7e>
 8007a40:	a327      	add	r3, pc, #156	; (adr r3, 8007ae0 <_strtod_l+0xbd8>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f9 f871 	bl	8000b30 <__aeabi_dcmple>
 8007a4e:	b1a0      	cbz	r0, 8007a7a <_strtod_l+0xb72>
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7f9 f8c8 	bl	8000be8 <__aeabi_d2uiz>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	bf08      	it	eq
 8007a5c:	2001      	moveq	r0, #1
 8007a5e:	f7f8 fd71 	bl	8000544 <__aeabi_ui2d>
 8007a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	bb03      	cbnz	r3, 8007aac <_strtod_l+0xba4>
 8007a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a6e:	9012      	str	r0, [sp, #72]	; 0x48
 8007a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007a76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007a8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007a8e:	f001 ff41 	bl	8009914 <__ulp>
 8007a92:	4650      	mov	r0, sl
 8007a94:	ec53 2b10 	vmov	r2, r3, d0
 8007a98:	4659      	mov	r1, fp
 8007a9a:	f7f8 fdcd 	bl	8000638 <__aeabi_dmul>
 8007a9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aa2:	f7f8 fc13 	bl	80002cc <__adddf3>
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	e772      	b.n	8007992 <_strtod_l+0xa8a>
 8007aac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007ab0:	e7df      	b.n	8007a72 <_strtod_l+0xb6a>
 8007ab2:	a30d      	add	r3, pc, #52	; (adr r3, 8007ae8 <_strtod_l+0xbe0>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f9 f830 	bl	8000b1c <__aeabi_dcmplt>
 8007abc:	e79c      	b.n	80079f8 <_strtod_l+0xaf0>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ac2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	f7ff ba61 	b.w	8006f8e <_strtod_l+0x86>
 8007acc:	2b65      	cmp	r3, #101	; 0x65
 8007ace:	f04f 0200 	mov.w	r2, #0
 8007ad2:	f43f ab4e 	beq.w	8007172 <_strtod_l+0x26a>
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	9104      	str	r1, [sp, #16]
 8007adc:	f7ff bacb 	b.w	8007076 <_strtod_l+0x16e>
 8007ae0:	ffc00000 	.word	0xffc00000
 8007ae4:	41dfffff 	.word	0x41dfffff
 8007ae8:	94a03595 	.word	0x94a03595
 8007aec:	3fcfffff 	.word	0x3fcfffff

08007af0 <strtod>:
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <strtod+0x20>)
 8007af2:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <strtod+0x24>)
 8007af4:	b410      	push	{r4}
 8007af6:	681c      	ldr	r4, [r3, #0]
 8007af8:	6a23      	ldr	r3, [r4, #32]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bf08      	it	eq
 8007afe:	4613      	moveq	r3, r2
 8007b00:	460a      	mov	r2, r1
 8007b02:	4601      	mov	r1, r0
 8007b04:	4620      	mov	r0, r4
 8007b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b0a:	f7ff b9fd 	b.w	8006f08 <_strtod_l>
 8007b0e:	bf00      	nop
 8007b10:	20000144 	.word	0x20000144
 8007b14:	200001a8 	.word	0x200001a8

08007b18 <__swbuf_r>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	460e      	mov	r6, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b118      	cbz	r0, 8007b2a <__swbuf_r+0x12>
 8007b22:	6983      	ldr	r3, [r0, #24]
 8007b24:	b90b      	cbnz	r3, 8007b2a <__swbuf_r+0x12>
 8007b26:	f000 ffeb 	bl	8008b00 <__sinit>
 8007b2a:	4b21      	ldr	r3, [pc, #132]	; (8007bb0 <__swbuf_r+0x98>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d12a      	bne.n	8007b86 <__swbuf_r+0x6e>
 8007b30:	686c      	ldr	r4, [r5, #4]
 8007b32:	69a3      	ldr	r3, [r4, #24]
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	071a      	lsls	r2, r3, #28
 8007b3a:	d52e      	bpl.n	8007b9a <__swbuf_r+0x82>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	b363      	cbz	r3, 8007b9a <__swbuf_r+0x82>
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	1ac0      	subs	r0, r0, r3
 8007b46:	6963      	ldr	r3, [r4, #20]
 8007b48:	b2f6      	uxtb	r6, r6
 8007b4a:	4283      	cmp	r3, r0
 8007b4c:	4637      	mov	r7, r6
 8007b4e:	dc04      	bgt.n	8007b5a <__swbuf_r+0x42>
 8007b50:	4621      	mov	r1, r4
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 ff6a 	bl	8008a2c <_fflush_r>
 8007b58:	bb28      	cbnz	r0, 8007ba6 <__swbuf_r+0x8e>
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	6022      	str	r2, [r4, #0]
 8007b66:	701e      	strb	r6, [r3, #0]
 8007b68:	6963      	ldr	r3, [r4, #20]
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	4283      	cmp	r3, r0
 8007b6e:	d004      	beq.n	8007b7a <__swbuf_r+0x62>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	07db      	lsls	r3, r3, #31
 8007b74:	d519      	bpl.n	8007baa <__swbuf_r+0x92>
 8007b76:	2e0a      	cmp	r6, #10
 8007b78:	d117      	bne.n	8007baa <__swbuf_r+0x92>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 ff55 	bl	8008a2c <_fflush_r>
 8007b82:	b190      	cbz	r0, 8007baa <__swbuf_r+0x92>
 8007b84:	e00f      	b.n	8007ba6 <__swbuf_r+0x8e>
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <__swbuf_r+0x9c>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d101      	bne.n	8007b90 <__swbuf_r+0x78>
 8007b8c:	68ac      	ldr	r4, [r5, #8]
 8007b8e:	e7d0      	b.n	8007b32 <__swbuf_r+0x1a>
 8007b90:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <__swbuf_r+0xa0>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	bf08      	it	eq
 8007b96:	68ec      	ldreq	r4, [r5, #12]
 8007b98:	e7cb      	b.n	8007b32 <__swbuf_r+0x1a>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f000 f80d 	bl	8007bbc <__swsetup_r>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0cc      	beq.n	8007b40 <__swbuf_r+0x28>
 8007ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8007baa:	4638      	mov	r0, r7
 8007bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	0800acb0 	.word	0x0800acb0
 8007bb4:	0800acd0 	.word	0x0800acd0
 8007bb8:	0800ac90 	.word	0x0800ac90

08007bbc <__swsetup_r>:
 8007bbc:	4b32      	ldr	r3, [pc, #200]	; (8007c88 <__swsetup_r+0xcc>)
 8007bbe:	b570      	push	{r4, r5, r6, lr}
 8007bc0:	681d      	ldr	r5, [r3, #0]
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	b125      	cbz	r5, 8007bd2 <__swsetup_r+0x16>
 8007bc8:	69ab      	ldr	r3, [r5, #24]
 8007bca:	b913      	cbnz	r3, 8007bd2 <__swsetup_r+0x16>
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 ff97 	bl	8008b00 <__sinit>
 8007bd2:	4b2e      	ldr	r3, [pc, #184]	; (8007c8c <__swsetup_r+0xd0>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d10f      	bne.n	8007bf8 <__swsetup_r+0x3c>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	0715      	lsls	r5, r2, #28
 8007be2:	d42c      	bmi.n	8007c3e <__swsetup_r+0x82>
 8007be4:	06d0      	lsls	r0, r2, #27
 8007be6:	d411      	bmi.n	8007c0c <__swsetup_r+0x50>
 8007be8:	2209      	movs	r2, #9
 8007bea:	6032      	str	r2, [r6, #0]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	e03e      	b.n	8007c76 <__swsetup_r+0xba>
 8007bf8:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <__swsetup_r+0xd4>)
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d101      	bne.n	8007c02 <__swsetup_r+0x46>
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	e7eb      	b.n	8007bda <__swsetup_r+0x1e>
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <__swsetup_r+0xd8>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	bf08      	it	eq
 8007c08:	68ec      	ldreq	r4, [r5, #12]
 8007c0a:	e7e6      	b.n	8007bda <__swsetup_r+0x1e>
 8007c0c:	0751      	lsls	r1, r2, #29
 8007c0e:	d512      	bpl.n	8007c36 <__swsetup_r+0x7a>
 8007c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c12:	b141      	cbz	r1, 8007c26 <__swsetup_r+0x6a>
 8007c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	d002      	beq.n	8007c22 <__swsetup_r+0x66>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f001 ffbb 	bl	8009b98 <_free_r>
 8007c22:	2300      	movs	r3, #0
 8007c24:	6363      	str	r3, [r4, #52]	; 0x34
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6063      	str	r3, [r4, #4]
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f043 0308 	orr.w	r3, r3, #8
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	b94b      	cbnz	r3, 8007c56 <__swsetup_r+0x9a>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c4c:	d003      	beq.n	8007c56 <__swsetup_r+0x9a>
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4630      	mov	r0, r6
 8007c52:	f001 fb39 	bl	80092c8 <__smakebuf_r>
 8007c56:	89a2      	ldrh	r2, [r4, #12]
 8007c58:	f012 0301 	ands.w	r3, r2, #1
 8007c5c:	d00c      	beq.n	8007c78 <__swsetup_r+0xbc>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60a3      	str	r3, [r4, #8]
 8007c62:	6963      	ldr	r3, [r4, #20]
 8007c64:	425b      	negs	r3, r3
 8007c66:	61a3      	str	r3, [r4, #24]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	b953      	cbnz	r3, 8007c82 <__swsetup_r+0xc6>
 8007c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c74:	d1ba      	bne.n	8007bec <__swsetup_r+0x30>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	0792      	lsls	r2, r2, #30
 8007c7a:	bf58      	it	pl
 8007c7c:	6963      	ldrpl	r3, [r4, #20]
 8007c7e:	60a3      	str	r3, [r4, #8]
 8007c80:	e7f2      	b.n	8007c68 <__swsetup_r+0xac>
 8007c82:	2000      	movs	r0, #0
 8007c84:	e7f7      	b.n	8007c76 <__swsetup_r+0xba>
 8007c86:	bf00      	nop
 8007c88:	20000144 	.word	0x20000144
 8007c8c:	0800acb0 	.word	0x0800acb0
 8007c90:	0800acd0 	.word	0x0800acd0
 8007c94:	0800ac90 	.word	0x0800ac90

08007c98 <quorem>:
 8007c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	6903      	ldr	r3, [r0, #16]
 8007c9e:	690c      	ldr	r4, [r1, #16]
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	f2c0 8082 	blt.w	8007dac <quorem+0x114>
 8007ca8:	3c01      	subs	r4, #1
 8007caa:	f101 0714 	add.w	r7, r1, #20
 8007cae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007cb2:	f100 0614 	add.w	r6, r0, #20
 8007cb6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cbe:	eb06 030c 	add.w	r3, r6, ip
 8007cc2:	3501      	adds	r5, #1
 8007cc4:	eb07 090c 	add.w	r9, r7, ip
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	fbb0 f5f5 	udiv	r5, r0, r5
 8007cce:	b395      	cbz	r5, 8007d36 <quorem+0x9e>
 8007cd0:	f04f 0a00 	mov.w	sl, #0
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	46b6      	mov	lr, r6
 8007cd8:	46d3      	mov	fp, sl
 8007cda:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cde:	b293      	uxth	r3, r2
 8007ce0:	fb05 a303 	mla	r3, r5, r3, sl
 8007ce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ebab 0303 	sub.w	r3, fp, r3
 8007cee:	0c12      	lsrs	r2, r2, #16
 8007cf0:	f8de b000 	ldr.w	fp, [lr]
 8007cf4:	fb05 a202 	mla	r2, r5, r2, sl
 8007cf8:	fa13 f38b 	uxtah	r3, r3, fp
 8007cfc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d00:	fa1f fb82 	uxth.w	fp, r2
 8007d04:	f8de 2000 	ldr.w	r2, [lr]
 8007d08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d16:	4581      	cmp	r9, r0
 8007d18:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d1c:	f84e 3b04 	str.w	r3, [lr], #4
 8007d20:	d2db      	bcs.n	8007cda <quorem+0x42>
 8007d22:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d26:	b933      	cbnz	r3, 8007d36 <quorem+0x9e>
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	429e      	cmp	r6, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	d330      	bcc.n	8007d94 <quorem+0xfc>
 8007d32:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d36:	4640      	mov	r0, r8
 8007d38:	f001 fd74 	bl	8009824 <__mcmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	db25      	blt.n	8007d8c <quorem+0xf4>
 8007d40:	3501      	adds	r5, #1
 8007d42:	4630      	mov	r0, r6
 8007d44:	f04f 0c00 	mov.w	ip, #0
 8007d48:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d4c:	f8d0 e000 	ldr.w	lr, [r0]
 8007d50:	b293      	uxth	r3, r2
 8007d52:	ebac 0303 	sub.w	r3, ip, r3
 8007d56:	0c12      	lsrs	r2, r2, #16
 8007d58:	fa13 f38e 	uxtah	r3, r3, lr
 8007d5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d6a:	45b9      	cmp	r9, r7
 8007d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d70:	f840 3b04 	str.w	r3, [r0], #4
 8007d74:	d2e8      	bcs.n	8007d48 <quorem+0xb0>
 8007d76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d7e:	b92a      	cbnz	r2, 8007d8c <quorem+0xf4>
 8007d80:	3b04      	subs	r3, #4
 8007d82:	429e      	cmp	r6, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	d30b      	bcc.n	8007da0 <quorem+0x108>
 8007d88:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	b003      	add	sp, #12
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	3b04      	subs	r3, #4
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d1ca      	bne.n	8007d32 <quorem+0x9a>
 8007d9c:	3c01      	subs	r4, #1
 8007d9e:	e7c5      	b.n	8007d2c <quorem+0x94>
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	3b04      	subs	r3, #4
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d1ef      	bne.n	8007d88 <quorem+0xf0>
 8007da8:	3c01      	subs	r4, #1
 8007daa:	e7ea      	b.n	8007d82 <quorem+0xea>
 8007dac:	2000      	movs	r0, #0
 8007dae:	e7ee      	b.n	8007d8e <quorem+0xf6>

08007db0 <_dtoa_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	ec57 6b10 	vmov	r6, r7, d0
 8007db8:	b097      	sub	sp, #92	; 0x5c
 8007dba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dbc:	9106      	str	r1, [sp, #24]
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8007dc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dc8:	e9cd 6700 	strd	r6, r7, [sp]
 8007dcc:	b93d      	cbnz	r5, 8007dde <_dtoa_r+0x2e>
 8007dce:	2010      	movs	r0, #16
 8007dd0:	f001 faba 	bl	8009348 <malloc>
 8007dd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007dd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dda:	6005      	str	r5, [r0, #0]
 8007ddc:	60c5      	str	r5, [r0, #12]
 8007dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	b151      	cbz	r1, 8007dfa <_dtoa_r+0x4a>
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	604a      	str	r2, [r1, #4]
 8007de8:	2301      	movs	r3, #1
 8007dea:	4093      	lsls	r3, r2
 8007dec:	608b      	str	r3, [r1, #8]
 8007dee:	4620      	mov	r0, r4
 8007df0:	f001 faf8 	bl	80093e4 <_Bfree>
 8007df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	1e3b      	subs	r3, r7, #0
 8007dfc:	bfbb      	ittet	lt
 8007dfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e02:	9301      	strlt	r3, [sp, #4]
 8007e04:	2300      	movge	r3, #0
 8007e06:	2201      	movlt	r2, #1
 8007e08:	bfac      	ite	ge
 8007e0a:	f8c8 3000 	strge.w	r3, [r8]
 8007e0e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e12:	4baf      	ldr	r3, [pc, #700]	; (80080d0 <_dtoa_r+0x320>)
 8007e14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e18:	ea33 0308 	bics.w	r3, r3, r8
 8007e1c:	d114      	bne.n	8007e48 <_dtoa_r+0x98>
 8007e1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e20:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	9b00      	ldr	r3, [sp, #0]
 8007e28:	b923      	cbnz	r3, 8007e34 <_dtoa_r+0x84>
 8007e2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	f000 8542 	beq.w	80088b8 <_dtoa_r+0xb08>
 8007e34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80080e4 <_dtoa_r+0x334>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8544 	beq.w	80088c8 <_dtoa_r+0xb18>
 8007e40:	f10b 0303 	add.w	r3, fp, #3
 8007e44:	f000 bd3e 	b.w	80088c4 <_dtoa_r+0xb14>
 8007e48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 8007e58:	4681      	mov	r9, r0
 8007e5a:	b168      	cbz	r0, 8007e78 <_dtoa_r+0xc8>
 8007e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e5e:	2301      	movs	r3, #1
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8524 	beq.w	80088b2 <_dtoa_r+0xb02>
 8007e6a:	4b9a      	ldr	r3, [pc, #616]	; (80080d4 <_dtoa_r+0x324>)
 8007e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e6e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	f000 bd28 	b.w	80088c8 <_dtoa_r+0xb18>
 8007e78:	aa14      	add	r2, sp, #80	; 0x50
 8007e7a:	a915      	add	r1, sp, #84	; 0x54
 8007e7c:	ec47 6b10 	vmov	d0, r6, r7
 8007e80:	4620      	mov	r0, r4
 8007e82:	f001 fdbd 	bl	8009a00 <__d2b>
 8007e86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	d07c      	beq.n	8007f8a <_dtoa_r+0x1da>
 8007e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007e98:	46b2      	mov	sl, r6
 8007e9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ea2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4b8b      	ldr	r3, [pc, #556]	; (80080d8 <_dtoa_r+0x328>)
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	f7f8 fa0b 	bl	80002c8 <__aeabi_dsub>
 8007eb2:	a381      	add	r3, pc, #516	; (adr r3, 80080b8 <_dtoa_r+0x308>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fbbe 	bl	8000638 <__aeabi_dmul>
 8007ebc:	a380      	add	r3, pc, #512	; (adr r3, 80080c0 <_dtoa_r+0x310>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 fa03 	bl	80002cc <__adddf3>
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	460f      	mov	r7, r1
 8007ecc:	f7f8 fb4a 	bl	8000564 <__aeabi_i2d>
 8007ed0:	a37d      	add	r3, pc, #500	; (adr r3, 80080c8 <_dtoa_r+0x318>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fbaf 	bl	8000638 <__aeabi_dmul>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 f9f3 	bl	80002cc <__adddf3>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	f7f8 fe55 	bl	8000b98 <__aeabi_d2iz>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 fe10 	bl	8000b1c <__aeabi_dcmplt>
 8007efc:	b148      	cbz	r0, 8007f12 <_dtoa_r+0x162>
 8007efe:	4650      	mov	r0, sl
 8007f00:	f7f8 fb30 	bl	8000564 <__aeabi_i2d>
 8007f04:	4632      	mov	r2, r6
 8007f06:	463b      	mov	r3, r7
 8007f08:	f7f8 fdfe 	bl	8000b08 <__aeabi_dcmpeq>
 8007f0c:	b908      	cbnz	r0, 8007f12 <_dtoa_r+0x162>
 8007f0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f12:	f1ba 0f16 	cmp.w	sl, #22
 8007f16:	d859      	bhi.n	8007fcc <_dtoa_r+0x21c>
 8007f18:	4970      	ldr	r1, [pc, #448]	; (80080dc <_dtoa_r+0x32c>)
 8007f1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f26:	f7f8 fe17 	bl	8000b58 <__aeabi_dcmpgt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d050      	beq.n	8007fd0 <_dtoa_r+0x220>
 8007f2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f32:	2300      	movs	r3, #0
 8007f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f38:	1b5d      	subs	r5, r3, r5
 8007f3a:	f1b5 0801 	subs.w	r8, r5, #1
 8007f3e:	bf49      	itett	mi
 8007f40:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f44:	2300      	movpl	r3, #0
 8007f46:	9305      	strmi	r3, [sp, #20]
 8007f48:	f04f 0800 	movmi.w	r8, #0
 8007f4c:	bf58      	it	pl
 8007f4e:	9305      	strpl	r3, [sp, #20]
 8007f50:	f1ba 0f00 	cmp.w	sl, #0
 8007f54:	db3e      	blt.n	8007fd4 <_dtoa_r+0x224>
 8007f56:	2300      	movs	r3, #0
 8007f58:	44d0      	add	r8, sl
 8007f5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	f200 8090 	bhi.w	8008088 <_dtoa_r+0x2d8>
 8007f68:	2b05      	cmp	r3, #5
 8007f6a:	bfc4      	itt	gt
 8007f6c:	3b04      	subgt	r3, #4
 8007f6e:	9306      	strgt	r3, [sp, #24]
 8007f70:	9b06      	ldr	r3, [sp, #24]
 8007f72:	f1a3 0302 	sub.w	r3, r3, #2
 8007f76:	bfcc      	ite	gt
 8007f78:	2500      	movgt	r5, #0
 8007f7a:	2501      	movle	r5, #1
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	f200 808f 	bhi.w	80080a0 <_dtoa_r+0x2f0>
 8007f82:	e8df f003 	tbb	[pc, r3]
 8007f86:	7f7d      	.short	0x7f7d
 8007f88:	7131      	.short	0x7131
 8007f8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007f8e:	441d      	add	r5, r3
 8007f90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007f94:	2820      	cmp	r0, #32
 8007f96:	dd13      	ble.n	8007fc0 <_dtoa_r+0x210>
 8007f98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007f9c:	9b00      	ldr	r3, [sp, #0]
 8007f9e:	fa08 f800 	lsl.w	r8, r8, r0
 8007fa2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fa6:	fa23 f000 	lsr.w	r0, r3, r0
 8007faa:	ea48 0000 	orr.w	r0, r8, r0
 8007fae:	f7f8 fac9 	bl	8000544 <__aeabi_ui2d>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007fba:	3d01      	subs	r5, #1
 8007fbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fbe:	e772      	b.n	8007ea6 <_dtoa_r+0xf6>
 8007fc0:	9b00      	ldr	r3, [sp, #0]
 8007fc2:	f1c0 0020 	rsb	r0, r0, #32
 8007fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007fca:	e7f0      	b.n	8007fae <_dtoa_r+0x1fe>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e7b1      	b.n	8007f34 <_dtoa_r+0x184>
 8007fd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fd2:	e7b0      	b.n	8007f36 <_dtoa_r+0x186>
 8007fd4:	9b05      	ldr	r3, [sp, #20]
 8007fd6:	eba3 030a 	sub.w	r3, r3, sl
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	f1ca 0300 	rsb	r3, sl, #0
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe6:	e7bb      	b.n	8007f60 <_dtoa_r+0x1b0>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	930a      	str	r3, [sp, #40]	; 0x28
 8007fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dd59      	ble.n	80080a6 <_dtoa_r+0x2f6>
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	4699      	mov	r9, r3
 8007ff6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	6072      	str	r2, [r6, #4]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	f102 0014 	add.w	r0, r2, #20
 8008002:	4298      	cmp	r0, r3
 8008004:	6871      	ldr	r1, [r6, #4]
 8008006:	d953      	bls.n	80080b0 <_dtoa_r+0x300>
 8008008:	4620      	mov	r0, r4
 800800a:	f001 f9b7 	bl	800937c <_Balloc>
 800800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008010:	6030      	str	r0, [r6, #0]
 8008012:	f1b9 0f0e 	cmp.w	r9, #14
 8008016:	f8d3 b000 	ldr.w	fp, [r3]
 800801a:	f200 80e6 	bhi.w	80081ea <_dtoa_r+0x43a>
 800801e:	2d00      	cmp	r5, #0
 8008020:	f000 80e3 	beq.w	80081ea <_dtoa_r+0x43a>
 8008024:	ed9d 7b00 	vldr	d7, [sp]
 8008028:	f1ba 0f00 	cmp.w	sl, #0
 800802c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008030:	dd74      	ble.n	800811c <_dtoa_r+0x36c>
 8008032:	4a2a      	ldr	r2, [pc, #168]	; (80080dc <_dtoa_r+0x32c>)
 8008034:	f00a 030f 	and.w	r3, sl, #15
 8008038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800803c:	ed93 7b00 	vldr	d7, [r3]
 8008040:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008044:	06f0      	lsls	r0, r6, #27
 8008046:	ed8d 7b08 	vstr	d7, [sp, #32]
 800804a:	d565      	bpl.n	8008118 <_dtoa_r+0x368>
 800804c:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <_dtoa_r+0x330>)
 800804e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008052:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008056:	f7f8 fc19 	bl	800088c <__aeabi_ddiv>
 800805a:	e9cd 0100 	strd	r0, r1, [sp]
 800805e:	f006 060f 	and.w	r6, r6, #15
 8008062:	2503      	movs	r5, #3
 8008064:	4f1e      	ldr	r7, [pc, #120]	; (80080e0 <_dtoa_r+0x330>)
 8008066:	e04c      	b.n	8008102 <_dtoa_r+0x352>
 8008068:	2301      	movs	r3, #1
 800806a:	930a      	str	r3, [sp, #40]	; 0x28
 800806c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806e:	4453      	add	r3, sl
 8008070:	f103 0901 	add.w	r9, r3, #1
 8008074:	9302      	str	r3, [sp, #8]
 8008076:	464b      	mov	r3, r9
 8008078:	2b01      	cmp	r3, #1
 800807a:	bfb8      	it	lt
 800807c:	2301      	movlt	r3, #1
 800807e:	e7ba      	b.n	8007ff6 <_dtoa_r+0x246>
 8008080:	2300      	movs	r3, #0
 8008082:	e7b2      	b.n	8007fea <_dtoa_r+0x23a>
 8008084:	2300      	movs	r3, #0
 8008086:	e7f0      	b.n	800806a <_dtoa_r+0x2ba>
 8008088:	2501      	movs	r5, #1
 800808a:	2300      	movs	r3, #0
 800808c:	9306      	str	r3, [sp, #24]
 800808e:	950a      	str	r5, [sp, #40]	; 0x28
 8008090:	f04f 33ff 	mov.w	r3, #4294967295
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	4699      	mov	r9, r3
 8008098:	2200      	movs	r2, #0
 800809a:	2312      	movs	r3, #18
 800809c:	920b      	str	r2, [sp, #44]	; 0x2c
 800809e:	e7aa      	b.n	8007ff6 <_dtoa_r+0x246>
 80080a0:	2301      	movs	r3, #1
 80080a2:	930a      	str	r3, [sp, #40]	; 0x28
 80080a4:	e7f4      	b.n	8008090 <_dtoa_r+0x2e0>
 80080a6:	2301      	movs	r3, #1
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	4699      	mov	r9, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	e7f5      	b.n	800809c <_dtoa_r+0x2ec>
 80080b0:	3101      	adds	r1, #1
 80080b2:	6071      	str	r1, [r6, #4]
 80080b4:	0052      	lsls	r2, r2, #1
 80080b6:	e7a2      	b.n	8007ffe <_dtoa_r+0x24e>
 80080b8:	636f4361 	.word	0x636f4361
 80080bc:	3fd287a7 	.word	0x3fd287a7
 80080c0:	8b60c8b3 	.word	0x8b60c8b3
 80080c4:	3fc68a28 	.word	0x3fc68a28
 80080c8:	509f79fb 	.word	0x509f79fb
 80080cc:	3fd34413 	.word	0x3fd34413
 80080d0:	7ff00000 	.word	0x7ff00000
 80080d4:	0800ac0d 	.word	0x0800ac0d
 80080d8:	3ff80000 	.word	0x3ff80000
 80080dc:	0800ad28 	.word	0x0800ad28
 80080e0:	0800ad00 	.word	0x0800ad00
 80080e4:	0800ac89 	.word	0x0800ac89
 80080e8:	07f1      	lsls	r1, r6, #31
 80080ea:	d508      	bpl.n	80080fe <_dtoa_r+0x34e>
 80080ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f4:	f7f8 faa0 	bl	8000638 <__aeabi_dmul>
 80080f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080fc:	3501      	adds	r5, #1
 80080fe:	1076      	asrs	r6, r6, #1
 8008100:	3708      	adds	r7, #8
 8008102:	2e00      	cmp	r6, #0
 8008104:	d1f0      	bne.n	80080e8 <_dtoa_r+0x338>
 8008106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800810a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800810e:	f7f8 fbbd 	bl	800088c <__aeabi_ddiv>
 8008112:	e9cd 0100 	strd	r0, r1, [sp]
 8008116:	e01a      	b.n	800814e <_dtoa_r+0x39e>
 8008118:	2502      	movs	r5, #2
 800811a:	e7a3      	b.n	8008064 <_dtoa_r+0x2b4>
 800811c:	f000 80a0 	beq.w	8008260 <_dtoa_r+0x4b0>
 8008120:	f1ca 0600 	rsb	r6, sl, #0
 8008124:	4b9f      	ldr	r3, [pc, #636]	; (80083a4 <_dtoa_r+0x5f4>)
 8008126:	4fa0      	ldr	r7, [pc, #640]	; (80083a8 <_dtoa_r+0x5f8>)
 8008128:	f006 020f 	and.w	r2, r6, #15
 800812c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008138:	f7f8 fa7e 	bl	8000638 <__aeabi_dmul>
 800813c:	e9cd 0100 	strd	r0, r1, [sp]
 8008140:	1136      	asrs	r6, r6, #4
 8008142:	2300      	movs	r3, #0
 8008144:	2502      	movs	r5, #2
 8008146:	2e00      	cmp	r6, #0
 8008148:	d17f      	bne.n	800824a <_dtoa_r+0x49a>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e1      	bne.n	8008112 <_dtoa_r+0x362>
 800814e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8087 	beq.w	8008264 <_dtoa_r+0x4b4>
 8008156:	e9dd 6700 	ldrd	r6, r7, [sp]
 800815a:	2200      	movs	r2, #0
 800815c:	4b93      	ldr	r3, [pc, #588]	; (80083ac <_dtoa_r+0x5fc>)
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fcdb 	bl	8000b1c <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	d07c      	beq.n	8008264 <_dtoa_r+0x4b4>
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d079      	beq.n	8008264 <_dtoa_r+0x4b4>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dd35      	ble.n	80081e2 <_dtoa_r+0x432>
 8008176:	f10a 33ff 	add.w	r3, sl, #4294967295
 800817a:	9308      	str	r3, [sp, #32]
 800817c:	4639      	mov	r1, r7
 800817e:	2200      	movs	r2, #0
 8008180:	4b8b      	ldr	r3, [pc, #556]	; (80083b0 <_dtoa_r+0x600>)
 8008182:	4630      	mov	r0, r6
 8008184:	f7f8 fa58 	bl	8000638 <__aeabi_dmul>
 8008188:	e9cd 0100 	strd	r0, r1, [sp]
 800818c:	9f02      	ldr	r7, [sp, #8]
 800818e:	3501      	adds	r5, #1
 8008190:	4628      	mov	r0, r5
 8008192:	f7f8 f9e7 	bl	8000564 <__aeabi_i2d>
 8008196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800819a:	f7f8 fa4d 	bl	8000638 <__aeabi_dmul>
 800819e:	2200      	movs	r2, #0
 80081a0:	4b84      	ldr	r3, [pc, #528]	; (80083b4 <_dtoa_r+0x604>)
 80081a2:	f7f8 f893 	bl	80002cc <__adddf3>
 80081a6:	4605      	mov	r5, r0
 80081a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d15d      	bne.n	800826c <_dtoa_r+0x4bc>
 80081b0:	2200      	movs	r2, #0
 80081b2:	4b81      	ldr	r3, [pc, #516]	; (80083b8 <_dtoa_r+0x608>)
 80081b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b8:	f7f8 f886 	bl	80002c8 <__aeabi_dsub>
 80081bc:	462a      	mov	r2, r5
 80081be:	4633      	mov	r3, r6
 80081c0:	e9cd 0100 	strd	r0, r1, [sp]
 80081c4:	f7f8 fcc8 	bl	8000b58 <__aeabi_dcmpgt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f040 8288 	bne.w	80086de <_dtoa_r+0x92e>
 80081ce:	462a      	mov	r2, r5
 80081d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d8:	f7f8 fca0 	bl	8000b1c <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f040 827c 	bne.w	80086da <_dtoa_r+0x92a>
 80081e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081e6:	e9cd 2300 	strd	r2, r3, [sp]
 80081ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f2c0 8150 	blt.w	8008492 <_dtoa_r+0x6e2>
 80081f2:	f1ba 0f0e 	cmp.w	sl, #14
 80081f6:	f300 814c 	bgt.w	8008492 <_dtoa_r+0x6e2>
 80081fa:	4b6a      	ldr	r3, [pc, #424]	; (80083a4 <_dtoa_r+0x5f4>)
 80081fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008200:	ed93 7b00 	vldr	d7, [r3]
 8008204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008206:	2b00      	cmp	r3, #0
 8008208:	ed8d 7b02 	vstr	d7, [sp, #8]
 800820c:	f280 80d8 	bge.w	80083c0 <_dtoa_r+0x610>
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	f300 80d4 	bgt.w	80083c0 <_dtoa_r+0x610>
 8008218:	f040 825e 	bne.w	80086d8 <_dtoa_r+0x928>
 800821c:	2200      	movs	r2, #0
 800821e:	4b66      	ldr	r3, [pc, #408]	; (80083b8 <_dtoa_r+0x608>)
 8008220:	ec51 0b17 	vmov	r0, r1, d7
 8008224:	f7f8 fa08 	bl	8000638 <__aeabi_dmul>
 8008228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800822c:	f7f8 fc8a 	bl	8000b44 <__aeabi_dcmpge>
 8008230:	464f      	mov	r7, r9
 8008232:	464e      	mov	r6, r9
 8008234:	2800      	cmp	r0, #0
 8008236:	f040 8234 	bne.w	80086a2 <_dtoa_r+0x8f2>
 800823a:	2331      	movs	r3, #49	; 0x31
 800823c:	f10b 0501 	add.w	r5, fp, #1
 8008240:	f88b 3000 	strb.w	r3, [fp]
 8008244:	f10a 0a01 	add.w	sl, sl, #1
 8008248:	e22f      	b.n	80086aa <_dtoa_r+0x8fa>
 800824a:	07f2      	lsls	r2, r6, #31
 800824c:	d505      	bpl.n	800825a <_dtoa_r+0x4aa>
 800824e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008252:	f7f8 f9f1 	bl	8000638 <__aeabi_dmul>
 8008256:	3501      	adds	r5, #1
 8008258:	2301      	movs	r3, #1
 800825a:	1076      	asrs	r6, r6, #1
 800825c:	3708      	adds	r7, #8
 800825e:	e772      	b.n	8008146 <_dtoa_r+0x396>
 8008260:	2502      	movs	r5, #2
 8008262:	e774      	b.n	800814e <_dtoa_r+0x39e>
 8008264:	f8cd a020 	str.w	sl, [sp, #32]
 8008268:	464f      	mov	r7, r9
 800826a:	e791      	b.n	8008190 <_dtoa_r+0x3e0>
 800826c:	4b4d      	ldr	r3, [pc, #308]	; (80083a4 <_dtoa_r+0x5f4>)
 800826e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008272:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d047      	beq.n	800830c <_dtoa_r+0x55c>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	2000      	movs	r0, #0
 8008282:	494e      	ldr	r1, [pc, #312]	; (80083bc <_dtoa_r+0x60c>)
 8008284:	f7f8 fb02 	bl	800088c <__aeabi_ddiv>
 8008288:	462a      	mov	r2, r5
 800828a:	4633      	mov	r3, r6
 800828c:	f7f8 f81c 	bl	80002c8 <__aeabi_dsub>
 8008290:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008294:	465d      	mov	r5, fp
 8008296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800829a:	f7f8 fc7d 	bl	8000b98 <__aeabi_d2iz>
 800829e:	4606      	mov	r6, r0
 80082a0:	f7f8 f960 	bl	8000564 <__aeabi_i2d>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ac:	f7f8 f80c 	bl	80002c8 <__aeabi_dsub>
 80082b0:	3630      	adds	r6, #48	; 0x30
 80082b2:	f805 6b01 	strb.w	r6, [r5], #1
 80082b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082ba:	e9cd 0100 	strd	r0, r1, [sp]
 80082be:	f7f8 fc2d 	bl	8000b1c <__aeabi_dcmplt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d163      	bne.n	800838e <_dtoa_r+0x5de>
 80082c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ca:	2000      	movs	r0, #0
 80082cc:	4937      	ldr	r1, [pc, #220]	; (80083ac <_dtoa_r+0x5fc>)
 80082ce:	f7f7 fffb 	bl	80002c8 <__aeabi_dsub>
 80082d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082d6:	f7f8 fc21 	bl	8000b1c <__aeabi_dcmplt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f040 80b7 	bne.w	800844e <_dtoa_r+0x69e>
 80082e0:	eba5 030b 	sub.w	r3, r5, fp
 80082e4:	429f      	cmp	r7, r3
 80082e6:	f77f af7c 	ble.w	80081e2 <_dtoa_r+0x432>
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b30      	ldr	r3, [pc, #192]	; (80083b0 <_dtoa_r+0x600>)
 80082ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082f2:	f7f8 f9a1 	bl	8000638 <__aeabi_dmul>
 80082f6:	2200      	movs	r2, #0
 80082f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082fc:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <_dtoa_r+0x600>)
 80082fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008302:	f7f8 f999 	bl	8000638 <__aeabi_dmul>
 8008306:	e9cd 0100 	strd	r0, r1, [sp]
 800830a:	e7c4      	b.n	8008296 <_dtoa_r+0x4e6>
 800830c:	462a      	mov	r2, r5
 800830e:	4633      	mov	r3, r6
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008318:	eb0b 0507 	add.w	r5, fp, r7
 800831c:	465e      	mov	r6, fp
 800831e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008322:	f7f8 fc39 	bl	8000b98 <__aeabi_d2iz>
 8008326:	4607      	mov	r7, r0
 8008328:	f7f8 f91c 	bl	8000564 <__aeabi_i2d>
 800832c:	3730      	adds	r7, #48	; 0x30
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008336:	f7f7 ffc7 	bl	80002c8 <__aeabi_dsub>
 800833a:	f806 7b01 	strb.w	r7, [r6], #1
 800833e:	42ae      	cmp	r6, r5
 8008340:	e9cd 0100 	strd	r0, r1, [sp]
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	d126      	bne.n	8008398 <_dtoa_r+0x5e8>
 800834a:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <_dtoa_r+0x60c>)
 800834c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008350:	f7f7 ffbc 	bl	80002cc <__adddf3>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800835c:	f7f8 fbfc 	bl	8000b58 <__aeabi_dcmpgt>
 8008360:	2800      	cmp	r0, #0
 8008362:	d174      	bne.n	800844e <_dtoa_r+0x69e>
 8008364:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008368:	2000      	movs	r0, #0
 800836a:	4914      	ldr	r1, [pc, #80]	; (80083bc <_dtoa_r+0x60c>)
 800836c:	f7f7 ffac 	bl	80002c8 <__aeabi_dsub>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008378:	f7f8 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	f43f af30 	beq.w	80081e2 <_dtoa_r+0x432>
 8008382:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008386:	2b30      	cmp	r3, #48	; 0x30
 8008388:	f105 32ff 	add.w	r2, r5, #4294967295
 800838c:	d002      	beq.n	8008394 <_dtoa_r+0x5e4>
 800838e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008392:	e04a      	b.n	800842a <_dtoa_r+0x67a>
 8008394:	4615      	mov	r5, r2
 8008396:	e7f4      	b.n	8008382 <_dtoa_r+0x5d2>
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <_dtoa_r+0x600>)
 800839a:	f7f8 f94d 	bl	8000638 <__aeabi_dmul>
 800839e:	e9cd 0100 	strd	r0, r1, [sp]
 80083a2:	e7bc      	b.n	800831e <_dtoa_r+0x56e>
 80083a4:	0800ad28 	.word	0x0800ad28
 80083a8:	0800ad00 	.word	0x0800ad00
 80083ac:	3ff00000 	.word	0x3ff00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	401c0000 	.word	0x401c0000
 80083b8:	40140000 	.word	0x40140000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083c4:	465d      	mov	r5, fp
 80083c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f8 fa5d 	bl	800088c <__aeabi_ddiv>
 80083d2:	f7f8 fbe1 	bl	8000b98 <__aeabi_d2iz>
 80083d6:	4680      	mov	r8, r0
 80083d8:	f7f8 f8c4 	bl	8000564 <__aeabi_i2d>
 80083dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083e0:	f7f8 f92a 	bl	8000638 <__aeabi_dmul>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4630      	mov	r0, r6
 80083ea:	4639      	mov	r1, r7
 80083ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80083f0:	f7f7 ff6a 	bl	80002c8 <__aeabi_dsub>
 80083f4:	f805 6b01 	strb.w	r6, [r5], #1
 80083f8:	eba5 060b 	sub.w	r6, r5, fp
 80083fc:	45b1      	cmp	r9, r6
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	d139      	bne.n	8008478 <_dtoa_r+0x6c8>
 8008404:	f7f7 ff62 	bl	80002cc <__adddf3>
 8008408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f8 fba2 	bl	8000b58 <__aeabi_dcmpgt>
 8008414:	b9c8      	cbnz	r0, 800844a <_dtoa_r+0x69a>
 8008416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8008422:	b110      	cbz	r0, 800842a <_dtoa_r+0x67a>
 8008424:	f018 0f01 	tst.w	r8, #1
 8008428:	d10f      	bne.n	800844a <_dtoa_r+0x69a>
 800842a:	9904      	ldr	r1, [sp, #16]
 800842c:	4620      	mov	r0, r4
 800842e:	f000 ffd9 	bl	80093e4 <_Bfree>
 8008432:	2300      	movs	r3, #0
 8008434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008436:	702b      	strb	r3, [r5, #0]
 8008438:	f10a 0301 	add.w	r3, sl, #1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8241 	beq.w	80088c8 <_dtoa_r+0xb18>
 8008446:	601d      	str	r5, [r3, #0]
 8008448:	e23e      	b.n	80088c8 <_dtoa_r+0xb18>
 800844a:	f8cd a020 	str.w	sl, [sp, #32]
 800844e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008452:	2a39      	cmp	r2, #57	; 0x39
 8008454:	f105 33ff 	add.w	r3, r5, #4294967295
 8008458:	d108      	bne.n	800846c <_dtoa_r+0x6bc>
 800845a:	459b      	cmp	fp, r3
 800845c:	d10a      	bne.n	8008474 <_dtoa_r+0x6c4>
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	3301      	adds	r3, #1
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	2330      	movs	r3, #48	; 0x30
 8008466:	f88b 3000 	strb.w	r3, [fp]
 800846a:	465b      	mov	r3, fp
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	3201      	adds	r2, #1
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e78c      	b.n	800838e <_dtoa_r+0x5de>
 8008474:	461d      	mov	r5, r3
 8008476:	e7ea      	b.n	800844e <_dtoa_r+0x69e>
 8008478:	2200      	movs	r2, #0
 800847a:	4b9b      	ldr	r3, [pc, #620]	; (80086e8 <_dtoa_r+0x938>)
 800847c:	f7f8 f8dc 	bl	8000638 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	2300      	movs	r3, #0
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	f7f8 fb3e 	bl	8000b08 <__aeabi_dcmpeq>
 800848c:	2800      	cmp	r0, #0
 800848e:	d09a      	beq.n	80083c6 <_dtoa_r+0x616>
 8008490:	e7cb      	b.n	800842a <_dtoa_r+0x67a>
 8008492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008494:	2a00      	cmp	r2, #0
 8008496:	f000 808b 	beq.w	80085b0 <_dtoa_r+0x800>
 800849a:	9a06      	ldr	r2, [sp, #24]
 800849c:	2a01      	cmp	r2, #1
 800849e:	dc6e      	bgt.n	800857e <_dtoa_r+0x7ce>
 80084a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d067      	beq.n	8008576 <_dtoa_r+0x7c6>
 80084a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084aa:	9f07      	ldr	r7, [sp, #28]
 80084ac:	9d05      	ldr	r5, [sp, #20]
 80084ae:	9a05      	ldr	r2, [sp, #20]
 80084b0:	2101      	movs	r1, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	4620      	mov	r0, r4
 80084b6:	9205      	str	r2, [sp, #20]
 80084b8:	4498      	add	r8, r3
 80084ba:	f001 f871 	bl	80095a0 <__i2b>
 80084be:	4606      	mov	r6, r0
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	dd0c      	ble.n	80084de <_dtoa_r+0x72e>
 80084c4:	f1b8 0f00 	cmp.w	r8, #0
 80084c8:	dd09      	ble.n	80084de <_dtoa_r+0x72e>
 80084ca:	4545      	cmp	r5, r8
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	462b      	mov	r3, r5
 80084d0:	bfa8      	it	ge
 80084d2:	4643      	movge	r3, r8
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	9205      	str	r2, [sp, #20]
 80084d8:	1aed      	subs	r5, r5, r3
 80084da:	eba8 0803 	sub.w	r8, r8, r3
 80084de:	9b07      	ldr	r3, [sp, #28]
 80084e0:	b1eb      	cbz	r3, 800851e <_dtoa_r+0x76e>
 80084e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d067      	beq.n	80085b8 <_dtoa_r+0x808>
 80084e8:	b18f      	cbz	r7, 800850e <_dtoa_r+0x75e>
 80084ea:	4631      	mov	r1, r6
 80084ec:	463a      	mov	r2, r7
 80084ee:	4620      	mov	r0, r4
 80084f0:	f001 f8f6 	bl	80096e0 <__pow5mult>
 80084f4:	9a04      	ldr	r2, [sp, #16]
 80084f6:	4601      	mov	r1, r0
 80084f8:	4606      	mov	r6, r0
 80084fa:	4620      	mov	r0, r4
 80084fc:	f001 f859 	bl	80095b2 <__multiply>
 8008500:	9904      	ldr	r1, [sp, #16]
 8008502:	9008      	str	r0, [sp, #32]
 8008504:	4620      	mov	r0, r4
 8008506:	f000 ff6d 	bl	80093e4 <_Bfree>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	9b07      	ldr	r3, [sp, #28]
 8008510:	1bda      	subs	r2, r3, r7
 8008512:	d004      	beq.n	800851e <_dtoa_r+0x76e>
 8008514:	9904      	ldr	r1, [sp, #16]
 8008516:	4620      	mov	r0, r4
 8008518:	f001 f8e2 	bl	80096e0 <__pow5mult>
 800851c:	9004      	str	r0, [sp, #16]
 800851e:	2101      	movs	r1, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f001 f83d 	bl	80095a0 <__i2b>
 8008526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008528:	4607      	mov	r7, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 81d0 	beq.w	80088d0 <_dtoa_r+0xb20>
 8008530:	461a      	mov	r2, r3
 8008532:	4601      	mov	r1, r0
 8008534:	4620      	mov	r0, r4
 8008536:	f001 f8d3 	bl	80096e0 <__pow5mult>
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	2b01      	cmp	r3, #1
 800853e:	4607      	mov	r7, r0
 8008540:	dc40      	bgt.n	80085c4 <_dtoa_r+0x814>
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d139      	bne.n	80085bc <_dtoa_r+0x80c>
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800854e:	2b00      	cmp	r3, #0
 8008550:	d136      	bne.n	80085c0 <_dtoa_r+0x810>
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008558:	0d1b      	lsrs	r3, r3, #20
 800855a:	051b      	lsls	r3, r3, #20
 800855c:	b12b      	cbz	r3, 800856a <_dtoa_r+0x7ba>
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	3301      	adds	r3, #1
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	f108 0801 	add.w	r8, r8, #1
 8008568:	2301      	movs	r3, #1
 800856a:	9307      	str	r3, [sp, #28]
 800856c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800856e:	2b00      	cmp	r3, #0
 8008570:	d12a      	bne.n	80085c8 <_dtoa_r+0x818>
 8008572:	2001      	movs	r0, #1
 8008574:	e030      	b.n	80085d8 <_dtoa_r+0x828>
 8008576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008578:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800857c:	e795      	b.n	80084aa <_dtoa_r+0x6fa>
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	f109 37ff 	add.w	r7, r9, #4294967295
 8008584:	42bb      	cmp	r3, r7
 8008586:	bfbf      	itttt	lt
 8008588:	9b07      	ldrlt	r3, [sp, #28]
 800858a:	9707      	strlt	r7, [sp, #28]
 800858c:	1afa      	sublt	r2, r7, r3
 800858e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008590:	bfbb      	ittet	lt
 8008592:	189b      	addlt	r3, r3, r2
 8008594:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008596:	1bdf      	subge	r7, r3, r7
 8008598:	2700      	movlt	r7, #0
 800859a:	f1b9 0f00 	cmp.w	r9, #0
 800859e:	bfb5      	itete	lt
 80085a0:	9b05      	ldrlt	r3, [sp, #20]
 80085a2:	9d05      	ldrge	r5, [sp, #20]
 80085a4:	eba3 0509 	sublt.w	r5, r3, r9
 80085a8:	464b      	movge	r3, r9
 80085aa:	bfb8      	it	lt
 80085ac:	2300      	movlt	r3, #0
 80085ae:	e77e      	b.n	80084ae <_dtoa_r+0x6fe>
 80085b0:	9f07      	ldr	r7, [sp, #28]
 80085b2:	9d05      	ldr	r5, [sp, #20]
 80085b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085b6:	e783      	b.n	80084c0 <_dtoa_r+0x710>
 80085b8:	9a07      	ldr	r2, [sp, #28]
 80085ba:	e7ab      	b.n	8008514 <_dtoa_r+0x764>
 80085bc:	2300      	movs	r3, #0
 80085be:	e7d4      	b.n	800856a <_dtoa_r+0x7ba>
 80085c0:	9b00      	ldr	r3, [sp, #0]
 80085c2:	e7d2      	b.n	800856a <_dtoa_r+0x7ba>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085ce:	6918      	ldr	r0, [r3, #16]
 80085d0:	f000 ff98 	bl	8009504 <__hi0bits>
 80085d4:	f1c0 0020 	rsb	r0, r0, #32
 80085d8:	4440      	add	r0, r8
 80085da:	f010 001f 	ands.w	r0, r0, #31
 80085de:	d047      	beq.n	8008670 <_dtoa_r+0x8c0>
 80085e0:	f1c0 0320 	rsb	r3, r0, #32
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	dd3b      	ble.n	8008660 <_dtoa_r+0x8b0>
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	f1c0 001c 	rsb	r0, r0, #28
 80085ee:	4403      	add	r3, r0
 80085f0:	9305      	str	r3, [sp, #20]
 80085f2:	4405      	add	r5, r0
 80085f4:	4480      	add	r8, r0
 80085f6:	9b05      	ldr	r3, [sp, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dd05      	ble.n	8008608 <_dtoa_r+0x858>
 80085fc:	461a      	mov	r2, r3
 80085fe:	9904      	ldr	r1, [sp, #16]
 8008600:	4620      	mov	r0, r4
 8008602:	f001 f8bb 	bl	800977c <__lshift>
 8008606:	9004      	str	r0, [sp, #16]
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	dd05      	ble.n	800861a <_dtoa_r+0x86a>
 800860e:	4639      	mov	r1, r7
 8008610:	4642      	mov	r2, r8
 8008612:	4620      	mov	r0, r4
 8008614:	f001 f8b2 	bl	800977c <__lshift>
 8008618:	4607      	mov	r7, r0
 800861a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800861c:	b353      	cbz	r3, 8008674 <_dtoa_r+0x8c4>
 800861e:	4639      	mov	r1, r7
 8008620:	9804      	ldr	r0, [sp, #16]
 8008622:	f001 f8ff 	bl	8009824 <__mcmp>
 8008626:	2800      	cmp	r0, #0
 8008628:	da24      	bge.n	8008674 <_dtoa_r+0x8c4>
 800862a:	2300      	movs	r3, #0
 800862c:	220a      	movs	r2, #10
 800862e:	9904      	ldr	r1, [sp, #16]
 8008630:	4620      	mov	r0, r4
 8008632:	f000 feee 	bl	8009412 <__multadd>
 8008636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008638:	9004      	str	r0, [sp, #16]
 800863a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 814d 	beq.w	80088de <_dtoa_r+0xb2e>
 8008644:	2300      	movs	r3, #0
 8008646:	4631      	mov	r1, r6
 8008648:	220a      	movs	r2, #10
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fee1 	bl	8009412 <__multadd>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	4606      	mov	r6, r0
 8008656:	dc4f      	bgt.n	80086f8 <_dtoa_r+0x948>
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	2b02      	cmp	r3, #2
 800865c:	dd4c      	ble.n	80086f8 <_dtoa_r+0x948>
 800865e:	e011      	b.n	8008684 <_dtoa_r+0x8d4>
 8008660:	d0c9      	beq.n	80085f6 <_dtoa_r+0x846>
 8008662:	9a05      	ldr	r2, [sp, #20]
 8008664:	331c      	adds	r3, #28
 8008666:	441a      	add	r2, r3
 8008668:	9205      	str	r2, [sp, #20]
 800866a:	441d      	add	r5, r3
 800866c:	4498      	add	r8, r3
 800866e:	e7c2      	b.n	80085f6 <_dtoa_r+0x846>
 8008670:	4603      	mov	r3, r0
 8008672:	e7f6      	b.n	8008662 <_dtoa_r+0x8b2>
 8008674:	f1b9 0f00 	cmp.w	r9, #0
 8008678:	dc38      	bgt.n	80086ec <_dtoa_r+0x93c>
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	2b02      	cmp	r3, #2
 800867e:	dd35      	ble.n	80086ec <_dtoa_r+0x93c>
 8008680:	f8cd 9008 	str.w	r9, [sp, #8]
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	b963      	cbnz	r3, 80086a2 <_dtoa_r+0x8f2>
 8008688:	4639      	mov	r1, r7
 800868a:	2205      	movs	r2, #5
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fec0 	bl	8009412 <__multadd>
 8008692:	4601      	mov	r1, r0
 8008694:	4607      	mov	r7, r0
 8008696:	9804      	ldr	r0, [sp, #16]
 8008698:	f001 f8c4 	bl	8009824 <__mcmp>
 800869c:	2800      	cmp	r0, #0
 800869e:	f73f adcc 	bgt.w	800823a <_dtoa_r+0x48a>
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	465d      	mov	r5, fp
 80086a6:	ea6f 0a03 	mvn.w	sl, r3
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	4639      	mov	r1, r7
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fe97 	bl	80093e4 <_Bfree>
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	f43f aeb7 	beq.w	800842a <_dtoa_r+0x67a>
 80086bc:	f1b9 0f00 	cmp.w	r9, #0
 80086c0:	d005      	beq.n	80086ce <_dtoa_r+0x91e>
 80086c2:	45b1      	cmp	r9, r6
 80086c4:	d003      	beq.n	80086ce <_dtoa_r+0x91e>
 80086c6:	4649      	mov	r1, r9
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fe8b 	bl	80093e4 <_Bfree>
 80086ce:	4631      	mov	r1, r6
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fe87 	bl	80093e4 <_Bfree>
 80086d6:	e6a8      	b.n	800842a <_dtoa_r+0x67a>
 80086d8:	2700      	movs	r7, #0
 80086da:	463e      	mov	r6, r7
 80086dc:	e7e1      	b.n	80086a2 <_dtoa_r+0x8f2>
 80086de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086e2:	463e      	mov	r6, r7
 80086e4:	e5a9      	b.n	800823a <_dtoa_r+0x48a>
 80086e6:	bf00      	nop
 80086e8:	40240000 	.word	0x40240000
 80086ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80fa 	beq.w	80088ec <_dtoa_r+0xb3c>
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	dd05      	ble.n	8008708 <_dtoa_r+0x958>
 80086fc:	4631      	mov	r1, r6
 80086fe:	462a      	mov	r2, r5
 8008700:	4620      	mov	r0, r4
 8008702:	f001 f83b 	bl	800977c <__lshift>
 8008706:	4606      	mov	r6, r0
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d04c      	beq.n	80087a8 <_dtoa_r+0x9f8>
 800870e:	6871      	ldr	r1, [r6, #4]
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fe33 	bl	800937c <_Balloc>
 8008716:	6932      	ldr	r2, [r6, #16]
 8008718:	3202      	adds	r2, #2
 800871a:	4605      	mov	r5, r0
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	f106 010c 	add.w	r1, r6, #12
 8008722:	300c      	adds	r0, #12
 8008724:	f7fd fec6 	bl	80064b4 <memcpy>
 8008728:	2201      	movs	r2, #1
 800872a:	4629      	mov	r1, r5
 800872c:	4620      	mov	r0, r4
 800872e:	f001 f825 	bl	800977c <__lshift>
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	f8cd b014 	str.w	fp, [sp, #20]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	46b1      	mov	r9, r6
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	4606      	mov	r6, r0
 8008742:	4639      	mov	r1, r7
 8008744:	9804      	ldr	r0, [sp, #16]
 8008746:	f7ff faa7 	bl	8007c98 <quorem>
 800874a:	4649      	mov	r1, r9
 800874c:	4605      	mov	r5, r0
 800874e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008752:	9804      	ldr	r0, [sp, #16]
 8008754:	f001 f866 	bl	8009824 <__mcmp>
 8008758:	4632      	mov	r2, r6
 800875a:	9000      	str	r0, [sp, #0]
 800875c:	4639      	mov	r1, r7
 800875e:	4620      	mov	r0, r4
 8008760:	f001 f87a 	bl	8009858 <__mdiff>
 8008764:	68c3      	ldr	r3, [r0, #12]
 8008766:	4602      	mov	r2, r0
 8008768:	bb03      	cbnz	r3, 80087ac <_dtoa_r+0x9fc>
 800876a:	4601      	mov	r1, r0
 800876c:	9008      	str	r0, [sp, #32]
 800876e:	9804      	ldr	r0, [sp, #16]
 8008770:	f001 f858 	bl	8009824 <__mcmp>
 8008774:	9a08      	ldr	r2, [sp, #32]
 8008776:	4603      	mov	r3, r0
 8008778:	4611      	mov	r1, r2
 800877a:	4620      	mov	r0, r4
 800877c:	9308      	str	r3, [sp, #32]
 800877e:	f000 fe31 	bl	80093e4 <_Bfree>
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	b9a3      	cbnz	r3, 80087b0 <_dtoa_r+0xa00>
 8008786:	9a06      	ldr	r2, [sp, #24]
 8008788:	b992      	cbnz	r2, 80087b0 <_dtoa_r+0xa00>
 800878a:	9a07      	ldr	r2, [sp, #28]
 800878c:	b982      	cbnz	r2, 80087b0 <_dtoa_r+0xa00>
 800878e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008792:	d029      	beq.n	80087e8 <_dtoa_r+0xa38>
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dd01      	ble.n	800879e <_dtoa_r+0x9ee>
 800879a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800879e:	9b05      	ldr	r3, [sp, #20]
 80087a0:	1c5d      	adds	r5, r3, #1
 80087a2:	f883 8000 	strb.w	r8, [r3]
 80087a6:	e782      	b.n	80086ae <_dtoa_r+0x8fe>
 80087a8:	4630      	mov	r0, r6
 80087aa:	e7c2      	b.n	8008732 <_dtoa_r+0x982>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e7e3      	b.n	8008778 <_dtoa_r+0x9c8>
 80087b0:	9a00      	ldr	r2, [sp, #0]
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	db04      	blt.n	80087c0 <_dtoa_r+0xa10>
 80087b6:	d125      	bne.n	8008804 <_dtoa_r+0xa54>
 80087b8:	9a06      	ldr	r2, [sp, #24]
 80087ba:	bb1a      	cbnz	r2, 8008804 <_dtoa_r+0xa54>
 80087bc:	9a07      	ldr	r2, [sp, #28]
 80087be:	bb0a      	cbnz	r2, 8008804 <_dtoa_r+0xa54>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	ddec      	ble.n	800879e <_dtoa_r+0x9ee>
 80087c4:	2201      	movs	r2, #1
 80087c6:	9904      	ldr	r1, [sp, #16]
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 ffd7 	bl	800977c <__lshift>
 80087ce:	4639      	mov	r1, r7
 80087d0:	9004      	str	r0, [sp, #16]
 80087d2:	f001 f827 	bl	8009824 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	dc03      	bgt.n	80087e2 <_dtoa_r+0xa32>
 80087da:	d1e0      	bne.n	800879e <_dtoa_r+0x9ee>
 80087dc:	f018 0f01 	tst.w	r8, #1
 80087e0:	d0dd      	beq.n	800879e <_dtoa_r+0x9ee>
 80087e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087e6:	d1d8      	bne.n	800879a <_dtoa_r+0x9ea>
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	9a05      	ldr	r2, [sp, #20]
 80087ec:	1c5d      	adds	r5, r3, #1
 80087ee:	2339      	movs	r3, #57	; 0x39
 80087f0:	7013      	strb	r3, [r2, #0]
 80087f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087f6:	2b39      	cmp	r3, #57	; 0x39
 80087f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80087fc:	d04f      	beq.n	800889e <_dtoa_r+0xaee>
 80087fe:	3301      	adds	r3, #1
 8008800:	7013      	strb	r3, [r2, #0]
 8008802:	e754      	b.n	80086ae <_dtoa_r+0x8fe>
 8008804:	9a05      	ldr	r2, [sp, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f102 0501 	add.w	r5, r2, #1
 800880c:	dd06      	ble.n	800881c <_dtoa_r+0xa6c>
 800880e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008812:	d0e9      	beq.n	80087e8 <_dtoa_r+0xa38>
 8008814:	f108 0801 	add.w	r8, r8, #1
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	e7c2      	b.n	80087a2 <_dtoa_r+0x9f2>
 800881c:	9a02      	ldr	r2, [sp, #8]
 800881e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008822:	eba5 030b 	sub.w	r3, r5, fp
 8008826:	4293      	cmp	r3, r2
 8008828:	d021      	beq.n	800886e <_dtoa_r+0xabe>
 800882a:	2300      	movs	r3, #0
 800882c:	220a      	movs	r2, #10
 800882e:	9904      	ldr	r1, [sp, #16]
 8008830:	4620      	mov	r0, r4
 8008832:	f000 fdee 	bl	8009412 <__multadd>
 8008836:	45b1      	cmp	r9, r6
 8008838:	9004      	str	r0, [sp, #16]
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	f04f 020a 	mov.w	r2, #10
 8008842:	4649      	mov	r1, r9
 8008844:	4620      	mov	r0, r4
 8008846:	d105      	bne.n	8008854 <_dtoa_r+0xaa4>
 8008848:	f000 fde3 	bl	8009412 <__multadd>
 800884c:	4681      	mov	r9, r0
 800884e:	4606      	mov	r6, r0
 8008850:	9505      	str	r5, [sp, #20]
 8008852:	e776      	b.n	8008742 <_dtoa_r+0x992>
 8008854:	f000 fddd 	bl	8009412 <__multadd>
 8008858:	4631      	mov	r1, r6
 800885a:	4681      	mov	r9, r0
 800885c:	2300      	movs	r3, #0
 800885e:	220a      	movs	r2, #10
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fdd6 	bl	8009412 <__multadd>
 8008866:	4606      	mov	r6, r0
 8008868:	e7f2      	b.n	8008850 <_dtoa_r+0xaa0>
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	2201      	movs	r2, #1
 8008870:	9904      	ldr	r1, [sp, #16]
 8008872:	4620      	mov	r0, r4
 8008874:	f000 ff82 	bl	800977c <__lshift>
 8008878:	4639      	mov	r1, r7
 800887a:	9004      	str	r0, [sp, #16]
 800887c:	f000 ffd2 	bl	8009824 <__mcmp>
 8008880:	2800      	cmp	r0, #0
 8008882:	dcb6      	bgt.n	80087f2 <_dtoa_r+0xa42>
 8008884:	d102      	bne.n	800888c <_dtoa_r+0xadc>
 8008886:	f018 0f01 	tst.w	r8, #1
 800888a:	d1b2      	bne.n	80087f2 <_dtoa_r+0xa42>
 800888c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008890:	2b30      	cmp	r3, #48	; 0x30
 8008892:	f105 32ff 	add.w	r2, r5, #4294967295
 8008896:	f47f af0a 	bne.w	80086ae <_dtoa_r+0x8fe>
 800889a:	4615      	mov	r5, r2
 800889c:	e7f6      	b.n	800888c <_dtoa_r+0xadc>
 800889e:	4593      	cmp	fp, r2
 80088a0:	d105      	bne.n	80088ae <_dtoa_r+0xafe>
 80088a2:	2331      	movs	r3, #49	; 0x31
 80088a4:	f10a 0a01 	add.w	sl, sl, #1
 80088a8:	f88b 3000 	strb.w	r3, [fp]
 80088ac:	e6ff      	b.n	80086ae <_dtoa_r+0x8fe>
 80088ae:	4615      	mov	r5, r2
 80088b0:	e79f      	b.n	80087f2 <_dtoa_r+0xa42>
 80088b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008918 <_dtoa_r+0xb68>
 80088b6:	e007      	b.n	80088c8 <_dtoa_r+0xb18>
 80088b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800891c <_dtoa_r+0xb6c>
 80088be:	b11b      	cbz	r3, 80088c8 <_dtoa_r+0xb18>
 80088c0:	f10b 0308 	add.w	r3, fp, #8
 80088c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4658      	mov	r0, fp
 80088ca:	b017      	add	sp, #92	; 0x5c
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d0:	9b06      	ldr	r3, [sp, #24]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	f77f ae35 	ble.w	8008542 <_dtoa_r+0x792>
 80088d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088da:	9307      	str	r3, [sp, #28]
 80088dc:	e649      	b.n	8008572 <_dtoa_r+0x7c2>
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dc03      	bgt.n	80088ec <_dtoa_r+0xb3c>
 80088e4:	9b06      	ldr	r3, [sp, #24]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	f73f aecc 	bgt.w	8008684 <_dtoa_r+0x8d4>
 80088ec:	465d      	mov	r5, fp
 80088ee:	4639      	mov	r1, r7
 80088f0:	9804      	ldr	r0, [sp, #16]
 80088f2:	f7ff f9d1 	bl	8007c98 <quorem>
 80088f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088fa:	f805 8b01 	strb.w	r8, [r5], #1
 80088fe:	9a02      	ldr	r2, [sp, #8]
 8008900:	eba5 030b 	sub.w	r3, r5, fp
 8008904:	429a      	cmp	r2, r3
 8008906:	ddb0      	ble.n	800886a <_dtoa_r+0xaba>
 8008908:	2300      	movs	r3, #0
 800890a:	220a      	movs	r2, #10
 800890c:	9904      	ldr	r1, [sp, #16]
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fd7f 	bl	8009412 <__multadd>
 8008914:	9004      	str	r0, [sp, #16]
 8008916:	e7ea      	b.n	80088ee <_dtoa_r+0xb3e>
 8008918:	0800ac0c 	.word	0x0800ac0c
 800891c:	0800ac80 	.word	0x0800ac80

08008920 <__sflush_r>:
 8008920:	898a      	ldrh	r2, [r1, #12]
 8008922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	4605      	mov	r5, r0
 8008928:	0710      	lsls	r0, r2, #28
 800892a:	460c      	mov	r4, r1
 800892c:	d458      	bmi.n	80089e0 <__sflush_r+0xc0>
 800892e:	684b      	ldr	r3, [r1, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc05      	bgt.n	8008940 <__sflush_r+0x20>
 8008934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	dc02      	bgt.n	8008940 <__sflush_r+0x20>
 800893a:	2000      	movs	r0, #0
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008942:	2e00      	cmp	r6, #0
 8008944:	d0f9      	beq.n	800893a <__sflush_r+0x1a>
 8008946:	2300      	movs	r3, #0
 8008948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800894c:	682f      	ldr	r7, [r5, #0]
 800894e:	6a21      	ldr	r1, [r4, #32]
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	d032      	beq.n	80089ba <__sflush_r+0x9a>
 8008954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	075a      	lsls	r2, r3, #29
 800895a:	d505      	bpl.n	8008968 <__sflush_r+0x48>
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	1ac0      	subs	r0, r0, r3
 8008960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008962:	b10b      	cbz	r3, 8008968 <__sflush_r+0x48>
 8008964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008966:	1ac0      	subs	r0, r0, r3
 8008968:	2300      	movs	r3, #0
 800896a:	4602      	mov	r2, r0
 800896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896e:	6a21      	ldr	r1, [r4, #32]
 8008970:	4628      	mov	r0, r5
 8008972:	47b0      	blx	r6
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	d106      	bne.n	8008988 <__sflush_r+0x68>
 800897a:	6829      	ldr	r1, [r5, #0]
 800897c:	291d      	cmp	r1, #29
 800897e:	d848      	bhi.n	8008a12 <__sflush_r+0xf2>
 8008980:	4a29      	ldr	r2, [pc, #164]	; (8008a28 <__sflush_r+0x108>)
 8008982:	40ca      	lsrs	r2, r1
 8008984:	07d6      	lsls	r6, r2, #31
 8008986:	d544      	bpl.n	8008a12 <__sflush_r+0xf2>
 8008988:	2200      	movs	r2, #0
 800898a:	6062      	str	r2, [r4, #4]
 800898c:	04d9      	lsls	r1, r3, #19
 800898e:	6922      	ldr	r2, [r4, #16]
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	d504      	bpl.n	800899e <__sflush_r+0x7e>
 8008994:	1c42      	adds	r2, r0, #1
 8008996:	d101      	bne.n	800899c <__sflush_r+0x7c>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b903      	cbnz	r3, 800899e <__sflush_r+0x7e>
 800899c:	6560      	str	r0, [r4, #84]	; 0x54
 800899e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a0:	602f      	str	r7, [r5, #0]
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d0c9      	beq.n	800893a <__sflush_r+0x1a>
 80089a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089aa:	4299      	cmp	r1, r3
 80089ac:	d002      	beq.n	80089b4 <__sflush_r+0x94>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f001 f8f2 	bl	8009b98 <_free_r>
 80089b4:	2000      	movs	r0, #0
 80089b6:	6360      	str	r0, [r4, #52]	; 0x34
 80089b8:	e7c0      	b.n	800893c <__sflush_r+0x1c>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4628      	mov	r0, r5
 80089be:	47b0      	blx	r6
 80089c0:	1c41      	adds	r1, r0, #1
 80089c2:	d1c8      	bne.n	8008956 <__sflush_r+0x36>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0c5      	beq.n	8008956 <__sflush_r+0x36>
 80089ca:	2b1d      	cmp	r3, #29
 80089cc:	d001      	beq.n	80089d2 <__sflush_r+0xb2>
 80089ce:	2b16      	cmp	r3, #22
 80089d0:	d101      	bne.n	80089d6 <__sflush_r+0xb6>
 80089d2:	602f      	str	r7, [r5, #0]
 80089d4:	e7b1      	b.n	800893a <__sflush_r+0x1a>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	e7ad      	b.n	800893c <__sflush_r+0x1c>
 80089e0:	690f      	ldr	r7, [r1, #16]
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	d0a9      	beq.n	800893a <__sflush_r+0x1a>
 80089e6:	0793      	lsls	r3, r2, #30
 80089e8:	680e      	ldr	r6, [r1, #0]
 80089ea:	bf08      	it	eq
 80089ec:	694b      	ldreq	r3, [r1, #20]
 80089ee:	600f      	str	r7, [r1, #0]
 80089f0:	bf18      	it	ne
 80089f2:	2300      	movne	r3, #0
 80089f4:	eba6 0807 	sub.w	r8, r6, r7
 80089f8:	608b      	str	r3, [r1, #8]
 80089fa:	f1b8 0f00 	cmp.w	r8, #0
 80089fe:	dd9c      	ble.n	800893a <__sflush_r+0x1a>
 8008a00:	4643      	mov	r3, r8
 8008a02:	463a      	mov	r2, r7
 8008a04:	6a21      	ldr	r1, [r4, #32]
 8008a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b0      	blx	r6
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	dc06      	bgt.n	8008a1e <__sflush_r+0xfe>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	e78e      	b.n	800893c <__sflush_r+0x1c>
 8008a1e:	4407      	add	r7, r0
 8008a20:	eba8 0800 	sub.w	r8, r8, r0
 8008a24:	e7e9      	b.n	80089fa <__sflush_r+0xda>
 8008a26:	bf00      	nop
 8008a28:	20400001 	.word	0x20400001

08008a2c <_fflush_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	690b      	ldr	r3, [r1, #16]
 8008a30:	4605      	mov	r5, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b1db      	cbz	r3, 8008a6e <_fflush_r+0x42>
 8008a36:	b118      	cbz	r0, 8008a40 <_fflush_r+0x14>
 8008a38:	6983      	ldr	r3, [r0, #24]
 8008a3a:	b90b      	cbnz	r3, 8008a40 <_fflush_r+0x14>
 8008a3c:	f000 f860 	bl	8008b00 <__sinit>
 8008a40:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <_fflush_r+0x48>)
 8008a42:	429c      	cmp	r4, r3
 8008a44:	d109      	bne.n	8008a5a <_fflush_r+0x2e>
 8008a46:	686c      	ldr	r4, [r5, #4]
 8008a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4c:	b17b      	cbz	r3, 8008a6e <_fflush_r+0x42>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a56:	f7ff bf63 	b.w	8008920 <__sflush_r>
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <_fflush_r+0x4c>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	d101      	bne.n	8008a64 <_fflush_r+0x38>
 8008a60:	68ac      	ldr	r4, [r5, #8]
 8008a62:	e7f1      	b.n	8008a48 <_fflush_r+0x1c>
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <_fflush_r+0x50>)
 8008a66:	429c      	cmp	r4, r3
 8008a68:	bf08      	it	eq
 8008a6a:	68ec      	ldreq	r4, [r5, #12]
 8008a6c:	e7ec      	b.n	8008a48 <_fflush_r+0x1c>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	bd38      	pop	{r3, r4, r5, pc}
 8008a72:	bf00      	nop
 8008a74:	0800acb0 	.word	0x0800acb0
 8008a78:	0800acd0 	.word	0x0800acd0
 8008a7c:	0800ac90 	.word	0x0800ac90

08008a80 <std>:
 8008a80:	2300      	movs	r3, #0
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8a:	6083      	str	r3, [r0, #8]
 8008a8c:	8181      	strh	r1, [r0, #12]
 8008a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a90:	81c2      	strh	r2, [r0, #14]
 8008a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a96:	6183      	str	r3, [r0, #24]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	305c      	adds	r0, #92	; 0x5c
 8008a9e:	f7fd fd14 	bl	80064ca <memset>
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x38>)
 8008aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x3c>)
 8008aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x40>)
 8008aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <std+0x44>)
 8008ab0:	6224      	str	r4, [r4, #32]
 8008ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	0800a22d 	.word	0x0800a22d
 8008abc:	0800a24f 	.word	0x0800a24f
 8008ac0:	0800a287 	.word	0x0800a287
 8008ac4:	0800a2ab 	.word	0x0800a2ab

08008ac8 <_cleanup_r>:
 8008ac8:	4901      	ldr	r1, [pc, #4]	; (8008ad0 <_cleanup_r+0x8>)
 8008aca:	f000 b885 	b.w	8008bd8 <_fwalk_reent>
 8008ace:	bf00      	nop
 8008ad0:	08008a2d 	.word	0x08008a2d

08008ad4 <__sfmoreglue>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	1e4a      	subs	r2, r1, #1
 8008ad8:	2568      	movs	r5, #104	; 0x68
 8008ada:	4355      	muls	r5, r2
 8008adc:	460e      	mov	r6, r1
 8008ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ae2:	f001 f8a7 	bl	8009c34 <_malloc_r>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	b140      	cbz	r0, 8008afc <__sfmoreglue+0x28>
 8008aea:	2100      	movs	r1, #0
 8008aec:	e9c0 1600 	strd	r1, r6, [r0]
 8008af0:	300c      	adds	r0, #12
 8008af2:	60a0      	str	r0, [r4, #8]
 8008af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af8:	f7fd fce7 	bl	80064ca <memset>
 8008afc:	4620      	mov	r0, r4
 8008afe:	bd70      	pop	{r4, r5, r6, pc}

08008b00 <__sinit>:
 8008b00:	6983      	ldr	r3, [r0, #24]
 8008b02:	b510      	push	{r4, lr}
 8008b04:	4604      	mov	r4, r0
 8008b06:	bb33      	cbnz	r3, 8008b56 <__sinit+0x56>
 8008b08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b0c:	6503      	str	r3, [r0, #80]	; 0x50
 8008b0e:	4b12      	ldr	r3, [pc, #72]	; (8008b58 <__sinit+0x58>)
 8008b10:	4a12      	ldr	r2, [pc, #72]	; (8008b5c <__sinit+0x5c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6282      	str	r2, [r0, #40]	; 0x28
 8008b16:	4298      	cmp	r0, r3
 8008b18:	bf04      	itt	eq
 8008b1a:	2301      	moveq	r3, #1
 8008b1c:	6183      	streq	r3, [r0, #24]
 8008b1e:	f000 f81f 	bl	8008b60 <__sfp>
 8008b22:	6060      	str	r0, [r4, #4]
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f81b 	bl	8008b60 <__sfp>
 8008b2a:	60a0      	str	r0, [r4, #8]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 f817 	bl	8008b60 <__sfp>
 8008b32:	2200      	movs	r2, #0
 8008b34:	60e0      	str	r0, [r4, #12]
 8008b36:	2104      	movs	r1, #4
 8008b38:	6860      	ldr	r0, [r4, #4]
 8008b3a:	f7ff ffa1 	bl	8008a80 <std>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	2109      	movs	r1, #9
 8008b42:	68a0      	ldr	r0, [r4, #8]
 8008b44:	f7ff ff9c 	bl	8008a80 <std>
 8008b48:	2202      	movs	r2, #2
 8008b4a:	2112      	movs	r1, #18
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	f7ff ff97 	bl	8008a80 <std>
 8008b52:	2301      	movs	r3, #1
 8008b54:	61a3      	str	r3, [r4, #24]
 8008b56:	bd10      	pop	{r4, pc}
 8008b58:	0800abf8 	.word	0x0800abf8
 8008b5c:	08008ac9 	.word	0x08008ac9

08008b60 <__sfp>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <__sfp+0x70>)
 8008b64:	681e      	ldr	r6, [r3, #0]
 8008b66:	69b3      	ldr	r3, [r6, #24]
 8008b68:	4607      	mov	r7, r0
 8008b6a:	b913      	cbnz	r3, 8008b72 <__sfp+0x12>
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f7ff ffc7 	bl	8008b00 <__sinit>
 8008b72:	3648      	adds	r6, #72	; 0x48
 8008b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	d503      	bpl.n	8008b84 <__sfp+0x24>
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	b133      	cbz	r3, 8008b8e <__sfp+0x2e>
 8008b80:	6836      	ldr	r6, [r6, #0]
 8008b82:	e7f7      	b.n	8008b74 <__sfp+0x14>
 8008b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b88:	b16d      	cbz	r5, 8008ba6 <__sfp+0x46>
 8008b8a:	3468      	adds	r4, #104	; 0x68
 8008b8c:	e7f4      	b.n	8008b78 <__sfp+0x18>
 8008b8e:	2104      	movs	r1, #4
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff ff9f 	bl	8008ad4 <__sfmoreglue>
 8008b96:	6030      	str	r0, [r6, #0]
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d1f1      	bne.n	8008b80 <__sfp+0x20>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <__sfp+0x74>)
 8008ba8:	6665      	str	r5, [r4, #100]	; 0x64
 8008baa:	e9c4 5500 	strd	r5, r5, [r4]
 8008bae:	60a5      	str	r5, [r4, #8]
 8008bb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008bb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc0:	f7fd fc83 	bl	80064ca <memset>
 8008bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bcc:	e7e9      	b.n	8008ba2 <__sfp+0x42>
 8008bce:	bf00      	nop
 8008bd0:	0800abf8 	.word	0x0800abf8
 8008bd4:	ffff0001 	.word	0xffff0001

08008bd8 <_fwalk_reent>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4689      	mov	r9, r1
 8008be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008be4:	2600      	movs	r6, #0
 8008be6:	b914      	cbnz	r4, 8008bee <_fwalk_reent+0x16>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008bf2:	3f01      	subs	r7, #1
 8008bf4:	d501      	bpl.n	8008bfa <_fwalk_reent+0x22>
 8008bf6:	6824      	ldr	r4, [r4, #0]
 8008bf8:	e7f5      	b.n	8008be6 <_fwalk_reent+0xe>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d907      	bls.n	8008c10 <_fwalk_reent+0x38>
 8008c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c04:	3301      	adds	r3, #1
 8008c06:	d003      	beq.n	8008c10 <_fwalk_reent+0x38>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	47c8      	blx	r9
 8008c0e:	4306      	orrs	r6, r0
 8008c10:	3568      	adds	r5, #104	; 0x68
 8008c12:	e7ee      	b.n	8008bf2 <_fwalk_reent+0x1a>

08008c14 <rshift>:
 8008c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c16:	6906      	ldr	r6, [r0, #16]
 8008c18:	114b      	asrs	r3, r1, #5
 8008c1a:	429e      	cmp	r6, r3
 8008c1c:	f100 0414 	add.w	r4, r0, #20
 8008c20:	dd30      	ble.n	8008c84 <rshift+0x70>
 8008c22:	f011 011f 	ands.w	r1, r1, #31
 8008c26:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008c2a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008c2e:	d108      	bne.n	8008c42 <rshift+0x2e>
 8008c30:	4621      	mov	r1, r4
 8008c32:	42b2      	cmp	r2, r6
 8008c34:	460b      	mov	r3, r1
 8008c36:	d211      	bcs.n	8008c5c <rshift+0x48>
 8008c38:	f852 3b04 	ldr.w	r3, [r2], #4
 8008c3c:	f841 3b04 	str.w	r3, [r1], #4
 8008c40:	e7f7      	b.n	8008c32 <rshift+0x1e>
 8008c42:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008c46:	f1c1 0c20 	rsb	ip, r1, #32
 8008c4a:	40cd      	lsrs	r5, r1
 8008c4c:	3204      	adds	r2, #4
 8008c4e:	4623      	mov	r3, r4
 8008c50:	42b2      	cmp	r2, r6
 8008c52:	4617      	mov	r7, r2
 8008c54:	d30c      	bcc.n	8008c70 <rshift+0x5c>
 8008c56:	601d      	str	r5, [r3, #0]
 8008c58:	b105      	cbz	r5, 8008c5c <rshift+0x48>
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	1b1a      	subs	r2, r3, r4
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c64:	bf08      	it	eq
 8008c66:	2300      	moveq	r3, #0
 8008c68:	6102      	str	r2, [r0, #16]
 8008c6a:	bf08      	it	eq
 8008c6c:	6143      	streq	r3, [r0, #20]
 8008c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c70:	683f      	ldr	r7, [r7, #0]
 8008c72:	fa07 f70c 	lsl.w	r7, r7, ip
 8008c76:	433d      	orrs	r5, r7
 8008c78:	f843 5b04 	str.w	r5, [r3], #4
 8008c7c:	f852 5b04 	ldr.w	r5, [r2], #4
 8008c80:	40cd      	lsrs	r5, r1
 8008c82:	e7e5      	b.n	8008c50 <rshift+0x3c>
 8008c84:	4623      	mov	r3, r4
 8008c86:	e7e9      	b.n	8008c5c <rshift+0x48>

08008c88 <__hexdig_fun>:
 8008c88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d802      	bhi.n	8008c96 <__hexdig_fun+0xe>
 8008c90:	3820      	subs	r0, #32
 8008c92:	b2c0      	uxtb	r0, r0
 8008c94:	4770      	bx	lr
 8008c96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c9a:	2b05      	cmp	r3, #5
 8008c9c:	d801      	bhi.n	8008ca2 <__hexdig_fun+0x1a>
 8008c9e:	3847      	subs	r0, #71	; 0x47
 8008ca0:	e7f7      	b.n	8008c92 <__hexdig_fun+0xa>
 8008ca2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ca6:	2b05      	cmp	r3, #5
 8008ca8:	d801      	bhi.n	8008cae <__hexdig_fun+0x26>
 8008caa:	3827      	subs	r0, #39	; 0x27
 8008cac:	e7f1      	b.n	8008c92 <__hexdig_fun+0xa>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	4770      	bx	lr

08008cb2 <__gethex>:
 8008cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb6:	b08b      	sub	sp, #44	; 0x2c
 8008cb8:	468a      	mov	sl, r1
 8008cba:	9002      	str	r0, [sp, #8]
 8008cbc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008cbe:	9306      	str	r3, [sp, #24]
 8008cc0:	4690      	mov	r8, r2
 8008cc2:	f000 facd 	bl	8009260 <__localeconv_l>
 8008cc6:	6803      	ldr	r3, [r0, #0]
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f7 faa0 	bl	8000210 <strlen>
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	9001      	str	r0, [sp, #4]
 8008cd4:	4403      	add	r3, r0
 8008cd6:	f04f 0b00 	mov.w	fp, #0
 8008cda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f8da 3000 	ldr.w	r3, [sl]
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	461f      	mov	r7, r3
 8008ce8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008cec:	2830      	cmp	r0, #48	; 0x30
 8008cee:	d06c      	beq.n	8008dca <__gethex+0x118>
 8008cf0:	f7ff ffca 	bl	8008c88 <__hexdig_fun>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d16a      	bne.n	8008dd0 <__gethex+0x11e>
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	9903      	ldr	r1, [sp, #12]
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f001 fad7 	bl	800a2b2 <strncmp>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d166      	bne.n	8008dd6 <__gethex+0x124>
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	5cf8      	ldrb	r0, [r7, r3]
 8008d0c:	18fe      	adds	r6, r7, r3
 8008d0e:	f7ff ffbb 	bl	8008c88 <__hexdig_fun>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d062      	beq.n	8008ddc <__gethex+0x12a>
 8008d16:	4633      	mov	r3, r6
 8008d18:	7818      	ldrb	r0, [r3, #0]
 8008d1a:	2830      	cmp	r0, #48	; 0x30
 8008d1c:	461f      	mov	r7, r3
 8008d1e:	f103 0301 	add.w	r3, r3, #1
 8008d22:	d0f9      	beq.n	8008d18 <__gethex+0x66>
 8008d24:	f7ff ffb0 	bl	8008c88 <__hexdig_fun>
 8008d28:	fab0 f580 	clz	r5, r0
 8008d2c:	096d      	lsrs	r5, r5, #5
 8008d2e:	4634      	mov	r4, r6
 8008d30:	f04f 0b01 	mov.w	fp, #1
 8008d34:	463a      	mov	r2, r7
 8008d36:	4616      	mov	r6, r2
 8008d38:	3201      	adds	r2, #1
 8008d3a:	7830      	ldrb	r0, [r6, #0]
 8008d3c:	f7ff ffa4 	bl	8008c88 <__hexdig_fun>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d1f8      	bne.n	8008d36 <__gethex+0x84>
 8008d44:	9a01      	ldr	r2, [sp, #4]
 8008d46:	9903      	ldr	r1, [sp, #12]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f001 fab2 	bl	800a2b2 <strncmp>
 8008d4e:	b950      	cbnz	r0, 8008d66 <__gethex+0xb4>
 8008d50:	b954      	cbnz	r4, 8008d68 <__gethex+0xb6>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	18f4      	adds	r4, r6, r3
 8008d56:	4622      	mov	r2, r4
 8008d58:	4616      	mov	r6, r2
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	7830      	ldrb	r0, [r6, #0]
 8008d5e:	f7ff ff93 	bl	8008c88 <__hexdig_fun>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d1f8      	bne.n	8008d58 <__gethex+0xa6>
 8008d66:	b10c      	cbz	r4, 8008d6c <__gethex+0xba>
 8008d68:	1ba4      	subs	r4, r4, r6
 8008d6a:	00a4      	lsls	r4, r4, #2
 8008d6c:	7833      	ldrb	r3, [r6, #0]
 8008d6e:	2b50      	cmp	r3, #80	; 0x50
 8008d70:	d001      	beq.n	8008d76 <__gethex+0xc4>
 8008d72:	2b70      	cmp	r3, #112	; 0x70
 8008d74:	d140      	bne.n	8008df8 <__gethex+0x146>
 8008d76:	7873      	ldrb	r3, [r6, #1]
 8008d78:	2b2b      	cmp	r3, #43	; 0x2b
 8008d7a:	d031      	beq.n	8008de0 <__gethex+0x12e>
 8008d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8008d7e:	d033      	beq.n	8008de8 <__gethex+0x136>
 8008d80:	1c71      	adds	r1, r6, #1
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	7808      	ldrb	r0, [r1, #0]
 8008d88:	f7ff ff7e 	bl	8008c88 <__hexdig_fun>
 8008d8c:	1e43      	subs	r3, r0, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b18      	cmp	r3, #24
 8008d92:	d831      	bhi.n	8008df8 <__gethex+0x146>
 8008d94:	f1a0 0210 	sub.w	r2, r0, #16
 8008d98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d9c:	f7ff ff74 	bl	8008c88 <__hexdig_fun>
 8008da0:	1e43      	subs	r3, r0, #1
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b18      	cmp	r3, #24
 8008da6:	d922      	bls.n	8008dee <__gethex+0x13c>
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	d000      	beq.n	8008db0 <__gethex+0xfe>
 8008dae:	4252      	negs	r2, r2
 8008db0:	4414      	add	r4, r2
 8008db2:	f8ca 1000 	str.w	r1, [sl]
 8008db6:	b30d      	cbz	r5, 8008dfc <__gethex+0x14a>
 8008db8:	f1bb 0f00 	cmp.w	fp, #0
 8008dbc:	bf0c      	ite	eq
 8008dbe:	2706      	moveq	r7, #6
 8008dc0:	2700      	movne	r7, #0
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	b00b      	add	sp, #44	; 0x2c
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	f10b 0b01 	add.w	fp, fp, #1
 8008dce:	e78a      	b.n	8008ce6 <__gethex+0x34>
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	462c      	mov	r4, r5
 8008dd4:	e7ae      	b.n	8008d34 <__gethex+0x82>
 8008dd6:	463e      	mov	r6, r7
 8008dd8:	2501      	movs	r5, #1
 8008dda:	e7c7      	b.n	8008d6c <__gethex+0xba>
 8008ddc:	4604      	mov	r4, r0
 8008dde:	e7fb      	b.n	8008dd8 <__gethex+0x126>
 8008de0:	f04f 0900 	mov.w	r9, #0
 8008de4:	1cb1      	adds	r1, r6, #2
 8008de6:	e7ce      	b.n	8008d86 <__gethex+0xd4>
 8008de8:	f04f 0901 	mov.w	r9, #1
 8008dec:	e7fa      	b.n	8008de4 <__gethex+0x132>
 8008dee:	230a      	movs	r3, #10
 8008df0:	fb03 0202 	mla	r2, r3, r2, r0
 8008df4:	3a10      	subs	r2, #16
 8008df6:	e7cf      	b.n	8008d98 <__gethex+0xe6>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	e7da      	b.n	8008db2 <__gethex+0x100>
 8008dfc:	1bf3      	subs	r3, r6, r7
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	4629      	mov	r1, r5
 8008e02:	2b07      	cmp	r3, #7
 8008e04:	dc49      	bgt.n	8008e9a <__gethex+0x1e8>
 8008e06:	9802      	ldr	r0, [sp, #8]
 8008e08:	f000 fab8 	bl	800937c <_Balloc>
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	f100 0914 	add.w	r9, r0, #20
 8008e12:	f04f 0b00 	mov.w	fp, #0
 8008e16:	f1c3 0301 	rsb	r3, r3, #1
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e20:	46da      	mov	sl, fp
 8008e22:	9308      	str	r3, [sp, #32]
 8008e24:	42b7      	cmp	r7, r6
 8008e26:	d33b      	bcc.n	8008ea0 <__gethex+0x1ee>
 8008e28:	9804      	ldr	r0, [sp, #16]
 8008e2a:	f840 ab04 	str.w	sl, [r0], #4
 8008e2e:	eba0 0009 	sub.w	r0, r0, r9
 8008e32:	1080      	asrs	r0, r0, #2
 8008e34:	6128      	str	r0, [r5, #16]
 8008e36:	0147      	lsls	r7, r0, #5
 8008e38:	4650      	mov	r0, sl
 8008e3a:	f000 fb63 	bl	8009504 <__hi0bits>
 8008e3e:	f8d8 6000 	ldr.w	r6, [r8]
 8008e42:	1a3f      	subs	r7, r7, r0
 8008e44:	42b7      	cmp	r7, r6
 8008e46:	dd64      	ble.n	8008f12 <__gethex+0x260>
 8008e48:	1bbf      	subs	r7, r7, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 fe73 	bl	8009b38 <__any_on>
 8008e52:	4682      	mov	sl, r0
 8008e54:	b178      	cbz	r0, 8008e76 <__gethex+0x1c4>
 8008e56:	1e7b      	subs	r3, r7, #1
 8008e58:	1159      	asrs	r1, r3, #5
 8008e5a:	f003 021f 	and.w	r2, r3, #31
 8008e5e:	f04f 0a01 	mov.w	sl, #1
 8008e62:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e66:	fa0a f202 	lsl.w	r2, sl, r2
 8008e6a:	420a      	tst	r2, r1
 8008e6c:	d003      	beq.n	8008e76 <__gethex+0x1c4>
 8008e6e:	4553      	cmp	r3, sl
 8008e70:	dc46      	bgt.n	8008f00 <__gethex+0x24e>
 8008e72:	f04f 0a02 	mov.w	sl, #2
 8008e76:	4639      	mov	r1, r7
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7ff fecb 	bl	8008c14 <rshift>
 8008e7e:	443c      	add	r4, r7
 8008e80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	da52      	bge.n	8008f2e <__gethex+0x27c>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	9802      	ldr	r0, [sp, #8]
 8008e8c:	f000 faaa 	bl	80093e4 <_Bfree>
 8008e90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e92:	2300      	movs	r3, #0
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	27a3      	movs	r7, #163	; 0xa3
 8008e98:	e793      	b.n	8008dc2 <__gethex+0x110>
 8008e9a:	3101      	adds	r1, #1
 8008e9c:	105b      	asrs	r3, r3, #1
 8008e9e:	e7b0      	b.n	8008e02 <__gethex+0x150>
 8008ea0:	1e73      	subs	r3, r6, #1
 8008ea2:	9305      	str	r3, [sp, #20]
 8008ea4:	9a07      	ldr	r2, [sp, #28]
 8008ea6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d018      	beq.n	8008ee0 <__gethex+0x22e>
 8008eae:	f1bb 0f20 	cmp.w	fp, #32
 8008eb2:	d107      	bne.n	8008ec4 <__gethex+0x212>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	f8c3 a000 	str.w	sl, [r3]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	f04f 0a00 	mov.w	sl, #0
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	46d3      	mov	fp, sl
 8008ec4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ec8:	f7ff fede 	bl	8008c88 <__hexdig_fun>
 8008ecc:	f000 000f 	and.w	r0, r0, #15
 8008ed0:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ed4:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ed8:	f10b 0b04 	add.w	fp, fp, #4
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	e00d      	b.n	8008efc <__gethex+0x24a>
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	9a08      	ldr	r2, [sp, #32]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	42bb      	cmp	r3, r7
 8008ee8:	d3e1      	bcc.n	8008eae <__gethex+0x1fc>
 8008eea:	4618      	mov	r0, r3
 8008eec:	9a01      	ldr	r2, [sp, #4]
 8008eee:	9903      	ldr	r1, [sp, #12]
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef2:	f001 f9de 	bl	800a2b2 <strncmp>
 8008ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d1d8      	bne.n	8008eae <__gethex+0x1fc>
 8008efc:	461e      	mov	r6, r3
 8008efe:	e791      	b.n	8008e24 <__gethex+0x172>
 8008f00:	1eb9      	subs	r1, r7, #2
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 fe18 	bl	8009b38 <__any_on>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d0b2      	beq.n	8008e72 <__gethex+0x1c0>
 8008f0c:	f04f 0a03 	mov.w	sl, #3
 8008f10:	e7b1      	b.n	8008e76 <__gethex+0x1c4>
 8008f12:	da09      	bge.n	8008f28 <__gethex+0x276>
 8008f14:	1bf7      	subs	r7, r6, r7
 8008f16:	4629      	mov	r1, r5
 8008f18:	463a      	mov	r2, r7
 8008f1a:	9802      	ldr	r0, [sp, #8]
 8008f1c:	f000 fc2e 	bl	800977c <__lshift>
 8008f20:	1be4      	subs	r4, r4, r7
 8008f22:	4605      	mov	r5, r0
 8008f24:	f100 0914 	add.w	r9, r0, #20
 8008f28:	f04f 0a00 	mov.w	sl, #0
 8008f2c:	e7a8      	b.n	8008e80 <__gethex+0x1ce>
 8008f2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f32:	42a0      	cmp	r0, r4
 8008f34:	dd6a      	ble.n	800900c <__gethex+0x35a>
 8008f36:	1b04      	subs	r4, r0, r4
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	dc2e      	bgt.n	8008f9a <__gethex+0x2e8>
 8008f3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d022      	beq.n	8008f8a <__gethex+0x2d8>
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d024      	beq.n	8008f92 <__gethex+0x2e0>
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d115      	bne.n	8008f78 <__gethex+0x2c6>
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	d113      	bne.n	8008f78 <__gethex+0x2c6>
 8008f50:	2e01      	cmp	r6, #1
 8008f52:	dc0b      	bgt.n	8008f6c <__gethex+0x2ba>
 8008f54:	9a06      	ldr	r2, [sp, #24]
 8008f56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	612b      	str	r3, [r5, #16]
 8008f60:	f8c9 3000 	str.w	r3, [r9]
 8008f64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f66:	2762      	movs	r7, #98	; 0x62
 8008f68:	601d      	str	r5, [r3, #0]
 8008f6a:	e72a      	b.n	8008dc2 <__gethex+0x110>
 8008f6c:	1e71      	subs	r1, r6, #1
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 fde2 	bl	8009b38 <__any_on>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d1ed      	bne.n	8008f54 <__gethex+0x2a2>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	9802      	ldr	r0, [sp, #8]
 8008f7c:	f000 fa32 	bl	80093e4 <_Bfree>
 8008f80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f82:	2300      	movs	r3, #0
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	2750      	movs	r7, #80	; 0x50
 8008f88:	e71b      	b.n	8008dc2 <__gethex+0x110>
 8008f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d0e1      	beq.n	8008f54 <__gethex+0x2a2>
 8008f90:	e7f2      	b.n	8008f78 <__gethex+0x2c6>
 8008f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1dd      	bne.n	8008f54 <__gethex+0x2a2>
 8008f98:	e7ee      	b.n	8008f78 <__gethex+0x2c6>
 8008f9a:	1e67      	subs	r7, r4, #1
 8008f9c:	f1ba 0f00 	cmp.w	sl, #0
 8008fa0:	d131      	bne.n	8009006 <__gethex+0x354>
 8008fa2:	b127      	cbz	r7, 8008fae <__gethex+0x2fc>
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f000 fdc6 	bl	8009b38 <__any_on>
 8008fac:	4682      	mov	sl, r0
 8008fae:	117a      	asrs	r2, r7, #5
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f007 071f 	and.w	r7, r7, #31
 8008fb6:	fa03 f707 	lsl.w	r7, r3, r7
 8008fba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	421f      	tst	r7, r3
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	bf18      	it	ne
 8008fc6:	f04a 0a02 	orrne.w	sl, sl, #2
 8008fca:	1b36      	subs	r6, r6, r4
 8008fcc:	f7ff fe22 	bl	8008c14 <rshift>
 8008fd0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008fd4:	2702      	movs	r7, #2
 8008fd6:	f1ba 0f00 	cmp.w	sl, #0
 8008fda:	d048      	beq.n	800906e <__gethex+0x3bc>
 8008fdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d015      	beq.n	8009010 <__gethex+0x35e>
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d017      	beq.n	8009018 <__gethex+0x366>
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d109      	bne.n	8009000 <__gethex+0x34e>
 8008fec:	f01a 0f02 	tst.w	sl, #2
 8008ff0:	d006      	beq.n	8009000 <__gethex+0x34e>
 8008ff2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ff6:	ea4a 0a03 	orr.w	sl, sl, r3
 8008ffa:	f01a 0f01 	tst.w	sl, #1
 8008ffe:	d10e      	bne.n	800901e <__gethex+0x36c>
 8009000:	f047 0710 	orr.w	r7, r7, #16
 8009004:	e033      	b.n	800906e <__gethex+0x3bc>
 8009006:	f04f 0a01 	mov.w	sl, #1
 800900a:	e7d0      	b.n	8008fae <__gethex+0x2fc>
 800900c:	2701      	movs	r7, #1
 800900e:	e7e2      	b.n	8008fd6 <__gethex+0x324>
 8009010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009012:	f1c3 0301 	rsb	r3, r3, #1
 8009016:	9315      	str	r3, [sp, #84]	; 0x54
 8009018:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0f0      	beq.n	8009000 <__gethex+0x34e>
 800901e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009022:	f105 0314 	add.w	r3, r5, #20
 8009026:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800902a:	eb03 010a 	add.w	r1, r3, sl
 800902e:	f04f 0c00 	mov.w	ip, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	f1b2 3fff 	cmp.w	r2, #4294967295
 800903c:	d01c      	beq.n	8009078 <__gethex+0x3c6>
 800903e:	3201      	adds	r2, #1
 8009040:	6002      	str	r2, [r0, #0]
 8009042:	2f02      	cmp	r7, #2
 8009044:	f105 0314 	add.w	r3, r5, #20
 8009048:	d138      	bne.n	80090bc <__gethex+0x40a>
 800904a:	f8d8 2000 	ldr.w	r2, [r8]
 800904e:	3a01      	subs	r2, #1
 8009050:	42b2      	cmp	r2, r6
 8009052:	d10a      	bne.n	800906a <__gethex+0x3b8>
 8009054:	1171      	asrs	r1, r6, #5
 8009056:	2201      	movs	r2, #1
 8009058:	f006 061f 	and.w	r6, r6, #31
 800905c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009060:	fa02 f606 	lsl.w	r6, r2, r6
 8009064:	421e      	tst	r6, r3
 8009066:	bf18      	it	ne
 8009068:	4617      	movne	r7, r2
 800906a:	f047 0720 	orr.w	r7, r7, #32
 800906e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009070:	601d      	str	r5, [r3, #0]
 8009072:	9b06      	ldr	r3, [sp, #24]
 8009074:	601c      	str	r4, [r3, #0]
 8009076:	e6a4      	b.n	8008dc2 <__gethex+0x110>
 8009078:	4299      	cmp	r1, r3
 800907a:	f843 cc04 	str.w	ip, [r3, #-4]
 800907e:	d8d8      	bhi.n	8009032 <__gethex+0x380>
 8009080:	68ab      	ldr	r3, [r5, #8]
 8009082:	4599      	cmp	r9, r3
 8009084:	db12      	blt.n	80090ac <__gethex+0x3fa>
 8009086:	6869      	ldr	r1, [r5, #4]
 8009088:	9802      	ldr	r0, [sp, #8]
 800908a:	3101      	adds	r1, #1
 800908c:	f000 f976 	bl	800937c <_Balloc>
 8009090:	692a      	ldr	r2, [r5, #16]
 8009092:	3202      	adds	r2, #2
 8009094:	f105 010c 	add.w	r1, r5, #12
 8009098:	4683      	mov	fp, r0
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	300c      	adds	r0, #12
 800909e:	f7fd fa09 	bl	80064b4 <memcpy>
 80090a2:	4629      	mov	r1, r5
 80090a4:	9802      	ldr	r0, [sp, #8]
 80090a6:	f000 f99d 	bl	80093e4 <_Bfree>
 80090aa:	465d      	mov	r5, fp
 80090ac:	692b      	ldr	r3, [r5, #16]
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80090b4:	612a      	str	r2, [r5, #16]
 80090b6:	2201      	movs	r2, #1
 80090b8:	615a      	str	r2, [r3, #20]
 80090ba:	e7c2      	b.n	8009042 <__gethex+0x390>
 80090bc:	692a      	ldr	r2, [r5, #16]
 80090be:	454a      	cmp	r2, r9
 80090c0:	dd0b      	ble.n	80090da <__gethex+0x428>
 80090c2:	2101      	movs	r1, #1
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7ff fda5 	bl	8008c14 <rshift>
 80090ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ce:	3401      	adds	r4, #1
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	f6ff aed9 	blt.w	8008e88 <__gethex+0x1d6>
 80090d6:	2701      	movs	r7, #1
 80090d8:	e7c7      	b.n	800906a <__gethex+0x3b8>
 80090da:	f016 061f 	ands.w	r6, r6, #31
 80090de:	d0fa      	beq.n	80090d6 <__gethex+0x424>
 80090e0:	449a      	add	sl, r3
 80090e2:	f1c6 0620 	rsb	r6, r6, #32
 80090e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80090ea:	f000 fa0b 	bl	8009504 <__hi0bits>
 80090ee:	42b0      	cmp	r0, r6
 80090f0:	dbe7      	blt.n	80090c2 <__gethex+0x410>
 80090f2:	e7f0      	b.n	80090d6 <__gethex+0x424>

080090f4 <L_shift>:
 80090f4:	f1c2 0208 	rsb	r2, r2, #8
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	b570      	push	{r4, r5, r6, lr}
 80090fc:	f1c2 0620 	rsb	r6, r2, #32
 8009100:	6843      	ldr	r3, [r0, #4]
 8009102:	6804      	ldr	r4, [r0, #0]
 8009104:	fa03 f506 	lsl.w	r5, r3, r6
 8009108:	432c      	orrs	r4, r5
 800910a:	40d3      	lsrs	r3, r2
 800910c:	6004      	str	r4, [r0, #0]
 800910e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009112:	4288      	cmp	r0, r1
 8009114:	d3f4      	bcc.n	8009100 <L_shift+0xc>
 8009116:	bd70      	pop	{r4, r5, r6, pc}

08009118 <__match>:
 8009118:	b530      	push	{r4, r5, lr}
 800911a:	6803      	ldr	r3, [r0, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009122:	b914      	cbnz	r4, 800912a <__match+0x12>
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	2001      	movs	r0, #1
 8009128:	bd30      	pop	{r4, r5, pc}
 800912a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009132:	2d19      	cmp	r5, #25
 8009134:	bf98      	it	ls
 8009136:	3220      	addls	r2, #32
 8009138:	42a2      	cmp	r2, r4
 800913a:	d0f0      	beq.n	800911e <__match+0x6>
 800913c:	2000      	movs	r0, #0
 800913e:	e7f3      	b.n	8009128 <__match+0x10>

08009140 <__hexnan>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	680b      	ldr	r3, [r1, #0]
 8009146:	6801      	ldr	r1, [r0, #0]
 8009148:	115f      	asrs	r7, r3, #5
 800914a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800914e:	f013 031f 	ands.w	r3, r3, #31
 8009152:	b087      	sub	sp, #28
 8009154:	bf18      	it	ne
 8009156:	3704      	addne	r7, #4
 8009158:	2500      	movs	r5, #0
 800915a:	1f3e      	subs	r6, r7, #4
 800915c:	4682      	mov	sl, r0
 800915e:	4690      	mov	r8, r2
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f847 5c04 	str.w	r5, [r7, #-4]
 8009166:	46b1      	mov	r9, r6
 8009168:	4634      	mov	r4, r6
 800916a:	9502      	str	r5, [sp, #8]
 800916c:	46ab      	mov	fp, r5
 800916e:	784a      	ldrb	r2, [r1, #1]
 8009170:	1c4b      	adds	r3, r1, #1
 8009172:	9303      	str	r3, [sp, #12]
 8009174:	b342      	cbz	r2, 80091c8 <__hexnan+0x88>
 8009176:	4610      	mov	r0, r2
 8009178:	9105      	str	r1, [sp, #20]
 800917a:	9204      	str	r2, [sp, #16]
 800917c:	f7ff fd84 	bl	8008c88 <__hexdig_fun>
 8009180:	2800      	cmp	r0, #0
 8009182:	d143      	bne.n	800920c <__hexnan+0xcc>
 8009184:	9a04      	ldr	r2, [sp, #16]
 8009186:	9905      	ldr	r1, [sp, #20]
 8009188:	2a20      	cmp	r2, #32
 800918a:	d818      	bhi.n	80091be <__hexnan+0x7e>
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	459b      	cmp	fp, r3
 8009190:	dd13      	ble.n	80091ba <__hexnan+0x7a>
 8009192:	454c      	cmp	r4, r9
 8009194:	d206      	bcs.n	80091a4 <__hexnan+0x64>
 8009196:	2d07      	cmp	r5, #7
 8009198:	dc04      	bgt.n	80091a4 <__hexnan+0x64>
 800919a:	462a      	mov	r2, r5
 800919c:	4649      	mov	r1, r9
 800919e:	4620      	mov	r0, r4
 80091a0:	f7ff ffa8 	bl	80090f4 <L_shift>
 80091a4:	4544      	cmp	r4, r8
 80091a6:	d944      	bls.n	8009232 <__hexnan+0xf2>
 80091a8:	2300      	movs	r3, #0
 80091aa:	f1a4 0904 	sub.w	r9, r4, #4
 80091ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80091b2:	f8cd b008 	str.w	fp, [sp, #8]
 80091b6:	464c      	mov	r4, r9
 80091b8:	461d      	mov	r5, r3
 80091ba:	9903      	ldr	r1, [sp, #12]
 80091bc:	e7d7      	b.n	800916e <__hexnan+0x2e>
 80091be:	2a29      	cmp	r2, #41	; 0x29
 80091c0:	d14a      	bne.n	8009258 <__hexnan+0x118>
 80091c2:	3102      	adds	r1, #2
 80091c4:	f8ca 1000 	str.w	r1, [sl]
 80091c8:	f1bb 0f00 	cmp.w	fp, #0
 80091cc:	d044      	beq.n	8009258 <__hexnan+0x118>
 80091ce:	454c      	cmp	r4, r9
 80091d0:	d206      	bcs.n	80091e0 <__hexnan+0xa0>
 80091d2:	2d07      	cmp	r5, #7
 80091d4:	dc04      	bgt.n	80091e0 <__hexnan+0xa0>
 80091d6:	462a      	mov	r2, r5
 80091d8:	4649      	mov	r1, r9
 80091da:	4620      	mov	r0, r4
 80091dc:	f7ff ff8a 	bl	80090f4 <L_shift>
 80091e0:	4544      	cmp	r4, r8
 80091e2:	d928      	bls.n	8009236 <__hexnan+0xf6>
 80091e4:	4643      	mov	r3, r8
 80091e6:	f854 2b04 	ldr.w	r2, [r4], #4
 80091ea:	f843 2b04 	str.w	r2, [r3], #4
 80091ee:	42a6      	cmp	r6, r4
 80091f0:	d2f9      	bcs.n	80091e6 <__hexnan+0xa6>
 80091f2:	2200      	movs	r2, #0
 80091f4:	f843 2b04 	str.w	r2, [r3], #4
 80091f8:	429e      	cmp	r6, r3
 80091fa:	d2fb      	bcs.n	80091f4 <__hexnan+0xb4>
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	b91b      	cbnz	r3, 8009208 <__hexnan+0xc8>
 8009200:	4546      	cmp	r6, r8
 8009202:	d127      	bne.n	8009254 <__hexnan+0x114>
 8009204:	2301      	movs	r3, #1
 8009206:	6033      	str	r3, [r6, #0]
 8009208:	2005      	movs	r0, #5
 800920a:	e026      	b.n	800925a <__hexnan+0x11a>
 800920c:	3501      	adds	r5, #1
 800920e:	2d08      	cmp	r5, #8
 8009210:	f10b 0b01 	add.w	fp, fp, #1
 8009214:	dd06      	ble.n	8009224 <__hexnan+0xe4>
 8009216:	4544      	cmp	r4, r8
 8009218:	d9cf      	bls.n	80091ba <__hexnan+0x7a>
 800921a:	2300      	movs	r3, #0
 800921c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009220:	2501      	movs	r5, #1
 8009222:	3c04      	subs	r4, #4
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	f000 000f 	and.w	r0, r0, #15
 800922a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800922e:	6020      	str	r0, [r4, #0]
 8009230:	e7c3      	b.n	80091ba <__hexnan+0x7a>
 8009232:	2508      	movs	r5, #8
 8009234:	e7c1      	b.n	80091ba <__hexnan+0x7a>
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0df      	beq.n	80091fc <__hexnan+0xbc>
 800923c:	f04f 32ff 	mov.w	r2, #4294967295
 8009240:	f1c3 0320 	rsb	r3, r3, #32
 8009244:	fa22 f303 	lsr.w	r3, r2, r3
 8009248:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800924c:	401a      	ands	r2, r3
 800924e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009252:	e7d3      	b.n	80091fc <__hexnan+0xbc>
 8009254:	3e04      	subs	r6, #4
 8009256:	e7d1      	b.n	80091fc <__hexnan+0xbc>
 8009258:	2004      	movs	r0, #4
 800925a:	b007      	add	sp, #28
 800925c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009260 <__localeconv_l>:
 8009260:	30f0      	adds	r0, #240	; 0xf0
 8009262:	4770      	bx	lr

08009264 <_localeconv_r>:
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <_localeconv_r+0x14>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6a18      	ldr	r0, [r3, #32]
 800926a:	4b04      	ldr	r3, [pc, #16]	; (800927c <_localeconv_r+0x18>)
 800926c:	2800      	cmp	r0, #0
 800926e:	bf08      	it	eq
 8009270:	4618      	moveq	r0, r3
 8009272:	30f0      	adds	r0, #240	; 0xf0
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	20000144 	.word	0x20000144
 800927c:	200001a8 	.word	0x200001a8

08009280 <__swhatbuf_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	460e      	mov	r6, r1
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2900      	cmp	r1, #0
 800928a:	b096      	sub	sp, #88	; 0x58
 800928c:	4614      	mov	r4, r2
 800928e:	461d      	mov	r5, r3
 8009290:	da07      	bge.n	80092a2 <__swhatbuf_r+0x22>
 8009292:	2300      	movs	r3, #0
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	89b3      	ldrh	r3, [r6, #12]
 8009298:	061a      	lsls	r2, r3, #24
 800929a:	d410      	bmi.n	80092be <__swhatbuf_r+0x3e>
 800929c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a0:	e00e      	b.n	80092c0 <__swhatbuf_r+0x40>
 80092a2:	466a      	mov	r2, sp
 80092a4:	f001 f846 	bl	800a334 <_fstat_r>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	dbf2      	blt.n	8009292 <__swhatbuf_r+0x12>
 80092ac:	9a01      	ldr	r2, [sp, #4]
 80092ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b6:	425a      	negs	r2, r3
 80092b8:	415a      	adcs	r2, r3
 80092ba:	602a      	str	r2, [r5, #0]
 80092bc:	e7ee      	b.n	800929c <__swhatbuf_r+0x1c>
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	2000      	movs	r0, #0
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	b016      	add	sp, #88	; 0x58
 80092c6:	bd70      	pop	{r4, r5, r6, pc}

080092c8 <__smakebuf_r>:
 80092c8:	898b      	ldrh	r3, [r1, #12]
 80092ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092cc:	079d      	lsls	r5, r3, #30
 80092ce:	4606      	mov	r6, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	d507      	bpl.n	80092e4 <__smakebuf_r+0x1c>
 80092d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	2301      	movs	r3, #1
 80092de:	6163      	str	r3, [r4, #20]
 80092e0:	b002      	add	sp, #8
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	ab01      	add	r3, sp, #4
 80092e6:	466a      	mov	r2, sp
 80092e8:	f7ff ffca 	bl	8009280 <__swhatbuf_r>
 80092ec:	9900      	ldr	r1, [sp, #0]
 80092ee:	4605      	mov	r5, r0
 80092f0:	4630      	mov	r0, r6
 80092f2:	f000 fc9f 	bl	8009c34 <_malloc_r>
 80092f6:	b948      	cbnz	r0, 800930c <__smakebuf_r+0x44>
 80092f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fc:	059a      	lsls	r2, r3, #22
 80092fe:	d4ef      	bmi.n	80092e0 <__smakebuf_r+0x18>
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	f043 0302 	orr.w	r3, r3, #2
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	e7e3      	b.n	80092d4 <__smakebuf_r+0xc>
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <__smakebuf_r+0x7c>)
 800930e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	9b00      	ldr	r3, [sp, #0]
 800931c:	6163      	str	r3, [r4, #20]
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	6120      	str	r0, [r4, #16]
 8009322:	b15b      	cbz	r3, 800933c <__smakebuf_r+0x74>
 8009324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009328:	4630      	mov	r0, r6
 800932a:	f001 f815 	bl	800a358 <_isatty_r>
 800932e:	b128      	cbz	r0, 800933c <__smakebuf_r+0x74>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	431d      	orrs	r5, r3
 8009340:	81a5      	strh	r5, [r4, #12]
 8009342:	e7cd      	b.n	80092e0 <__smakebuf_r+0x18>
 8009344:	08008ac9 	.word	0x08008ac9

08009348 <malloc>:
 8009348:	4b02      	ldr	r3, [pc, #8]	; (8009354 <malloc+0xc>)
 800934a:	4601      	mov	r1, r0
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f000 bc71 	b.w	8009c34 <_malloc_r>
 8009352:	bf00      	nop
 8009354:	20000144 	.word	0x20000144

08009358 <__ascii_mbtowc>:
 8009358:	b082      	sub	sp, #8
 800935a:	b901      	cbnz	r1, 800935e <__ascii_mbtowc+0x6>
 800935c:	a901      	add	r1, sp, #4
 800935e:	b142      	cbz	r2, 8009372 <__ascii_mbtowc+0x1a>
 8009360:	b14b      	cbz	r3, 8009376 <__ascii_mbtowc+0x1e>
 8009362:	7813      	ldrb	r3, [r2, #0]
 8009364:	600b      	str	r3, [r1, #0]
 8009366:	7812      	ldrb	r2, [r2, #0]
 8009368:	1c10      	adds	r0, r2, #0
 800936a:	bf18      	it	ne
 800936c:	2001      	movne	r0, #1
 800936e:	b002      	add	sp, #8
 8009370:	4770      	bx	lr
 8009372:	4610      	mov	r0, r2
 8009374:	e7fb      	b.n	800936e <__ascii_mbtowc+0x16>
 8009376:	f06f 0001 	mvn.w	r0, #1
 800937a:	e7f8      	b.n	800936e <__ascii_mbtowc+0x16>

0800937c <_Balloc>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009380:	4604      	mov	r4, r0
 8009382:	460e      	mov	r6, r1
 8009384:	b93d      	cbnz	r5, 8009396 <_Balloc+0x1a>
 8009386:	2010      	movs	r0, #16
 8009388:	f7ff ffde 	bl	8009348 <malloc>
 800938c:	6260      	str	r0, [r4, #36]	; 0x24
 800938e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009392:	6005      	str	r5, [r0, #0]
 8009394:	60c5      	str	r5, [r0, #12]
 8009396:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009398:	68eb      	ldr	r3, [r5, #12]
 800939a:	b183      	cbz	r3, 80093be <_Balloc+0x42>
 800939c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80093a4:	b9b8      	cbnz	r0, 80093d6 <_Balloc+0x5a>
 80093a6:	2101      	movs	r1, #1
 80093a8:	fa01 f506 	lsl.w	r5, r1, r6
 80093ac:	1d6a      	adds	r2, r5, #5
 80093ae:	0092      	lsls	r2, r2, #2
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fbe2 	bl	8009b7a <_calloc_r>
 80093b6:	b160      	cbz	r0, 80093d2 <_Balloc+0x56>
 80093b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80093bc:	e00e      	b.n	80093dc <_Balloc+0x60>
 80093be:	2221      	movs	r2, #33	; 0x21
 80093c0:	2104      	movs	r1, #4
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fbd9 	bl	8009b7a <_calloc_r>
 80093c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ca:	60e8      	str	r0, [r5, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e4      	bne.n	800939c <_Balloc+0x20>
 80093d2:	2000      	movs	r0, #0
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	6802      	ldr	r2, [r0, #0]
 80093d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80093dc:	2300      	movs	r3, #0
 80093de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093e2:	e7f7      	b.n	80093d4 <_Balloc+0x58>

080093e4 <_Bfree>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80093e8:	4606      	mov	r6, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	b93c      	cbnz	r4, 80093fe <_Bfree+0x1a>
 80093ee:	2010      	movs	r0, #16
 80093f0:	f7ff ffaa 	bl	8009348 <malloc>
 80093f4:	6270      	str	r0, [r6, #36]	; 0x24
 80093f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093fa:	6004      	str	r4, [r0, #0]
 80093fc:	60c4      	str	r4, [r0, #12]
 80093fe:	b13d      	cbz	r5, 8009410 <_Bfree+0x2c>
 8009400:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009402:	686a      	ldr	r2, [r5, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800940a:	6029      	str	r1, [r5, #0]
 800940c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009410:	bd70      	pop	{r4, r5, r6, pc}

08009412 <__multadd>:
 8009412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009416:	690d      	ldr	r5, [r1, #16]
 8009418:	461f      	mov	r7, r3
 800941a:	4606      	mov	r6, r0
 800941c:	460c      	mov	r4, r1
 800941e:	f101 0c14 	add.w	ip, r1, #20
 8009422:	2300      	movs	r3, #0
 8009424:	f8dc 0000 	ldr.w	r0, [ip]
 8009428:	b281      	uxth	r1, r0
 800942a:	fb02 7101 	mla	r1, r2, r1, r7
 800942e:	0c0f      	lsrs	r7, r1, #16
 8009430:	0c00      	lsrs	r0, r0, #16
 8009432:	fb02 7000 	mla	r0, r2, r0, r7
 8009436:	b289      	uxth	r1, r1
 8009438:	3301      	adds	r3, #1
 800943a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800943e:	429d      	cmp	r5, r3
 8009440:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009444:	f84c 1b04 	str.w	r1, [ip], #4
 8009448:	dcec      	bgt.n	8009424 <__multadd+0x12>
 800944a:	b1d7      	cbz	r7, 8009482 <__multadd+0x70>
 800944c:	68a3      	ldr	r3, [r4, #8]
 800944e:	42ab      	cmp	r3, r5
 8009450:	dc12      	bgt.n	8009478 <__multadd+0x66>
 8009452:	6861      	ldr	r1, [r4, #4]
 8009454:	4630      	mov	r0, r6
 8009456:	3101      	adds	r1, #1
 8009458:	f7ff ff90 	bl	800937c <_Balloc>
 800945c:	6922      	ldr	r2, [r4, #16]
 800945e:	3202      	adds	r2, #2
 8009460:	f104 010c 	add.w	r1, r4, #12
 8009464:	4680      	mov	r8, r0
 8009466:	0092      	lsls	r2, r2, #2
 8009468:	300c      	adds	r0, #12
 800946a:	f7fd f823 	bl	80064b4 <memcpy>
 800946e:	4621      	mov	r1, r4
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffb7 	bl	80093e4 <_Bfree>
 8009476:	4644      	mov	r4, r8
 8009478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800947c:	3501      	adds	r5, #1
 800947e:	615f      	str	r7, [r3, #20]
 8009480:	6125      	str	r5, [r4, #16]
 8009482:	4620      	mov	r0, r4
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009488 <__s2b>:
 8009488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800948c:	460c      	mov	r4, r1
 800948e:	4615      	mov	r5, r2
 8009490:	461f      	mov	r7, r3
 8009492:	2209      	movs	r2, #9
 8009494:	3308      	adds	r3, #8
 8009496:	4606      	mov	r6, r0
 8009498:	fb93 f3f2 	sdiv	r3, r3, r2
 800949c:	2100      	movs	r1, #0
 800949e:	2201      	movs	r2, #1
 80094a0:	429a      	cmp	r2, r3
 80094a2:	db20      	blt.n	80094e6 <__s2b+0x5e>
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff ff69 	bl	800937c <_Balloc>
 80094aa:	9b08      	ldr	r3, [sp, #32]
 80094ac:	6143      	str	r3, [r0, #20]
 80094ae:	2d09      	cmp	r5, #9
 80094b0:	f04f 0301 	mov.w	r3, #1
 80094b4:	6103      	str	r3, [r0, #16]
 80094b6:	dd19      	ble.n	80094ec <__s2b+0x64>
 80094b8:	f104 0809 	add.w	r8, r4, #9
 80094bc:	46c1      	mov	r9, r8
 80094be:	442c      	add	r4, r5
 80094c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80094c4:	4601      	mov	r1, r0
 80094c6:	3b30      	subs	r3, #48	; 0x30
 80094c8:	220a      	movs	r2, #10
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7ff ffa1 	bl	8009412 <__multadd>
 80094d0:	45a1      	cmp	r9, r4
 80094d2:	d1f5      	bne.n	80094c0 <__s2b+0x38>
 80094d4:	eb08 0405 	add.w	r4, r8, r5
 80094d8:	3c08      	subs	r4, #8
 80094da:	1b2d      	subs	r5, r5, r4
 80094dc:	1963      	adds	r3, r4, r5
 80094de:	42bb      	cmp	r3, r7
 80094e0:	db07      	blt.n	80094f2 <__s2b+0x6a>
 80094e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e6:	0052      	lsls	r2, r2, #1
 80094e8:	3101      	adds	r1, #1
 80094ea:	e7d9      	b.n	80094a0 <__s2b+0x18>
 80094ec:	340a      	adds	r4, #10
 80094ee:	2509      	movs	r5, #9
 80094f0:	e7f3      	b.n	80094da <__s2b+0x52>
 80094f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094f6:	4601      	mov	r1, r0
 80094f8:	3b30      	subs	r3, #48	; 0x30
 80094fa:	220a      	movs	r2, #10
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff ff88 	bl	8009412 <__multadd>
 8009502:	e7eb      	b.n	80094dc <__s2b+0x54>

08009504 <__hi0bits>:
 8009504:	0c02      	lsrs	r2, r0, #16
 8009506:	0412      	lsls	r2, r2, #16
 8009508:	4603      	mov	r3, r0
 800950a:	b9b2      	cbnz	r2, 800953a <__hi0bits+0x36>
 800950c:	0403      	lsls	r3, r0, #16
 800950e:	2010      	movs	r0, #16
 8009510:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009514:	bf04      	itt	eq
 8009516:	021b      	lsleq	r3, r3, #8
 8009518:	3008      	addeq	r0, #8
 800951a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800951e:	bf04      	itt	eq
 8009520:	011b      	lsleq	r3, r3, #4
 8009522:	3004      	addeq	r0, #4
 8009524:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009528:	bf04      	itt	eq
 800952a:	009b      	lsleq	r3, r3, #2
 800952c:	3002      	addeq	r0, #2
 800952e:	2b00      	cmp	r3, #0
 8009530:	db06      	blt.n	8009540 <__hi0bits+0x3c>
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	d503      	bpl.n	800953e <__hi0bits+0x3a>
 8009536:	3001      	adds	r0, #1
 8009538:	4770      	bx	lr
 800953a:	2000      	movs	r0, #0
 800953c:	e7e8      	b.n	8009510 <__hi0bits+0xc>
 800953e:	2020      	movs	r0, #32
 8009540:	4770      	bx	lr

08009542 <__lo0bits>:
 8009542:	6803      	ldr	r3, [r0, #0]
 8009544:	f013 0207 	ands.w	r2, r3, #7
 8009548:	4601      	mov	r1, r0
 800954a:	d00b      	beq.n	8009564 <__lo0bits+0x22>
 800954c:	07da      	lsls	r2, r3, #31
 800954e:	d423      	bmi.n	8009598 <__lo0bits+0x56>
 8009550:	0798      	lsls	r0, r3, #30
 8009552:	bf49      	itett	mi
 8009554:	085b      	lsrmi	r3, r3, #1
 8009556:	089b      	lsrpl	r3, r3, #2
 8009558:	2001      	movmi	r0, #1
 800955a:	600b      	strmi	r3, [r1, #0]
 800955c:	bf5c      	itt	pl
 800955e:	600b      	strpl	r3, [r1, #0]
 8009560:	2002      	movpl	r0, #2
 8009562:	4770      	bx	lr
 8009564:	b298      	uxth	r0, r3
 8009566:	b9a8      	cbnz	r0, 8009594 <__lo0bits+0x52>
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	2010      	movs	r0, #16
 800956c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009570:	bf04      	itt	eq
 8009572:	0a1b      	lsreq	r3, r3, #8
 8009574:	3008      	addeq	r0, #8
 8009576:	071a      	lsls	r2, r3, #28
 8009578:	bf04      	itt	eq
 800957a:	091b      	lsreq	r3, r3, #4
 800957c:	3004      	addeq	r0, #4
 800957e:	079a      	lsls	r2, r3, #30
 8009580:	bf04      	itt	eq
 8009582:	089b      	lsreq	r3, r3, #2
 8009584:	3002      	addeq	r0, #2
 8009586:	07da      	lsls	r2, r3, #31
 8009588:	d402      	bmi.n	8009590 <__lo0bits+0x4e>
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	d006      	beq.n	800959c <__lo0bits+0x5a>
 800958e:	3001      	adds	r0, #1
 8009590:	600b      	str	r3, [r1, #0]
 8009592:	4770      	bx	lr
 8009594:	4610      	mov	r0, r2
 8009596:	e7e9      	b.n	800956c <__lo0bits+0x2a>
 8009598:	2000      	movs	r0, #0
 800959a:	4770      	bx	lr
 800959c:	2020      	movs	r0, #32
 800959e:	4770      	bx	lr

080095a0 <__i2b>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	2101      	movs	r1, #1
 80095a6:	f7ff fee9 	bl	800937c <_Balloc>
 80095aa:	2201      	movs	r2, #1
 80095ac:	6144      	str	r4, [r0, #20]
 80095ae:	6102      	str	r2, [r0, #16]
 80095b0:	bd10      	pop	{r4, pc}

080095b2 <__multiply>:
 80095b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b6:	4614      	mov	r4, r2
 80095b8:	690a      	ldr	r2, [r1, #16]
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	429a      	cmp	r2, r3
 80095be:	bfb8      	it	lt
 80095c0:	460b      	movlt	r3, r1
 80095c2:	4688      	mov	r8, r1
 80095c4:	bfbc      	itt	lt
 80095c6:	46a0      	movlt	r8, r4
 80095c8:	461c      	movlt	r4, r3
 80095ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095da:	eb07 0609 	add.w	r6, r7, r9
 80095de:	42b3      	cmp	r3, r6
 80095e0:	bfb8      	it	lt
 80095e2:	3101      	addlt	r1, #1
 80095e4:	f7ff feca 	bl	800937c <_Balloc>
 80095e8:	f100 0514 	add.w	r5, r0, #20
 80095ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80095f0:	462b      	mov	r3, r5
 80095f2:	2200      	movs	r2, #0
 80095f4:	4573      	cmp	r3, lr
 80095f6:	d316      	bcc.n	8009626 <__multiply+0x74>
 80095f8:	f104 0214 	add.w	r2, r4, #20
 80095fc:	f108 0114 	add.w	r1, r8, #20
 8009600:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009604:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	9b00      	ldr	r3, [sp, #0]
 800960c:	9201      	str	r2, [sp, #4]
 800960e:	4293      	cmp	r3, r2
 8009610:	d80c      	bhi.n	800962c <__multiply+0x7a>
 8009612:	2e00      	cmp	r6, #0
 8009614:	dd03      	ble.n	800961e <__multiply+0x6c>
 8009616:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800961a:	2b00      	cmp	r3, #0
 800961c:	d05d      	beq.n	80096da <__multiply+0x128>
 800961e:	6106      	str	r6, [r0, #16]
 8009620:	b003      	add	sp, #12
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	f843 2b04 	str.w	r2, [r3], #4
 800962a:	e7e3      	b.n	80095f4 <__multiply+0x42>
 800962c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009630:	f1bb 0f00 	cmp.w	fp, #0
 8009634:	d023      	beq.n	800967e <__multiply+0xcc>
 8009636:	4689      	mov	r9, r1
 8009638:	46ac      	mov	ip, r5
 800963a:	f04f 0800 	mov.w	r8, #0
 800963e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009642:	f8dc a000 	ldr.w	sl, [ip]
 8009646:	b2a3      	uxth	r3, r4
 8009648:	fa1f fa8a 	uxth.w	sl, sl
 800964c:	fb0b a303 	mla	r3, fp, r3, sl
 8009650:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009654:	f8dc 4000 	ldr.w	r4, [ip]
 8009658:	4443      	add	r3, r8
 800965a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800965e:	fb0b 840a 	mla	r4, fp, sl, r8
 8009662:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009666:	46e2      	mov	sl, ip
 8009668:	b29b      	uxth	r3, r3
 800966a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800966e:	454f      	cmp	r7, r9
 8009670:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009674:	f84a 3b04 	str.w	r3, [sl], #4
 8009678:	d82b      	bhi.n	80096d2 <__multiply+0x120>
 800967a:	f8cc 8004 	str.w	r8, [ip, #4]
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009684:	3204      	adds	r2, #4
 8009686:	f1ba 0f00 	cmp.w	sl, #0
 800968a:	d020      	beq.n	80096ce <__multiply+0x11c>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	4689      	mov	r9, r1
 8009690:	46a8      	mov	r8, r5
 8009692:	f04f 0b00 	mov.w	fp, #0
 8009696:	f8b9 c000 	ldrh.w	ip, [r9]
 800969a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800969e:	fb0a 440c 	mla	r4, sl, ip, r4
 80096a2:	445c      	add	r4, fp
 80096a4:	46c4      	mov	ip, r8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096ac:	f84c 3b04 	str.w	r3, [ip], #4
 80096b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80096b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	fb0a b303 	mla	r3, sl, r3, fp
 80096be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80096c2:	454f      	cmp	r7, r9
 80096c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80096c8:	d805      	bhi.n	80096d6 <__multiply+0x124>
 80096ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80096ce:	3504      	adds	r5, #4
 80096d0:	e79b      	b.n	800960a <__multiply+0x58>
 80096d2:	46d4      	mov	ip, sl
 80096d4:	e7b3      	b.n	800963e <__multiply+0x8c>
 80096d6:	46e0      	mov	r8, ip
 80096d8:	e7dd      	b.n	8009696 <__multiply+0xe4>
 80096da:	3e01      	subs	r6, #1
 80096dc:	e799      	b.n	8009612 <__multiply+0x60>
	...

080096e0 <__pow5mult>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	4615      	mov	r5, r2
 80096e6:	f012 0203 	ands.w	r2, r2, #3
 80096ea:	4606      	mov	r6, r0
 80096ec:	460f      	mov	r7, r1
 80096ee:	d007      	beq.n	8009700 <__pow5mult+0x20>
 80096f0:	3a01      	subs	r2, #1
 80096f2:	4c21      	ldr	r4, [pc, #132]	; (8009778 <__pow5mult+0x98>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096fa:	f7ff fe8a 	bl	8009412 <__multadd>
 80096fe:	4607      	mov	r7, r0
 8009700:	10ad      	asrs	r5, r5, #2
 8009702:	d035      	beq.n	8009770 <__pow5mult+0x90>
 8009704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009706:	b93c      	cbnz	r4, 8009718 <__pow5mult+0x38>
 8009708:	2010      	movs	r0, #16
 800970a:	f7ff fe1d 	bl	8009348 <malloc>
 800970e:	6270      	str	r0, [r6, #36]	; 0x24
 8009710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009714:	6004      	str	r4, [r0, #0]
 8009716:	60c4      	str	r4, [r0, #12]
 8009718:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800971c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009720:	b94c      	cbnz	r4, 8009736 <__pow5mult+0x56>
 8009722:	f240 2171 	movw	r1, #625	; 0x271
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ff3a 	bl	80095a0 <__i2b>
 800972c:	2300      	movs	r3, #0
 800972e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009732:	4604      	mov	r4, r0
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	07eb      	lsls	r3, r5, #31
 800973c:	d50a      	bpl.n	8009754 <__pow5mult+0x74>
 800973e:	4639      	mov	r1, r7
 8009740:	4622      	mov	r2, r4
 8009742:	4630      	mov	r0, r6
 8009744:	f7ff ff35 	bl	80095b2 <__multiply>
 8009748:	4639      	mov	r1, r7
 800974a:	4681      	mov	r9, r0
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff fe49 	bl	80093e4 <_Bfree>
 8009752:	464f      	mov	r7, r9
 8009754:	106d      	asrs	r5, r5, #1
 8009756:	d00b      	beq.n	8009770 <__pow5mult+0x90>
 8009758:	6820      	ldr	r0, [r4, #0]
 800975a:	b938      	cbnz	r0, 800976c <__pow5mult+0x8c>
 800975c:	4622      	mov	r2, r4
 800975e:	4621      	mov	r1, r4
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff ff26 	bl	80095b2 <__multiply>
 8009766:	6020      	str	r0, [r4, #0]
 8009768:	f8c0 8000 	str.w	r8, [r0]
 800976c:	4604      	mov	r4, r0
 800976e:	e7e4      	b.n	800973a <__pow5mult+0x5a>
 8009770:	4638      	mov	r0, r7
 8009772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009776:	bf00      	nop
 8009778:	0800adf0 	.word	0x0800adf0

0800977c <__lshift>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	460c      	mov	r4, r1
 8009782:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	6849      	ldr	r1, [r1, #4]
 800978a:	eb0a 0903 	add.w	r9, sl, r3
 800978e:	68a3      	ldr	r3, [r4, #8]
 8009790:	4607      	mov	r7, r0
 8009792:	4616      	mov	r6, r2
 8009794:	f109 0501 	add.w	r5, r9, #1
 8009798:	42ab      	cmp	r3, r5
 800979a:	db32      	blt.n	8009802 <__lshift+0x86>
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff fded 	bl	800937c <_Balloc>
 80097a2:	2300      	movs	r3, #0
 80097a4:	4680      	mov	r8, r0
 80097a6:	f100 0114 	add.w	r1, r0, #20
 80097aa:	461a      	mov	r2, r3
 80097ac:	4553      	cmp	r3, sl
 80097ae:	db2b      	blt.n	8009808 <__lshift+0x8c>
 80097b0:	6920      	ldr	r0, [r4, #16]
 80097b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097b6:	f104 0314 	add.w	r3, r4, #20
 80097ba:	f016 021f 	ands.w	r2, r6, #31
 80097be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097c6:	d025      	beq.n	8009814 <__lshift+0x98>
 80097c8:	f1c2 0e20 	rsb	lr, r2, #32
 80097cc:	2000      	movs	r0, #0
 80097ce:	681e      	ldr	r6, [r3, #0]
 80097d0:	468a      	mov	sl, r1
 80097d2:	4096      	lsls	r6, r2
 80097d4:	4330      	orrs	r0, r6
 80097d6:	f84a 0b04 	str.w	r0, [sl], #4
 80097da:	f853 0b04 	ldr.w	r0, [r3], #4
 80097de:	459c      	cmp	ip, r3
 80097e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80097e4:	d814      	bhi.n	8009810 <__lshift+0x94>
 80097e6:	6048      	str	r0, [r1, #4]
 80097e8:	b108      	cbz	r0, 80097ee <__lshift+0x72>
 80097ea:	f109 0502 	add.w	r5, r9, #2
 80097ee:	3d01      	subs	r5, #1
 80097f0:	4638      	mov	r0, r7
 80097f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80097f6:	4621      	mov	r1, r4
 80097f8:	f7ff fdf4 	bl	80093e4 <_Bfree>
 80097fc:	4640      	mov	r0, r8
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	3101      	adds	r1, #1
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	e7c7      	b.n	8009798 <__lshift+0x1c>
 8009808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800980c:	3301      	adds	r3, #1
 800980e:	e7cd      	b.n	80097ac <__lshift+0x30>
 8009810:	4651      	mov	r1, sl
 8009812:	e7dc      	b.n	80097ce <__lshift+0x52>
 8009814:	3904      	subs	r1, #4
 8009816:	f853 2b04 	ldr.w	r2, [r3], #4
 800981a:	f841 2f04 	str.w	r2, [r1, #4]!
 800981e:	459c      	cmp	ip, r3
 8009820:	d8f9      	bhi.n	8009816 <__lshift+0x9a>
 8009822:	e7e4      	b.n	80097ee <__lshift+0x72>

08009824 <__mcmp>:
 8009824:	6903      	ldr	r3, [r0, #16]
 8009826:	690a      	ldr	r2, [r1, #16]
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	b530      	push	{r4, r5, lr}
 800982c:	d10c      	bne.n	8009848 <__mcmp+0x24>
 800982e:	0092      	lsls	r2, r2, #2
 8009830:	3014      	adds	r0, #20
 8009832:	3114      	adds	r1, #20
 8009834:	1884      	adds	r4, r0, r2
 8009836:	4411      	add	r1, r2
 8009838:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800983c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009840:	4295      	cmp	r5, r2
 8009842:	d003      	beq.n	800984c <__mcmp+0x28>
 8009844:	d305      	bcc.n	8009852 <__mcmp+0x2e>
 8009846:	2301      	movs	r3, #1
 8009848:	4618      	mov	r0, r3
 800984a:	bd30      	pop	{r4, r5, pc}
 800984c:	42a0      	cmp	r0, r4
 800984e:	d3f3      	bcc.n	8009838 <__mcmp+0x14>
 8009850:	e7fa      	b.n	8009848 <__mcmp+0x24>
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	e7f7      	b.n	8009848 <__mcmp+0x24>

08009858 <__mdiff>:
 8009858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	460d      	mov	r5, r1
 800985e:	4607      	mov	r7, r0
 8009860:	4611      	mov	r1, r2
 8009862:	4628      	mov	r0, r5
 8009864:	4614      	mov	r4, r2
 8009866:	f7ff ffdd 	bl	8009824 <__mcmp>
 800986a:	1e06      	subs	r6, r0, #0
 800986c:	d108      	bne.n	8009880 <__mdiff+0x28>
 800986e:	4631      	mov	r1, r6
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff fd83 	bl	800937c <_Balloc>
 8009876:	2301      	movs	r3, #1
 8009878:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	bfa4      	itt	ge
 8009882:	4623      	movge	r3, r4
 8009884:	462c      	movge	r4, r5
 8009886:	4638      	mov	r0, r7
 8009888:	6861      	ldr	r1, [r4, #4]
 800988a:	bfa6      	itte	ge
 800988c:	461d      	movge	r5, r3
 800988e:	2600      	movge	r6, #0
 8009890:	2601      	movlt	r6, #1
 8009892:	f7ff fd73 	bl	800937c <_Balloc>
 8009896:	692b      	ldr	r3, [r5, #16]
 8009898:	60c6      	str	r6, [r0, #12]
 800989a:	6926      	ldr	r6, [r4, #16]
 800989c:	f105 0914 	add.w	r9, r5, #20
 80098a0:	f104 0214 	add.w	r2, r4, #20
 80098a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80098a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80098ac:	f100 0514 	add.w	r5, r0, #20
 80098b0:	f04f 0e00 	mov.w	lr, #0
 80098b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80098b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80098bc:	fa1e f18a 	uxtah	r1, lr, sl
 80098c0:	b2a3      	uxth	r3, r4
 80098c2:	1ac9      	subs	r1, r1, r3
 80098c4:	0c23      	lsrs	r3, r4, #16
 80098c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80098ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80098ce:	b289      	uxth	r1, r1
 80098d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80098d4:	45c8      	cmp	r8, r9
 80098d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80098da:	4694      	mov	ip, r2
 80098dc:	f845 3b04 	str.w	r3, [r5], #4
 80098e0:	d8e8      	bhi.n	80098b4 <__mdiff+0x5c>
 80098e2:	45bc      	cmp	ip, r7
 80098e4:	d304      	bcc.n	80098f0 <__mdiff+0x98>
 80098e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80098ea:	b183      	cbz	r3, 800990e <__mdiff+0xb6>
 80098ec:	6106      	str	r6, [r0, #16]
 80098ee:	e7c5      	b.n	800987c <__mdiff+0x24>
 80098f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80098f4:	fa1e f381 	uxtah	r3, lr, r1
 80098f8:	141a      	asrs	r2, r3, #16
 80098fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098fe:	b29b      	uxth	r3, r3
 8009900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009904:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009908:	f845 3b04 	str.w	r3, [r5], #4
 800990c:	e7e9      	b.n	80098e2 <__mdiff+0x8a>
 800990e:	3e01      	subs	r6, #1
 8009910:	e7e9      	b.n	80098e6 <__mdiff+0x8e>
	...

08009914 <__ulp>:
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <__ulp+0x4c>)
 8009916:	ee10 2a90 	vmov	r2, s1
 800991a:	401a      	ands	r2, r3
 800991c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009920:	2b00      	cmp	r3, #0
 8009922:	dd04      	ble.n	800992e <__ulp+0x1a>
 8009924:	2000      	movs	r0, #0
 8009926:	4619      	mov	r1, r3
 8009928:	ec41 0b10 	vmov	d0, r0, r1
 800992c:	4770      	bx	lr
 800992e:	425b      	negs	r3, r3
 8009930:	151b      	asrs	r3, r3, #20
 8009932:	2b13      	cmp	r3, #19
 8009934:	f04f 0000 	mov.w	r0, #0
 8009938:	f04f 0100 	mov.w	r1, #0
 800993c:	dc04      	bgt.n	8009948 <__ulp+0x34>
 800993e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009942:	fa42 f103 	asr.w	r1, r2, r3
 8009946:	e7ef      	b.n	8009928 <__ulp+0x14>
 8009948:	3b14      	subs	r3, #20
 800994a:	2b1e      	cmp	r3, #30
 800994c:	f04f 0201 	mov.w	r2, #1
 8009950:	bfda      	itte	le
 8009952:	f1c3 031f 	rsble	r3, r3, #31
 8009956:	fa02 f303 	lslle.w	r3, r2, r3
 800995a:	4613      	movgt	r3, r2
 800995c:	4618      	mov	r0, r3
 800995e:	e7e3      	b.n	8009928 <__ulp+0x14>
 8009960:	7ff00000 	.word	0x7ff00000

08009964 <__b2d>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	6905      	ldr	r5, [r0, #16]
 8009968:	f100 0714 	add.w	r7, r0, #20
 800996c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009970:	1f2e      	subs	r6, r5, #4
 8009972:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009976:	4620      	mov	r0, r4
 8009978:	f7ff fdc4 	bl	8009504 <__hi0bits>
 800997c:	f1c0 0320 	rsb	r3, r0, #32
 8009980:	280a      	cmp	r0, #10
 8009982:	600b      	str	r3, [r1, #0]
 8009984:	f8df c074 	ldr.w	ip, [pc, #116]	; 80099fc <__b2d+0x98>
 8009988:	dc14      	bgt.n	80099b4 <__b2d+0x50>
 800998a:	f1c0 0e0b 	rsb	lr, r0, #11
 800998e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009992:	42b7      	cmp	r7, r6
 8009994:	ea41 030c 	orr.w	r3, r1, ip
 8009998:	bf34      	ite	cc
 800999a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800999e:	2100      	movcs	r1, #0
 80099a0:	3015      	adds	r0, #21
 80099a2:	fa04 f000 	lsl.w	r0, r4, r0
 80099a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80099aa:	ea40 0201 	orr.w	r2, r0, r1
 80099ae:	ec43 2b10 	vmov	d0, r2, r3
 80099b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b4:	42b7      	cmp	r7, r6
 80099b6:	bf3a      	itte	cc
 80099b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80099bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099c0:	2100      	movcs	r1, #0
 80099c2:	380b      	subs	r0, #11
 80099c4:	d015      	beq.n	80099f2 <__b2d+0x8e>
 80099c6:	4084      	lsls	r4, r0
 80099c8:	f1c0 0520 	rsb	r5, r0, #32
 80099cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80099d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80099d4:	42be      	cmp	r6, r7
 80099d6:	fa21 fc05 	lsr.w	ip, r1, r5
 80099da:	ea44 030c 	orr.w	r3, r4, ip
 80099de:	bf8c      	ite	hi
 80099e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099e4:	2400      	movls	r4, #0
 80099e6:	fa01 f000 	lsl.w	r0, r1, r0
 80099ea:	40ec      	lsrs	r4, r5
 80099ec:	ea40 0204 	orr.w	r2, r0, r4
 80099f0:	e7dd      	b.n	80099ae <__b2d+0x4a>
 80099f2:	ea44 030c 	orr.w	r3, r4, ip
 80099f6:	460a      	mov	r2, r1
 80099f8:	e7d9      	b.n	80099ae <__b2d+0x4a>
 80099fa:	bf00      	nop
 80099fc:	3ff00000 	.word	0x3ff00000

08009a00 <__d2b>:
 8009a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a04:	460e      	mov	r6, r1
 8009a06:	2101      	movs	r1, #1
 8009a08:	ec59 8b10 	vmov	r8, r9, d0
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	f7ff fcb5 	bl	800937c <_Balloc>
 8009a12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009a16:	4607      	mov	r7, r0
 8009a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a1c:	bb34      	cbnz	r4, 8009a6c <__d2b+0x6c>
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	f1b8 0300 	subs.w	r3, r8, #0
 8009a24:	d027      	beq.n	8009a76 <__d2b+0x76>
 8009a26:	a802      	add	r0, sp, #8
 8009a28:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009a2c:	f7ff fd89 	bl	8009542 <__lo0bits>
 8009a30:	9900      	ldr	r1, [sp, #0]
 8009a32:	b1f0      	cbz	r0, 8009a72 <__d2b+0x72>
 8009a34:	9a01      	ldr	r2, [sp, #4]
 8009a36:	f1c0 0320 	rsb	r3, r0, #32
 8009a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3e:	430b      	orrs	r3, r1
 8009a40:	40c2      	lsrs	r2, r0
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	9201      	str	r2, [sp, #4]
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	61bb      	str	r3, [r7, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bf14      	ite	ne
 8009a4e:	2102      	movne	r1, #2
 8009a50:	2101      	moveq	r1, #1
 8009a52:	6139      	str	r1, [r7, #16]
 8009a54:	b1c4      	cbz	r4, 8009a88 <__d2b+0x88>
 8009a56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009a5a:	4404      	add	r4, r0
 8009a5c:	6034      	str	r4, [r6, #0]
 8009a5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a62:	6028      	str	r0, [r5, #0]
 8009a64:	4638      	mov	r0, r7
 8009a66:	b003      	add	sp, #12
 8009a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a70:	e7d5      	b.n	8009a1e <__d2b+0x1e>
 8009a72:	6179      	str	r1, [r7, #20]
 8009a74:	e7e7      	b.n	8009a46 <__d2b+0x46>
 8009a76:	a801      	add	r0, sp, #4
 8009a78:	f7ff fd63 	bl	8009542 <__lo0bits>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	2101      	movs	r1, #1
 8009a82:	6139      	str	r1, [r7, #16]
 8009a84:	3020      	adds	r0, #32
 8009a86:	e7e5      	b.n	8009a54 <__d2b+0x54>
 8009a88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009a8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	6918      	ldr	r0, [r3, #16]
 8009a94:	f7ff fd36 	bl	8009504 <__hi0bits>
 8009a98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a9c:	e7e1      	b.n	8009a62 <__d2b+0x62>

08009a9e <__ratio>:
 8009a9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa2:	4688      	mov	r8, r1
 8009aa4:	4669      	mov	r1, sp
 8009aa6:	4681      	mov	r9, r0
 8009aa8:	f7ff ff5c 	bl	8009964 <__b2d>
 8009aac:	a901      	add	r1, sp, #4
 8009aae:	4640      	mov	r0, r8
 8009ab0:	ec57 6b10 	vmov	r6, r7, d0
 8009ab4:	f7ff ff56 	bl	8009964 <__b2d>
 8009ab8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009abc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ac0:	eba3 0c02 	sub.w	ip, r3, r2
 8009ac4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ace:	ec5b ab10 	vmov	sl, fp, d0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bfce      	itee	gt
 8009ad6:	463a      	movgt	r2, r7
 8009ad8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009adc:	465a      	movle	r2, fp
 8009ade:	4659      	mov	r1, fp
 8009ae0:	463d      	mov	r5, r7
 8009ae2:	bfd4      	ite	le
 8009ae4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009ae8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009aec:	4630      	mov	r0, r6
 8009aee:	ee10 2a10 	vmov	r2, s0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fec9 	bl	800088c <__aeabi_ddiv>
 8009afa:	ec41 0b10 	vmov	d0, r0, r1
 8009afe:	b003      	add	sp, #12
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b04 <__copybits>:
 8009b04:	3901      	subs	r1, #1
 8009b06:	b510      	push	{r4, lr}
 8009b08:	1149      	asrs	r1, r1, #5
 8009b0a:	6914      	ldr	r4, [r2, #16]
 8009b0c:	3101      	adds	r1, #1
 8009b0e:	f102 0314 	add.w	r3, r2, #20
 8009b12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	d303      	bcc.n	8009b28 <__copybits+0x24>
 8009b20:	2300      	movs	r3, #0
 8009b22:	428a      	cmp	r2, r1
 8009b24:	d305      	bcc.n	8009b32 <__copybits+0x2e>
 8009b26:	bd10      	pop	{r4, pc}
 8009b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2c:	f840 2b04 	str.w	r2, [r0], #4
 8009b30:	e7f3      	b.n	8009b1a <__copybits+0x16>
 8009b32:	f842 3b04 	str.w	r3, [r2], #4
 8009b36:	e7f4      	b.n	8009b22 <__copybits+0x1e>

08009b38 <__any_on>:
 8009b38:	f100 0214 	add.w	r2, r0, #20
 8009b3c:	6900      	ldr	r0, [r0, #16]
 8009b3e:	114b      	asrs	r3, r1, #5
 8009b40:	4298      	cmp	r0, r3
 8009b42:	b510      	push	{r4, lr}
 8009b44:	db11      	blt.n	8009b6a <__any_on+0x32>
 8009b46:	dd0a      	ble.n	8009b5e <__any_on+0x26>
 8009b48:	f011 011f 	ands.w	r1, r1, #31
 8009b4c:	d007      	beq.n	8009b5e <__any_on+0x26>
 8009b4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b52:	fa24 f001 	lsr.w	r0, r4, r1
 8009b56:	fa00 f101 	lsl.w	r1, r0, r1
 8009b5a:	428c      	cmp	r4, r1
 8009b5c:	d10b      	bne.n	8009b76 <__any_on+0x3e>
 8009b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d803      	bhi.n	8009b6e <__any_on+0x36>
 8009b66:	2000      	movs	r0, #0
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	e7f7      	b.n	8009b5e <__any_on+0x26>
 8009b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b72:	2900      	cmp	r1, #0
 8009b74:	d0f5      	beq.n	8009b62 <__any_on+0x2a>
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7f6      	b.n	8009b68 <__any_on+0x30>

08009b7a <_calloc_r>:
 8009b7a:	b538      	push	{r3, r4, r5, lr}
 8009b7c:	fb02 f401 	mul.w	r4, r2, r1
 8009b80:	4621      	mov	r1, r4
 8009b82:	f000 f857 	bl	8009c34 <_malloc_r>
 8009b86:	4605      	mov	r5, r0
 8009b88:	b118      	cbz	r0, 8009b92 <_calloc_r+0x18>
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f7fc fc9c 	bl	80064ca <memset>
 8009b92:	4628      	mov	r0, r5
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
	...

08009b98 <_free_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	d045      	beq.n	8009c2c <_free_r+0x94>
 8009ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba4:	1f0c      	subs	r4, r1, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bfb8      	it	lt
 8009baa:	18e4      	addlt	r4, r4, r3
 8009bac:	f000 fc0f 	bl	800a3ce <__malloc_lock>
 8009bb0:	4a1f      	ldr	r2, [pc, #124]	; (8009c30 <_free_r+0x98>)
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	b933      	cbnz	r3, 8009bc6 <_free_r+0x2e>
 8009bb8:	6063      	str	r3, [r4, #4]
 8009bba:	6014      	str	r4, [r2, #0]
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bc2:	f000 bc05 	b.w	800a3d0 <__malloc_unlock>
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	d90c      	bls.n	8009be4 <_free_r+0x4c>
 8009bca:	6821      	ldr	r1, [r4, #0]
 8009bcc:	1862      	adds	r2, r4, r1
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	bf04      	itt	eq
 8009bd2:	681a      	ldreq	r2, [r3, #0]
 8009bd4:	685b      	ldreq	r3, [r3, #4]
 8009bd6:	6063      	str	r3, [r4, #4]
 8009bd8:	bf04      	itt	eq
 8009bda:	1852      	addeq	r2, r2, r1
 8009bdc:	6022      	streq	r2, [r4, #0]
 8009bde:	6004      	str	r4, [r0, #0]
 8009be0:	e7ec      	b.n	8009bbc <_free_r+0x24>
 8009be2:	4613      	mov	r3, r2
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	b10a      	cbz	r2, 8009bec <_free_r+0x54>
 8009be8:	42a2      	cmp	r2, r4
 8009bea:	d9fa      	bls.n	8009be2 <_free_r+0x4a>
 8009bec:	6819      	ldr	r1, [r3, #0]
 8009bee:	1858      	adds	r0, r3, r1
 8009bf0:	42a0      	cmp	r0, r4
 8009bf2:	d10b      	bne.n	8009c0c <_free_r+0x74>
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	4401      	add	r1, r0
 8009bf8:	1858      	adds	r0, r3, r1
 8009bfa:	4282      	cmp	r2, r0
 8009bfc:	6019      	str	r1, [r3, #0]
 8009bfe:	d1dd      	bne.n	8009bbc <_free_r+0x24>
 8009c00:	6810      	ldr	r0, [r2, #0]
 8009c02:	6852      	ldr	r2, [r2, #4]
 8009c04:	605a      	str	r2, [r3, #4]
 8009c06:	4401      	add	r1, r0
 8009c08:	6019      	str	r1, [r3, #0]
 8009c0a:	e7d7      	b.n	8009bbc <_free_r+0x24>
 8009c0c:	d902      	bls.n	8009c14 <_free_r+0x7c>
 8009c0e:	230c      	movs	r3, #12
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	e7d3      	b.n	8009bbc <_free_r+0x24>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	1821      	adds	r1, r4, r0
 8009c18:	428a      	cmp	r2, r1
 8009c1a:	bf04      	itt	eq
 8009c1c:	6811      	ldreq	r1, [r2, #0]
 8009c1e:	6852      	ldreq	r2, [r2, #4]
 8009c20:	6062      	str	r2, [r4, #4]
 8009c22:	bf04      	itt	eq
 8009c24:	1809      	addeq	r1, r1, r0
 8009c26:	6021      	streq	r1, [r4, #0]
 8009c28:	605c      	str	r4, [r3, #4]
 8009c2a:	e7c7      	b.n	8009bbc <_free_r+0x24>
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	2000039c 	.word	0x2000039c

08009c34 <_malloc_r>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	1ccd      	adds	r5, r1, #3
 8009c38:	f025 0503 	bic.w	r5, r5, #3
 8009c3c:	3508      	adds	r5, #8
 8009c3e:	2d0c      	cmp	r5, #12
 8009c40:	bf38      	it	cc
 8009c42:	250c      	movcc	r5, #12
 8009c44:	2d00      	cmp	r5, #0
 8009c46:	4606      	mov	r6, r0
 8009c48:	db01      	blt.n	8009c4e <_malloc_r+0x1a>
 8009c4a:	42a9      	cmp	r1, r5
 8009c4c:	d903      	bls.n	8009c56 <_malloc_r+0x22>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	6033      	str	r3, [r6, #0]
 8009c52:	2000      	movs	r0, #0
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
 8009c56:	f000 fbba 	bl	800a3ce <__malloc_lock>
 8009c5a:	4a21      	ldr	r2, [pc, #132]	; (8009ce0 <_malloc_r+0xac>)
 8009c5c:	6814      	ldr	r4, [r2, #0]
 8009c5e:	4621      	mov	r1, r4
 8009c60:	b991      	cbnz	r1, 8009c88 <_malloc_r+0x54>
 8009c62:	4c20      	ldr	r4, [pc, #128]	; (8009ce4 <_malloc_r+0xb0>)
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	b91b      	cbnz	r3, 8009c70 <_malloc_r+0x3c>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f000 facf 	bl	800a20c <_sbrk_r>
 8009c6e:	6020      	str	r0, [r4, #0]
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 faca 	bl	800a20c <_sbrk_r>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d124      	bne.n	8009cc6 <_malloc_r+0x92>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	4630      	mov	r0, r6
 8009c82:	f000 fba5 	bl	800a3d0 <__malloc_unlock>
 8009c86:	e7e4      	b.n	8009c52 <_malloc_r+0x1e>
 8009c88:	680b      	ldr	r3, [r1, #0]
 8009c8a:	1b5b      	subs	r3, r3, r5
 8009c8c:	d418      	bmi.n	8009cc0 <_malloc_r+0x8c>
 8009c8e:	2b0b      	cmp	r3, #11
 8009c90:	d90f      	bls.n	8009cb2 <_malloc_r+0x7e>
 8009c92:	600b      	str	r3, [r1, #0]
 8009c94:	50cd      	str	r5, [r1, r3]
 8009c96:	18cc      	adds	r4, r1, r3
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 fb99 	bl	800a3d0 <__malloc_unlock>
 8009c9e:	f104 000b 	add.w	r0, r4, #11
 8009ca2:	1d23      	adds	r3, r4, #4
 8009ca4:	f020 0007 	bic.w	r0, r0, #7
 8009ca8:	1ac3      	subs	r3, r0, r3
 8009caa:	d0d3      	beq.n	8009c54 <_malloc_r+0x20>
 8009cac:	425a      	negs	r2, r3
 8009cae:	50e2      	str	r2, [r4, r3]
 8009cb0:	e7d0      	b.n	8009c54 <_malloc_r+0x20>
 8009cb2:	428c      	cmp	r4, r1
 8009cb4:	684b      	ldr	r3, [r1, #4]
 8009cb6:	bf16      	itet	ne
 8009cb8:	6063      	strne	r3, [r4, #4]
 8009cba:	6013      	streq	r3, [r2, #0]
 8009cbc:	460c      	movne	r4, r1
 8009cbe:	e7eb      	b.n	8009c98 <_malloc_r+0x64>
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	6849      	ldr	r1, [r1, #4]
 8009cc4:	e7cc      	b.n	8009c60 <_malloc_r+0x2c>
 8009cc6:	1cc4      	adds	r4, r0, #3
 8009cc8:	f024 0403 	bic.w	r4, r4, #3
 8009ccc:	42a0      	cmp	r0, r4
 8009cce:	d005      	beq.n	8009cdc <_malloc_r+0xa8>
 8009cd0:	1a21      	subs	r1, r4, r0
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f000 fa9a 	bl	800a20c <_sbrk_r>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d0cf      	beq.n	8009c7c <_malloc_r+0x48>
 8009cdc:	6025      	str	r5, [r4, #0]
 8009cde:	e7db      	b.n	8009c98 <_malloc_r+0x64>
 8009ce0:	2000039c 	.word	0x2000039c
 8009ce4:	200003a0 	.word	0x200003a0

08009ce8 <__ssputs_r>:
 8009ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	688e      	ldr	r6, [r1, #8]
 8009cee:	429e      	cmp	r6, r3
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4690      	mov	r8, r2
 8009cf6:	4699      	mov	r9, r3
 8009cf8:	d837      	bhi.n	8009d6a <__ssputs_r+0x82>
 8009cfa:	898a      	ldrh	r2, [r1, #12]
 8009cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d00:	d031      	beq.n	8009d66 <__ssputs_r+0x7e>
 8009d02:	6825      	ldr	r5, [r4, #0]
 8009d04:	6909      	ldr	r1, [r1, #16]
 8009d06:	1a6f      	subs	r7, r5, r1
 8009d08:	6965      	ldr	r5, [r4, #20]
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d10:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d14:	f109 0301 	add.w	r3, r9, #1
 8009d18:	443b      	add	r3, r7
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	bf38      	it	cc
 8009d1e:	461d      	movcc	r5, r3
 8009d20:	0553      	lsls	r3, r2, #21
 8009d22:	d530      	bpl.n	8009d86 <__ssputs_r+0x9e>
 8009d24:	4629      	mov	r1, r5
 8009d26:	f7ff ff85 	bl	8009c34 <_malloc_r>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	b950      	cbnz	r0, 8009d44 <__ssputs_r+0x5c>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	f8ca 3000 	str.w	r3, [sl]
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d44:	463a      	mov	r2, r7
 8009d46:	6921      	ldr	r1, [r4, #16]
 8009d48:	f7fc fbb4 	bl	80064b4 <memcpy>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	6126      	str	r6, [r4, #16]
 8009d5a:	6165      	str	r5, [r4, #20]
 8009d5c:	443e      	add	r6, r7
 8009d5e:	1bed      	subs	r5, r5, r7
 8009d60:	6026      	str	r6, [r4, #0]
 8009d62:	60a5      	str	r5, [r4, #8]
 8009d64:	464e      	mov	r6, r9
 8009d66:	454e      	cmp	r6, r9
 8009d68:	d900      	bls.n	8009d6c <__ssputs_r+0x84>
 8009d6a:	464e      	mov	r6, r9
 8009d6c:	4632      	mov	r2, r6
 8009d6e:	4641      	mov	r1, r8
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	f000 fb13 	bl	800a39c <memmove>
 8009d76:	68a3      	ldr	r3, [r4, #8]
 8009d78:	1b9b      	subs	r3, r3, r6
 8009d7a:	60a3      	str	r3, [r4, #8]
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	441e      	add	r6, r3
 8009d80:	6026      	str	r6, [r4, #0]
 8009d82:	2000      	movs	r0, #0
 8009d84:	e7dc      	b.n	8009d40 <__ssputs_r+0x58>
 8009d86:	462a      	mov	r2, r5
 8009d88:	f000 fb23 	bl	800a3d2 <_realloc_r>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1e2      	bne.n	8009d58 <__ssputs_r+0x70>
 8009d92:	6921      	ldr	r1, [r4, #16]
 8009d94:	4650      	mov	r0, sl
 8009d96:	f7ff feff 	bl	8009b98 <_free_r>
 8009d9a:	e7c8      	b.n	8009d2e <__ssputs_r+0x46>

08009d9c <_svfiprintf_r>:
 8009d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	461d      	mov	r5, r3
 8009da2:	898b      	ldrh	r3, [r1, #12]
 8009da4:	061f      	lsls	r7, r3, #24
 8009da6:	b09d      	sub	sp, #116	; 0x74
 8009da8:	4680      	mov	r8, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	4616      	mov	r6, r2
 8009dae:	d50f      	bpl.n	8009dd0 <_svfiprintf_r+0x34>
 8009db0:	690b      	ldr	r3, [r1, #16]
 8009db2:	b96b      	cbnz	r3, 8009dd0 <_svfiprintf_r+0x34>
 8009db4:	2140      	movs	r1, #64	; 0x40
 8009db6:	f7ff ff3d 	bl	8009c34 <_malloc_r>
 8009dba:	6020      	str	r0, [r4, #0]
 8009dbc:	6120      	str	r0, [r4, #16]
 8009dbe:	b928      	cbnz	r0, 8009dcc <_svfiprintf_r+0x30>
 8009dc0:	230c      	movs	r3, #12
 8009dc2:	f8c8 3000 	str.w	r3, [r8]
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	e0c8      	b.n	8009f5e <_svfiprintf_r+0x1c2>
 8009dcc:	2340      	movs	r3, #64	; 0x40
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dda:	2330      	movs	r3, #48	; 0x30
 8009ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009de0:	9503      	str	r5, [sp, #12]
 8009de2:	f04f 0b01 	mov.w	fp, #1
 8009de6:	4637      	mov	r7, r6
 8009de8:	463d      	mov	r5, r7
 8009dea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dee:	b10b      	cbz	r3, 8009df4 <_svfiprintf_r+0x58>
 8009df0:	2b25      	cmp	r3, #37	; 0x25
 8009df2:	d13e      	bne.n	8009e72 <_svfiprintf_r+0xd6>
 8009df4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009df8:	d00b      	beq.n	8009e12 <_svfiprintf_r+0x76>
 8009dfa:	4653      	mov	r3, sl
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4640      	mov	r0, r8
 8009e02:	f7ff ff71 	bl	8009ce8 <__ssputs_r>
 8009e06:	3001      	adds	r0, #1
 8009e08:	f000 80a4 	beq.w	8009f54 <_svfiprintf_r+0x1b8>
 8009e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0e:	4453      	add	r3, sl
 8009e10:	9309      	str	r3, [sp, #36]	; 0x24
 8009e12:	783b      	ldrb	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 809d 	beq.w	8009f54 <_svfiprintf_r+0x1b8>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	9307      	str	r3, [sp, #28]
 8009e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e2e:	462f      	mov	r7, r5
 8009e30:	2205      	movs	r2, #5
 8009e32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e36:	4850      	ldr	r0, [pc, #320]	; (8009f78 <_svfiprintf_r+0x1dc>)
 8009e38:	f7f6 f9f2 	bl	8000220 <memchr>
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	b9d0      	cbnz	r0, 8009e76 <_svfiprintf_r+0xda>
 8009e40:	06d9      	lsls	r1, r3, #27
 8009e42:	bf44      	itt	mi
 8009e44:	2220      	movmi	r2, #32
 8009e46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e4a:	071a      	lsls	r2, r3, #28
 8009e4c:	bf44      	itt	mi
 8009e4e:	222b      	movmi	r2, #43	; 0x2b
 8009e50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e54:	782a      	ldrb	r2, [r5, #0]
 8009e56:	2a2a      	cmp	r2, #42	; 0x2a
 8009e58:	d015      	beq.n	8009e86 <_svfiprintf_r+0xea>
 8009e5a:	9a07      	ldr	r2, [sp, #28]
 8009e5c:	462f      	mov	r7, r5
 8009e5e:	2000      	movs	r0, #0
 8009e60:	250a      	movs	r5, #10
 8009e62:	4639      	mov	r1, r7
 8009e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e68:	3b30      	subs	r3, #48	; 0x30
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	d94d      	bls.n	8009f0a <_svfiprintf_r+0x16e>
 8009e6e:	b1b8      	cbz	r0, 8009ea0 <_svfiprintf_r+0x104>
 8009e70:	e00f      	b.n	8009e92 <_svfiprintf_r+0xf6>
 8009e72:	462f      	mov	r7, r5
 8009e74:	e7b8      	b.n	8009de8 <_svfiprintf_r+0x4c>
 8009e76:	4a40      	ldr	r2, [pc, #256]	; (8009f78 <_svfiprintf_r+0x1dc>)
 8009e78:	1a80      	subs	r0, r0, r2
 8009e7a:	fa0b f000 	lsl.w	r0, fp, r0
 8009e7e:	4318      	orrs	r0, r3
 8009e80:	9004      	str	r0, [sp, #16]
 8009e82:	463d      	mov	r5, r7
 8009e84:	e7d3      	b.n	8009e2e <_svfiprintf_r+0x92>
 8009e86:	9a03      	ldr	r2, [sp, #12]
 8009e88:	1d11      	adds	r1, r2, #4
 8009e8a:	6812      	ldr	r2, [r2, #0]
 8009e8c:	9103      	str	r1, [sp, #12]
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	db01      	blt.n	8009e96 <_svfiprintf_r+0xfa>
 8009e92:	9207      	str	r2, [sp, #28]
 8009e94:	e004      	b.n	8009ea0 <_svfiprintf_r+0x104>
 8009e96:	4252      	negs	r2, r2
 8009e98:	f043 0302 	orr.w	r3, r3, #2
 8009e9c:	9207      	str	r2, [sp, #28]
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	783b      	ldrb	r3, [r7, #0]
 8009ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea4:	d10c      	bne.n	8009ec0 <_svfiprintf_r+0x124>
 8009ea6:	787b      	ldrb	r3, [r7, #1]
 8009ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eaa:	d133      	bne.n	8009f14 <_svfiprintf_r+0x178>
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	1d1a      	adds	r2, r3, #4
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	9203      	str	r2, [sp, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bfb8      	it	lt
 8009eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ebc:	3702      	adds	r7, #2
 8009ebe:	9305      	str	r3, [sp, #20]
 8009ec0:	4d2e      	ldr	r5, [pc, #184]	; (8009f7c <_svfiprintf_r+0x1e0>)
 8009ec2:	7839      	ldrb	r1, [r7, #0]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f7f6 f9aa 	bl	8000220 <memchr>
 8009ecc:	b138      	cbz	r0, 8009ede <_svfiprintf_r+0x142>
 8009ece:	2340      	movs	r3, #64	; 0x40
 8009ed0:	1b40      	subs	r0, r0, r5
 8009ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed6:	9b04      	ldr	r3, [sp, #16]
 8009ed8:	4303      	orrs	r3, r0
 8009eda:	3701      	adds	r7, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	7839      	ldrb	r1, [r7, #0]
 8009ee0:	4827      	ldr	r0, [pc, #156]	; (8009f80 <_svfiprintf_r+0x1e4>)
 8009ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee6:	2206      	movs	r2, #6
 8009ee8:	1c7e      	adds	r6, r7, #1
 8009eea:	f7f6 f999 	bl	8000220 <memchr>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d038      	beq.n	8009f64 <_svfiprintf_r+0x1c8>
 8009ef2:	4b24      	ldr	r3, [pc, #144]	; (8009f84 <_svfiprintf_r+0x1e8>)
 8009ef4:	bb13      	cbnz	r3, 8009f3c <_svfiprintf_r+0x1a0>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	3307      	adds	r3, #7
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	3308      	adds	r3, #8
 8009f00:	9303      	str	r3, [sp, #12]
 8009f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f04:	444b      	add	r3, r9
 8009f06:	9309      	str	r3, [sp, #36]	; 0x24
 8009f08:	e76d      	b.n	8009de6 <_svfiprintf_r+0x4a>
 8009f0a:	fb05 3202 	mla	r2, r5, r2, r3
 8009f0e:	2001      	movs	r0, #1
 8009f10:	460f      	mov	r7, r1
 8009f12:	e7a6      	b.n	8009e62 <_svfiprintf_r+0xc6>
 8009f14:	2300      	movs	r3, #0
 8009f16:	3701      	adds	r7, #1
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	250a      	movs	r5, #10
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f24:	3a30      	subs	r2, #48	; 0x30
 8009f26:	2a09      	cmp	r2, #9
 8009f28:	d903      	bls.n	8009f32 <_svfiprintf_r+0x196>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0c8      	beq.n	8009ec0 <_svfiprintf_r+0x124>
 8009f2e:	9105      	str	r1, [sp, #20]
 8009f30:	e7c6      	b.n	8009ec0 <_svfiprintf_r+0x124>
 8009f32:	fb05 2101 	mla	r1, r5, r1, r2
 8009f36:	2301      	movs	r3, #1
 8009f38:	4607      	mov	r7, r0
 8009f3a:	e7f0      	b.n	8009f1e <_svfiprintf_r+0x182>
 8009f3c:	ab03      	add	r3, sp, #12
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4622      	mov	r2, r4
 8009f42:	4b11      	ldr	r3, [pc, #68]	; (8009f88 <_svfiprintf_r+0x1ec>)
 8009f44:	a904      	add	r1, sp, #16
 8009f46:	4640      	mov	r0, r8
 8009f48:	f7fc fb5c 	bl	8006604 <_printf_float>
 8009f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f50:	4681      	mov	r9, r0
 8009f52:	d1d6      	bne.n	8009f02 <_svfiprintf_r+0x166>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	065b      	lsls	r3, r3, #25
 8009f58:	f53f af35 	bmi.w	8009dc6 <_svfiprintf_r+0x2a>
 8009f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5e:	b01d      	add	sp, #116	; 0x74
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <_svfiprintf_r+0x1ec>)
 8009f6c:	a904      	add	r1, sp, #16
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7fc fdfe 	bl	8006b70 <_printf_i>
 8009f74:	e7ea      	b.n	8009f4c <_svfiprintf_r+0x1b0>
 8009f76:	bf00      	nop
 8009f78:	0800adfc 	.word	0x0800adfc
 8009f7c:	0800ae02 	.word	0x0800ae02
 8009f80:	0800ae06 	.word	0x0800ae06
 8009f84:	08006605 	.word	0x08006605
 8009f88:	08009ce9 	.word	0x08009ce9

08009f8c <__sfputc_r>:
 8009f8c:	6893      	ldr	r3, [r2, #8]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	b410      	push	{r4}
 8009f94:	6093      	str	r3, [r2, #8]
 8009f96:	da08      	bge.n	8009faa <__sfputc_r+0x1e>
 8009f98:	6994      	ldr	r4, [r2, #24]
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	db01      	blt.n	8009fa2 <__sfputc_r+0x16>
 8009f9e:	290a      	cmp	r1, #10
 8009fa0:	d103      	bne.n	8009faa <__sfputc_r+0x1e>
 8009fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa6:	f7fd bdb7 	b.w	8007b18 <__swbuf_r>
 8009faa:	6813      	ldr	r3, [r2, #0]
 8009fac:	1c58      	adds	r0, r3, #1
 8009fae:	6010      	str	r0, [r2, #0]
 8009fb0:	7019      	strb	r1, [r3, #0]
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <__sfputs_r>:
 8009fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	18d5      	adds	r5, r2, r3
 8009fc4:	42ac      	cmp	r4, r5
 8009fc6:	d101      	bne.n	8009fcc <__sfputs_r+0x12>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e007      	b.n	8009fdc <__sfputs_r+0x22>
 8009fcc:	463a      	mov	r2, r7
 8009fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ffda 	bl	8009f8c <__sfputc_r>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d1f3      	bne.n	8009fc4 <__sfputs_r+0xa>
 8009fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fe0 <_vfiprintf_r>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	b09d      	sub	sp, #116	; 0x74
 8009fe8:	4617      	mov	r7, r2
 8009fea:	461d      	mov	r5, r3
 8009fec:	4606      	mov	r6, r0
 8009fee:	b118      	cbz	r0, 8009ff8 <_vfiprintf_r+0x18>
 8009ff0:	6983      	ldr	r3, [r0, #24]
 8009ff2:	b90b      	cbnz	r3, 8009ff8 <_vfiprintf_r+0x18>
 8009ff4:	f7fe fd84 	bl	8008b00 <__sinit>
 8009ff8:	4b7c      	ldr	r3, [pc, #496]	; (800a1ec <_vfiprintf_r+0x20c>)
 8009ffa:	429c      	cmp	r4, r3
 8009ffc:	d158      	bne.n	800a0b0 <_vfiprintf_r+0xd0>
 8009ffe:	6874      	ldr	r4, [r6, #4]
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	0718      	lsls	r0, r3, #28
 800a004:	d55e      	bpl.n	800a0c4 <_vfiprintf_r+0xe4>
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d05b      	beq.n	800a0c4 <_vfiprintf_r+0xe4>
 800a00c:	2300      	movs	r3, #0
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	2320      	movs	r3, #32
 800a012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a016:	2330      	movs	r3, #48	; 0x30
 800a018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a01c:	9503      	str	r5, [sp, #12]
 800a01e:	f04f 0b01 	mov.w	fp, #1
 800a022:	46b8      	mov	r8, r7
 800a024:	4645      	mov	r5, r8
 800a026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a02a:	b10b      	cbz	r3, 800a030 <_vfiprintf_r+0x50>
 800a02c:	2b25      	cmp	r3, #37	; 0x25
 800a02e:	d154      	bne.n	800a0da <_vfiprintf_r+0xfa>
 800a030:	ebb8 0a07 	subs.w	sl, r8, r7
 800a034:	d00b      	beq.n	800a04e <_vfiprintf_r+0x6e>
 800a036:	4653      	mov	r3, sl
 800a038:	463a      	mov	r2, r7
 800a03a:	4621      	mov	r1, r4
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7ff ffbc 	bl	8009fba <__sfputs_r>
 800a042:	3001      	adds	r0, #1
 800a044:	f000 80c2 	beq.w	800a1cc <_vfiprintf_r+0x1ec>
 800a048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a04a:	4453      	add	r3, sl
 800a04c:	9309      	str	r3, [sp, #36]	; 0x24
 800a04e:	f898 3000 	ldrb.w	r3, [r8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 80ba 	beq.w	800a1cc <_vfiprintf_r+0x1ec>
 800a058:	2300      	movs	r3, #0
 800a05a:	f04f 32ff 	mov.w	r2, #4294967295
 800a05e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a062:	9304      	str	r3, [sp, #16]
 800a064:	9307      	str	r3, [sp, #28]
 800a066:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a06a:	931a      	str	r3, [sp, #104]	; 0x68
 800a06c:	46a8      	mov	r8, r5
 800a06e:	2205      	movs	r2, #5
 800a070:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a074:	485e      	ldr	r0, [pc, #376]	; (800a1f0 <_vfiprintf_r+0x210>)
 800a076:	f7f6 f8d3 	bl	8000220 <memchr>
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	bb78      	cbnz	r0, 800a0de <_vfiprintf_r+0xfe>
 800a07e:	06d9      	lsls	r1, r3, #27
 800a080:	bf44      	itt	mi
 800a082:	2220      	movmi	r2, #32
 800a084:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a088:	071a      	lsls	r2, r3, #28
 800a08a:	bf44      	itt	mi
 800a08c:	222b      	movmi	r2, #43	; 0x2b
 800a08e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a092:	782a      	ldrb	r2, [r5, #0]
 800a094:	2a2a      	cmp	r2, #42	; 0x2a
 800a096:	d02a      	beq.n	800a0ee <_vfiprintf_r+0x10e>
 800a098:	9a07      	ldr	r2, [sp, #28]
 800a09a:	46a8      	mov	r8, r5
 800a09c:	2000      	movs	r0, #0
 800a09e:	250a      	movs	r5, #10
 800a0a0:	4641      	mov	r1, r8
 800a0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a6:	3b30      	subs	r3, #48	; 0x30
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d969      	bls.n	800a180 <_vfiprintf_r+0x1a0>
 800a0ac:	b360      	cbz	r0, 800a108 <_vfiprintf_r+0x128>
 800a0ae:	e024      	b.n	800a0fa <_vfiprintf_r+0x11a>
 800a0b0:	4b50      	ldr	r3, [pc, #320]	; (800a1f4 <_vfiprintf_r+0x214>)
 800a0b2:	429c      	cmp	r4, r3
 800a0b4:	d101      	bne.n	800a0ba <_vfiprintf_r+0xda>
 800a0b6:	68b4      	ldr	r4, [r6, #8]
 800a0b8:	e7a2      	b.n	800a000 <_vfiprintf_r+0x20>
 800a0ba:	4b4f      	ldr	r3, [pc, #316]	; (800a1f8 <_vfiprintf_r+0x218>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	bf08      	it	eq
 800a0c0:	68f4      	ldreq	r4, [r6, #12]
 800a0c2:	e79d      	b.n	800a000 <_vfiprintf_r+0x20>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7fd fd78 	bl	8007bbc <__swsetup_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d09d      	beq.n	800a00c <_vfiprintf_r+0x2c>
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	b01d      	add	sp, #116	; 0x74
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	46a8      	mov	r8, r5
 800a0dc:	e7a2      	b.n	800a024 <_vfiprintf_r+0x44>
 800a0de:	4a44      	ldr	r2, [pc, #272]	; (800a1f0 <_vfiprintf_r+0x210>)
 800a0e0:	1a80      	subs	r0, r0, r2
 800a0e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a0e6:	4318      	orrs	r0, r3
 800a0e8:	9004      	str	r0, [sp, #16]
 800a0ea:	4645      	mov	r5, r8
 800a0ec:	e7be      	b.n	800a06c <_vfiprintf_r+0x8c>
 800a0ee:	9a03      	ldr	r2, [sp, #12]
 800a0f0:	1d11      	adds	r1, r2, #4
 800a0f2:	6812      	ldr	r2, [r2, #0]
 800a0f4:	9103      	str	r1, [sp, #12]
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	db01      	blt.n	800a0fe <_vfiprintf_r+0x11e>
 800a0fa:	9207      	str	r2, [sp, #28]
 800a0fc:	e004      	b.n	800a108 <_vfiprintf_r+0x128>
 800a0fe:	4252      	negs	r2, r2
 800a100:	f043 0302 	orr.w	r3, r3, #2
 800a104:	9207      	str	r2, [sp, #28]
 800a106:	9304      	str	r3, [sp, #16]
 800a108:	f898 3000 	ldrb.w	r3, [r8]
 800a10c:	2b2e      	cmp	r3, #46	; 0x2e
 800a10e:	d10e      	bne.n	800a12e <_vfiprintf_r+0x14e>
 800a110:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a114:	2b2a      	cmp	r3, #42	; 0x2a
 800a116:	d138      	bne.n	800a18a <_vfiprintf_r+0x1aa>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	1d1a      	adds	r2, r3, #4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	9203      	str	r2, [sp, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfb8      	it	lt
 800a124:	f04f 33ff 	movlt.w	r3, #4294967295
 800a128:	f108 0802 	add.w	r8, r8, #2
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	4d33      	ldr	r5, [pc, #204]	; (800a1fc <_vfiprintf_r+0x21c>)
 800a130:	f898 1000 	ldrb.w	r1, [r8]
 800a134:	2203      	movs	r2, #3
 800a136:	4628      	mov	r0, r5
 800a138:	f7f6 f872 	bl	8000220 <memchr>
 800a13c:	b140      	cbz	r0, 800a150 <_vfiprintf_r+0x170>
 800a13e:	2340      	movs	r3, #64	; 0x40
 800a140:	1b40      	subs	r0, r0, r5
 800a142:	fa03 f000 	lsl.w	r0, r3, r0
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	4303      	orrs	r3, r0
 800a14a:	f108 0801 	add.w	r8, r8, #1
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	f898 1000 	ldrb.w	r1, [r8]
 800a154:	482a      	ldr	r0, [pc, #168]	; (800a200 <_vfiprintf_r+0x220>)
 800a156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a15a:	2206      	movs	r2, #6
 800a15c:	f108 0701 	add.w	r7, r8, #1
 800a160:	f7f6 f85e 	bl	8000220 <memchr>
 800a164:	2800      	cmp	r0, #0
 800a166:	d037      	beq.n	800a1d8 <_vfiprintf_r+0x1f8>
 800a168:	4b26      	ldr	r3, [pc, #152]	; (800a204 <_vfiprintf_r+0x224>)
 800a16a:	bb1b      	cbnz	r3, 800a1b4 <_vfiprintf_r+0x1d4>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	3307      	adds	r3, #7
 800a170:	f023 0307 	bic.w	r3, r3, #7
 800a174:	3308      	adds	r3, #8
 800a176:	9303      	str	r3, [sp, #12]
 800a178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17a:	444b      	add	r3, r9
 800a17c:	9309      	str	r3, [sp, #36]	; 0x24
 800a17e:	e750      	b.n	800a022 <_vfiprintf_r+0x42>
 800a180:	fb05 3202 	mla	r2, r5, r2, r3
 800a184:	2001      	movs	r0, #1
 800a186:	4688      	mov	r8, r1
 800a188:	e78a      	b.n	800a0a0 <_vfiprintf_r+0xc0>
 800a18a:	2300      	movs	r3, #0
 800a18c:	f108 0801 	add.w	r8, r8, #1
 800a190:	9305      	str	r3, [sp, #20]
 800a192:	4619      	mov	r1, r3
 800a194:	250a      	movs	r5, #10
 800a196:	4640      	mov	r0, r8
 800a198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a19c:	3a30      	subs	r2, #48	; 0x30
 800a19e:	2a09      	cmp	r2, #9
 800a1a0:	d903      	bls.n	800a1aa <_vfiprintf_r+0x1ca>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0c3      	beq.n	800a12e <_vfiprintf_r+0x14e>
 800a1a6:	9105      	str	r1, [sp, #20]
 800a1a8:	e7c1      	b.n	800a12e <_vfiprintf_r+0x14e>
 800a1aa:	fb05 2101 	mla	r1, r5, r1, r2
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	e7f0      	b.n	800a196 <_vfiprintf_r+0x1b6>
 800a1b4:	ab03      	add	r3, sp, #12
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4b13      	ldr	r3, [pc, #76]	; (800a208 <_vfiprintf_r+0x228>)
 800a1bc:	a904      	add	r1, sp, #16
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7fc fa20 	bl	8006604 <_printf_float>
 800a1c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	d1d5      	bne.n	800a178 <_vfiprintf_r+0x198>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	065b      	lsls	r3, r3, #25
 800a1d0:	f53f af7e 	bmi.w	800a0d0 <_vfiprintf_r+0xf0>
 800a1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1d6:	e77d      	b.n	800a0d4 <_vfiprintf_r+0xf4>
 800a1d8:	ab03      	add	r3, sp, #12
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	4622      	mov	r2, r4
 800a1de:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <_vfiprintf_r+0x228>)
 800a1e0:	a904      	add	r1, sp, #16
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7fc fcc4 	bl	8006b70 <_printf_i>
 800a1e8:	e7ec      	b.n	800a1c4 <_vfiprintf_r+0x1e4>
 800a1ea:	bf00      	nop
 800a1ec:	0800acb0 	.word	0x0800acb0
 800a1f0:	0800adfc 	.word	0x0800adfc
 800a1f4:	0800acd0 	.word	0x0800acd0
 800a1f8:	0800ac90 	.word	0x0800ac90
 800a1fc:	0800ae02 	.word	0x0800ae02
 800a200:	0800ae06 	.word	0x0800ae06
 800a204:	08006605 	.word	0x08006605
 800a208:	08009fbb 	.word	0x08009fbb

0800a20c <_sbrk_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4c06      	ldr	r4, [pc, #24]	; (800a228 <_sbrk_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4605      	mov	r5, r0
 800a214:	4608      	mov	r0, r1
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	f7f8 ff4e 	bl	80030b8 <_sbrk>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_sbrk_r+0x1a>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	b103      	cbz	r3, 800a226 <_sbrk_r+0x1a>
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20000ac4 	.word	0x20000ac4

0800a22c <__sread>:
 800a22c:	b510      	push	{r4, lr}
 800a22e:	460c      	mov	r4, r1
 800a230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a234:	f000 f8f4 	bl	800a420 <_read_r>
 800a238:	2800      	cmp	r0, #0
 800a23a:	bfab      	itete	ge
 800a23c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a23e:	89a3      	ldrhlt	r3, [r4, #12]
 800a240:	181b      	addge	r3, r3, r0
 800a242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a246:	bfac      	ite	ge
 800a248:	6563      	strge	r3, [r4, #84]	; 0x54
 800a24a:	81a3      	strhlt	r3, [r4, #12]
 800a24c:	bd10      	pop	{r4, pc}

0800a24e <__swrite>:
 800a24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a252:	461f      	mov	r7, r3
 800a254:	898b      	ldrh	r3, [r1, #12]
 800a256:	05db      	lsls	r3, r3, #23
 800a258:	4605      	mov	r5, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	4616      	mov	r6, r2
 800a25e:	d505      	bpl.n	800a26c <__swrite+0x1e>
 800a260:	2302      	movs	r3, #2
 800a262:	2200      	movs	r2, #0
 800a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a268:	f000 f886 	bl	800a378 <_lseek_r>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	4632      	mov	r2, r6
 800a27a:	463b      	mov	r3, r7
 800a27c:	4628      	mov	r0, r5
 800a27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	f000 b835 	b.w	800a2f0 <_write_r>

0800a286 <__sseek>:
 800a286:	b510      	push	{r4, lr}
 800a288:	460c      	mov	r4, r1
 800a28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28e:	f000 f873 	bl	800a378 <_lseek_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	bf15      	itete	ne
 800a298:	6560      	strne	r0, [r4, #84]	; 0x54
 800a29a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a29e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2a2:	81a3      	strheq	r3, [r4, #12]
 800a2a4:	bf18      	it	ne
 800a2a6:	81a3      	strhne	r3, [r4, #12]
 800a2a8:	bd10      	pop	{r4, pc}

0800a2aa <__sclose>:
 800a2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ae:	f000 b831 	b.w	800a314 <_close_r>

0800a2b2 <strncmp>:
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	b16a      	cbz	r2, 800a2d2 <strncmp+0x20>
 800a2b6:	3901      	subs	r1, #1
 800a2b8:	1884      	adds	r4, r0, r2
 800a2ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a2be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d103      	bne.n	800a2ce <strncmp+0x1c>
 800a2c6:	42a0      	cmp	r0, r4
 800a2c8:	d001      	beq.n	800a2ce <strncmp+0x1c>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1f5      	bne.n	800a2ba <strncmp+0x8>
 800a2ce:	1a98      	subs	r0, r3, r2
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	e7fc      	b.n	800a2d0 <strncmp+0x1e>

0800a2d6 <__ascii_wctomb>:
 800a2d6:	b149      	cbz	r1, 800a2ec <__ascii_wctomb+0x16>
 800a2d8:	2aff      	cmp	r2, #255	; 0xff
 800a2da:	bf85      	ittet	hi
 800a2dc:	238a      	movhi	r3, #138	; 0x8a
 800a2de:	6003      	strhi	r3, [r0, #0]
 800a2e0:	700a      	strbls	r2, [r1, #0]
 800a2e2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2e6:	bf98      	it	ls
 800a2e8:	2001      	movls	r0, #1
 800a2ea:	4770      	bx	lr
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4770      	bx	lr

0800a2f0 <_write_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4c07      	ldr	r4, [pc, #28]	; (800a310 <_write_r+0x20>)
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	6022      	str	r2, [r4, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f8 fe89 	bl	8003016 <_write>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_write_r+0x1e>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_write_r+0x1e>
 800a30c:	602b      	str	r3, [r5, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20000ac4 	.word	0x20000ac4

0800a314 <_close_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4c06      	ldr	r4, [pc, #24]	; (800a330 <_close_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4605      	mov	r5, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	f7f8 fe95 	bl	800304e <_close>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_close_r+0x1a>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_close_r+0x1a>
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000ac4 	.word	0x20000ac4

0800a334 <_fstat_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4c07      	ldr	r4, [pc, #28]	; (800a354 <_fstat_r+0x20>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4605      	mov	r5, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	4611      	mov	r1, r2
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	f7f8 fe90 	bl	8003066 <_fstat>
 800a346:	1c43      	adds	r3, r0, #1
 800a348:	d102      	bne.n	800a350 <_fstat_r+0x1c>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	b103      	cbz	r3, 800a350 <_fstat_r+0x1c>
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	bd38      	pop	{r3, r4, r5, pc}
 800a352:	bf00      	nop
 800a354:	20000ac4 	.word	0x20000ac4

0800a358 <_isatty_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4c06      	ldr	r4, [pc, #24]	; (800a374 <_isatty_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4605      	mov	r5, r0
 800a360:	4608      	mov	r0, r1
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	f7f8 fe8f 	bl	8003086 <_isatty>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_isatty_r+0x1a>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_isatty_r+0x1a>
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	20000ac4 	.word	0x20000ac4

0800a378 <_lseek_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4c07      	ldr	r4, [pc, #28]	; (800a398 <_lseek_r+0x20>)
 800a37c:	4605      	mov	r5, r0
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	2200      	movs	r2, #0
 800a384:	6022      	str	r2, [r4, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	f7f8 fe88 	bl	800309c <_lseek>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_lseek_r+0x1e>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	b103      	cbz	r3, 800a396 <_lseek_r+0x1e>
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	20000ac4 	.word	0x20000ac4

0800a39c <memmove>:
 800a39c:	4288      	cmp	r0, r1
 800a39e:	b510      	push	{r4, lr}
 800a3a0:	eb01 0302 	add.w	r3, r1, r2
 800a3a4:	d807      	bhi.n	800a3b6 <memmove+0x1a>
 800a3a6:	1e42      	subs	r2, r0, #1
 800a3a8:	4299      	cmp	r1, r3
 800a3aa:	d00a      	beq.n	800a3c2 <memmove+0x26>
 800a3ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3b4:	e7f8      	b.n	800a3a8 <memmove+0xc>
 800a3b6:	4283      	cmp	r3, r0
 800a3b8:	d9f5      	bls.n	800a3a6 <memmove+0xa>
 800a3ba:	1881      	adds	r1, r0, r2
 800a3bc:	1ad2      	subs	r2, r2, r3
 800a3be:	42d3      	cmn	r3, r2
 800a3c0:	d100      	bne.n	800a3c4 <memmove+0x28>
 800a3c2:	bd10      	pop	{r4, pc}
 800a3c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3cc:	e7f7      	b.n	800a3be <memmove+0x22>

0800a3ce <__malloc_lock>:
 800a3ce:	4770      	bx	lr

0800a3d0 <__malloc_unlock>:
 800a3d0:	4770      	bx	lr

0800a3d2 <_realloc_r>:
 800a3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	4614      	mov	r4, r2
 800a3d8:	460e      	mov	r6, r1
 800a3da:	b921      	cbnz	r1, 800a3e6 <_realloc_r+0x14>
 800a3dc:	4611      	mov	r1, r2
 800a3de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3e2:	f7ff bc27 	b.w	8009c34 <_malloc_r>
 800a3e6:	b922      	cbnz	r2, 800a3f2 <_realloc_r+0x20>
 800a3e8:	f7ff fbd6 	bl	8009b98 <_free_r>
 800a3ec:	4625      	mov	r5, r4
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f2:	f000 f827 	bl	800a444 <_malloc_usable_size_r>
 800a3f6:	42a0      	cmp	r0, r4
 800a3f8:	d20f      	bcs.n	800a41a <_realloc_r+0x48>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff fc19 	bl	8009c34 <_malloc_r>
 800a402:	4605      	mov	r5, r0
 800a404:	2800      	cmp	r0, #0
 800a406:	d0f2      	beq.n	800a3ee <_realloc_r+0x1c>
 800a408:	4631      	mov	r1, r6
 800a40a:	4622      	mov	r2, r4
 800a40c:	f7fc f852 	bl	80064b4 <memcpy>
 800a410:	4631      	mov	r1, r6
 800a412:	4638      	mov	r0, r7
 800a414:	f7ff fbc0 	bl	8009b98 <_free_r>
 800a418:	e7e9      	b.n	800a3ee <_realloc_r+0x1c>
 800a41a:	4635      	mov	r5, r6
 800a41c:	e7e7      	b.n	800a3ee <_realloc_r+0x1c>
	...

0800a420 <_read_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4c07      	ldr	r4, [pc, #28]	; (800a440 <_read_r+0x20>)
 800a424:	4605      	mov	r5, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	6022      	str	r2, [r4, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f8 fdd4 	bl	8002fdc <_read>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_read_r+0x1e>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_read_r+0x1e>
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20000ac4 	.word	0x20000ac4

0800a444 <_malloc_usable_size_r>:
 800a444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a448:	1f18      	subs	r0, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bfbc      	itt	lt
 800a44e:	580b      	ldrlt	r3, [r1, r0]
 800a450:	18c0      	addlt	r0, r0, r3
 800a452:	4770      	bx	lr

0800a454 <log>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	ed2d 8b02 	vpush	{d8}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	ec55 4b10 	vmov	r4, r5, d0
 800a460:	f000 f87a 	bl	800a558 <__ieee754_log>
 800a464:	4b36      	ldr	r3, [pc, #216]	; (800a540 <log+0xec>)
 800a466:	eeb0 8a40 	vmov.f32	s16, s0
 800a46a:	eef0 8a60 	vmov.f32	s17, s1
 800a46e:	f993 6000 	ldrsb.w	r6, [r3]
 800a472:	1c73      	adds	r3, r6, #1
 800a474:	d05b      	beq.n	800a52e <log+0xda>
 800a476:	4622      	mov	r2, r4
 800a478:	462b      	mov	r3, r5
 800a47a:	4620      	mov	r0, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7f6 fb75 	bl	8000b6c <__aeabi_dcmpun>
 800a482:	2800      	cmp	r0, #0
 800a484:	d153      	bne.n	800a52e <log+0xda>
 800a486:	2200      	movs	r2, #0
 800a488:	2300      	movs	r3, #0
 800a48a:	4620      	mov	r0, r4
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7f6 fb63 	bl	8000b58 <__aeabi_dcmpgt>
 800a492:	2800      	cmp	r0, #0
 800a494:	d14b      	bne.n	800a52e <log+0xda>
 800a496:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <log+0xf0>)
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	9008      	str	r0, [sp, #32]
 800a49c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a4a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a4a4:	b9a6      	cbnz	r6, 800a4d0 <log+0x7c>
 800a4a6:	4b28      	ldr	r3, [pc, #160]	; (800a548 <log+0xf4>)
 800a4a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a4ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f7f6 fb26 	bl	8000b08 <__aeabi_dcmpeq>
 800a4bc:	bb40      	cbnz	r0, 800a510 <log+0xbc>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	2e02      	cmp	r6, #2
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	d119      	bne.n	800a4fa <log+0xa6>
 800a4c6:	f7fb ffcb 	bl	8006460 <__errno>
 800a4ca:	2321      	movs	r3, #33	; 0x21
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	e019      	b.n	800a504 <log+0xb0>
 800a4d0:	4b1e      	ldr	r3, [pc, #120]	; (800a54c <log+0xf8>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4d8:	4620      	mov	r0, r4
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f6 fb12 	bl	8000b08 <__aeabi_dcmpeq>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d0ea      	beq.n	800a4be <log+0x6a>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	429e      	cmp	r6, r3
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	d111      	bne.n	800a514 <log+0xc0>
 800a4f0:	f7fb ffb6 	bl	8006460 <__errno>
 800a4f4:	2322      	movs	r3, #34	; 0x22
 800a4f6:	6003      	str	r3, [r0, #0]
 800a4f8:	e011      	b.n	800a51e <log+0xca>
 800a4fa:	4668      	mov	r0, sp
 800a4fc:	f000 f9de 	bl	800a8bc <matherr>
 800a500:	2800      	cmp	r0, #0
 800a502:	d0e0      	beq.n	800a4c6 <log+0x72>
 800a504:	4812      	ldr	r0, [pc, #72]	; (800a550 <log+0xfc>)
 800a506:	f000 f9db 	bl	800a8c0 <nan>
 800a50a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a50e:	e006      	b.n	800a51e <log+0xca>
 800a510:	2302      	movs	r3, #2
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4668      	mov	r0, sp
 800a516:	f000 f9d1 	bl	800a8bc <matherr>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0e8      	beq.n	800a4f0 <log+0x9c>
 800a51e:	9b08      	ldr	r3, [sp, #32]
 800a520:	b11b      	cbz	r3, 800a52a <log+0xd6>
 800a522:	f7fb ff9d 	bl	8006460 <__errno>
 800a526:	9b08      	ldr	r3, [sp, #32]
 800a528:	6003      	str	r3, [r0, #0]
 800a52a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a52e:	eeb0 0a48 	vmov.f32	s0, s16
 800a532:	eef0 0a68 	vmov.f32	s1, s17
 800a536:	b00a      	add	sp, #40	; 0x28
 800a538:	ecbd 8b02 	vpop	{d8}
 800a53c:	bd70      	pop	{r4, r5, r6, pc}
 800a53e:	bf00      	nop
 800a540:	20000314 	.word	0x20000314
 800a544:	0800af0e 	.word	0x0800af0e
 800a548:	c7efffff 	.word	0xc7efffff
 800a54c:	fff00000 	.word	0xfff00000
 800a550:	0800ae01 	.word	0x0800ae01
 800a554:	00000000 	.word	0x00000000

0800a558 <__ieee754_log>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ec51 0b10 	vmov	r0, r1, d0
 800a560:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a564:	b087      	sub	sp, #28
 800a566:	460d      	mov	r5, r1
 800a568:	da27      	bge.n	800a5ba <__ieee754_log+0x62>
 800a56a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a56e:	4303      	orrs	r3, r0
 800a570:	ee10 2a10 	vmov	r2, s0
 800a574:	d10a      	bne.n	800a58c <__ieee754_log+0x34>
 800a576:	49cc      	ldr	r1, [pc, #816]	; (800a8a8 <__ieee754_log+0x350>)
 800a578:	2200      	movs	r2, #0
 800a57a:	2300      	movs	r3, #0
 800a57c:	2000      	movs	r0, #0
 800a57e:	f7f6 f985 	bl	800088c <__aeabi_ddiv>
 800a582:	ec41 0b10 	vmov	d0, r0, r1
 800a586:	b007      	add	sp, #28
 800a588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58c:	2900      	cmp	r1, #0
 800a58e:	da05      	bge.n	800a59c <__ieee754_log+0x44>
 800a590:	460b      	mov	r3, r1
 800a592:	f7f5 fe99 	bl	80002c8 <__aeabi_dsub>
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	e7f0      	b.n	800a57e <__ieee754_log+0x26>
 800a59c:	4bc3      	ldr	r3, [pc, #780]	; (800a8ac <__ieee754_log+0x354>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f7f6 f84a 	bl	8000638 <__aeabi_dmul>
 800a5a4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	4ac1      	ldr	r2, [pc, #772]	; (800a8b0 <__ieee754_log+0x358>)
 800a5ac:	4295      	cmp	r5, r2
 800a5ae:	dd06      	ble.n	800a5be <__ieee754_log+0x66>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	f7f5 fe8a 	bl	80002cc <__adddf3>
 800a5b8:	e7e3      	b.n	800a582 <__ieee754_log+0x2a>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e7f5      	b.n	800a5aa <__ieee754_log+0x52>
 800a5be:	152c      	asrs	r4, r5, #20
 800a5c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a5c4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a5c8:	441c      	add	r4, r3
 800a5ca:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a5ce:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a5d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5d6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a5da:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a5de:	ea42 0105 	orr.w	r1, r2, r5
 800a5e2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4bb2      	ldr	r3, [pc, #712]	; (800a8b4 <__ieee754_log+0x35c>)
 800a5ea:	f7f5 fe6d 	bl	80002c8 <__aeabi_dsub>
 800a5ee:	1cab      	adds	r3, r5, #2
 800a5f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	4682      	mov	sl, r0
 800a5f8:	468b      	mov	fp, r1
 800a5fa:	f04f 0200 	mov.w	r2, #0
 800a5fe:	dc53      	bgt.n	800a6a8 <__ieee754_log+0x150>
 800a600:	2300      	movs	r3, #0
 800a602:	f7f6 fa81 	bl	8000b08 <__aeabi_dcmpeq>
 800a606:	b1d0      	cbz	r0, 800a63e <__ieee754_log+0xe6>
 800a608:	2c00      	cmp	r4, #0
 800a60a:	f000 8120 	beq.w	800a84e <__ieee754_log+0x2f6>
 800a60e:	4620      	mov	r0, r4
 800a610:	f7f5 ffa8 	bl	8000564 <__aeabi_i2d>
 800a614:	a390      	add	r3, pc, #576	; (adr r3, 800a858 <__ieee754_log+0x300>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	f7f6 f80b 	bl	8000638 <__aeabi_dmul>
 800a622:	a38f      	add	r3, pc, #572	; (adr r3, 800a860 <__ieee754_log+0x308>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	4604      	mov	r4, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f7f6 f802 	bl	8000638 <__aeabi_dmul>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	e7ba      	b.n	800a5b4 <__ieee754_log+0x5c>
 800a63e:	a38a      	add	r3, pc, #552	; (adr r3, 800a868 <__ieee754_log+0x310>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	4650      	mov	r0, sl
 800a646:	4659      	mov	r1, fp
 800a648:	f7f5 fff6 	bl	8000638 <__aeabi_dmul>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	2000      	movs	r0, #0
 800a652:	4999      	ldr	r1, [pc, #612]	; (800a8b8 <__ieee754_log+0x360>)
 800a654:	f7f5 fe38 	bl	80002c8 <__aeabi_dsub>
 800a658:	4652      	mov	r2, sl
 800a65a:	4606      	mov	r6, r0
 800a65c:	460f      	mov	r7, r1
 800a65e:	465b      	mov	r3, fp
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f5 ffe8 	bl	8000638 <__aeabi_dmul>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4630      	mov	r0, r6
 800a66e:	4639      	mov	r1, r7
 800a670:	f7f5 ffe2 	bl	8000638 <__aeabi_dmul>
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	b914      	cbnz	r4, 800a680 <__ieee754_log+0x128>
 800a67a:	4632      	mov	r2, r6
 800a67c:	463b      	mov	r3, r7
 800a67e:	e0a0      	b.n	800a7c2 <__ieee754_log+0x26a>
 800a680:	4620      	mov	r0, r4
 800a682:	f7f5 ff6f 	bl	8000564 <__aeabi_i2d>
 800a686:	a374      	add	r3, pc, #464	; (adr r3, 800a858 <__ieee754_log+0x300>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	f7f5 ffd2 	bl	8000638 <__aeabi_dmul>
 800a694:	a372      	add	r3, pc, #456	; (adr r3, 800a860 <__ieee754_log+0x308>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	4604      	mov	r4, r0
 800a69c:	460d      	mov	r5, r1
 800a69e:	4640      	mov	r0, r8
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	f7f5 ffc9 	bl	8000638 <__aeabi_dmul>
 800a6a6:	e0a5      	b.n	800a7f4 <__ieee754_log+0x29c>
 800a6a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6ac:	f7f5 fe0e 	bl	80002cc <__adddf3>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	f7f6 f8e8 	bl	800088c <__aeabi_ddiv>
 800a6bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f7f5 ff4f 	bl	8000564 <__aeabi_i2d>
 800a6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	f7f5 ffb1 	bl	8000638 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6de:	f7f5 ffab 	bl	8000638 <__aeabi_dmul>
 800a6e2:	a363      	add	r3, pc, #396	; (adr r3, 800a870 <__ieee754_log+0x318>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	4680      	mov	r8, r0
 800a6ea:	4689      	mov	r9, r1
 800a6ec:	f7f5 ffa4 	bl	8000638 <__aeabi_dmul>
 800a6f0:	a361      	add	r3, pc, #388	; (adr r3, 800a878 <__ieee754_log+0x320>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 fde9 	bl	80002cc <__adddf3>
 800a6fa:	4642      	mov	r2, r8
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	f7f5 ff9b 	bl	8000638 <__aeabi_dmul>
 800a702:	a35f      	add	r3, pc, #380	; (adr r3, 800a880 <__ieee754_log+0x328>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 fde0 	bl	80002cc <__adddf3>
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	f7f5 ff92 	bl	8000638 <__aeabi_dmul>
 800a714:	a35c      	add	r3, pc, #368	; (adr r3, 800a888 <__ieee754_log+0x330>)
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	f7f5 fdd7 	bl	80002cc <__adddf3>
 800a71e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a722:	f7f5 ff89 	bl	8000638 <__aeabi_dmul>
 800a726:	a35a      	add	r3, pc, #360	; (adr r3, 800a890 <__ieee754_log+0x338>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a730:	4640      	mov	r0, r8
 800a732:	4649      	mov	r1, r9
 800a734:	f7f5 ff80 	bl	8000638 <__aeabi_dmul>
 800a738:	a357      	add	r3, pc, #348	; (adr r3, 800a898 <__ieee754_log+0x340>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 fdc5 	bl	80002cc <__adddf3>
 800a742:	4642      	mov	r2, r8
 800a744:	464b      	mov	r3, r9
 800a746:	f7f5 ff77 	bl	8000638 <__aeabi_dmul>
 800a74a:	a355      	add	r3, pc, #340	; (adr r3, 800a8a0 <__ieee754_log+0x348>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 fdbc 	bl	80002cc <__adddf3>
 800a754:	4642      	mov	r2, r8
 800a756:	464b      	mov	r3, r9
 800a758:	f7f5 ff6e 	bl	8000638 <__aeabi_dmul>
 800a75c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a76c:	f7f5 fdae 	bl	80002cc <__adddf3>
 800a770:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800a774:	3551      	adds	r5, #81	; 0x51
 800a776:	4335      	orrs	r5, r6
 800a778:	2d00      	cmp	r5, #0
 800a77a:	4680      	mov	r8, r0
 800a77c:	4689      	mov	r9, r1
 800a77e:	dd48      	ble.n	800a812 <__ieee754_log+0x2ba>
 800a780:	2200      	movs	r2, #0
 800a782:	4b4d      	ldr	r3, [pc, #308]	; (800a8b8 <__ieee754_log+0x360>)
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f5 ff56 	bl	8000638 <__aeabi_dmul>
 800a78c:	4652      	mov	r2, sl
 800a78e:	465b      	mov	r3, fp
 800a790:	f7f5 ff52 	bl	8000638 <__aeabi_dmul>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4606      	mov	r6, r0
 800a79a:	460f      	mov	r7, r1
 800a79c:	4640      	mov	r0, r8
 800a79e:	4649      	mov	r1, r9
 800a7a0:	f7f5 fd94 	bl	80002cc <__adddf3>
 800a7a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7a8:	f7f5 ff46 	bl	8000638 <__aeabi_dmul>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	b964      	cbnz	r4, 800a7cc <__ieee754_log+0x274>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f5 fd85 	bl	80002c8 <__aeabi_dsub>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	f7f5 fd7f 	bl	80002c8 <__aeabi_dsub>
 800a7ca:	e6da      	b.n	800a582 <__ieee754_log+0x2a>
 800a7cc:	a322      	add	r3, pc, #136	; (adr r3, 800a858 <__ieee754_log+0x300>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d6:	f7f5 ff2f 	bl	8000638 <__aeabi_dmul>
 800a7da:	a321      	add	r3, pc, #132	; (adr r3, 800a860 <__ieee754_log+0x308>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e8:	f7f5 ff26 	bl	8000638 <__aeabi_dmul>
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	464b      	mov	r3, r9
 800a7f0:	f7f5 fd6c 	bl	80002cc <__adddf3>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	f7f5 fd64 	bl	80002c8 <__aeabi_dsub>
 800a800:	4652      	mov	r2, sl
 800a802:	465b      	mov	r3, fp
 800a804:	f7f5 fd60 	bl	80002c8 <__aeabi_dsub>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	4620      	mov	r0, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	e7d9      	b.n	800a7c6 <__ieee754_log+0x26e>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4650      	mov	r0, sl
 800a818:	4659      	mov	r1, fp
 800a81a:	f7f5 fd55 	bl	80002c8 <__aeabi_dsub>
 800a81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a822:	f7f5 ff09 	bl	8000638 <__aeabi_dmul>
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	2c00      	cmp	r4, #0
 800a82c:	f43f af25 	beq.w	800a67a <__ieee754_log+0x122>
 800a830:	a309      	add	r3, pc, #36	; (adr r3, 800a858 <__ieee754_log+0x300>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83a:	f7f5 fefd 	bl	8000638 <__aeabi_dmul>
 800a83e:	a308      	add	r3, pc, #32	; (adr r3, 800a860 <__ieee754_log+0x308>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	4604      	mov	r4, r0
 800a846:	460d      	mov	r5, r1
 800a848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a84c:	e729      	b.n	800a6a2 <__ieee754_log+0x14a>
 800a84e:	2000      	movs	r0, #0
 800a850:	2100      	movs	r1, #0
 800a852:	e696      	b.n	800a582 <__ieee754_log+0x2a>
 800a854:	f3af 8000 	nop.w
 800a858:	fee00000 	.word	0xfee00000
 800a85c:	3fe62e42 	.word	0x3fe62e42
 800a860:	35793c76 	.word	0x35793c76
 800a864:	3dea39ef 	.word	0x3dea39ef
 800a868:	55555555 	.word	0x55555555
 800a86c:	3fd55555 	.word	0x3fd55555
 800a870:	df3e5244 	.word	0xdf3e5244
 800a874:	3fc2f112 	.word	0x3fc2f112
 800a878:	96cb03de 	.word	0x96cb03de
 800a87c:	3fc74664 	.word	0x3fc74664
 800a880:	94229359 	.word	0x94229359
 800a884:	3fd24924 	.word	0x3fd24924
 800a888:	55555593 	.word	0x55555593
 800a88c:	3fe55555 	.word	0x3fe55555
 800a890:	d078c69f 	.word	0xd078c69f
 800a894:	3fc39a09 	.word	0x3fc39a09
 800a898:	1d8e78af 	.word	0x1d8e78af
 800a89c:	3fcc71c5 	.word	0x3fcc71c5
 800a8a0:	9997fa04 	.word	0x9997fa04
 800a8a4:	3fd99999 	.word	0x3fd99999
 800a8a8:	c3500000 	.word	0xc3500000
 800a8ac:	43500000 	.word	0x43500000
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	3fe00000 	.word	0x3fe00000

0800a8bc <matherr>:
 800a8bc:	2000      	movs	r0, #0
 800a8be:	4770      	bx	lr

0800a8c0 <nan>:
 800a8c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8c8 <nan+0x8>
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	00000000 	.word	0x00000000
 800a8cc:	7ff80000 	.word	0x7ff80000

0800a8d0 <_init>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	bf00      	nop
 800a8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d6:	bc08      	pop	{r3}
 800a8d8:	469e      	mov	lr, r3
 800a8da:	4770      	bx	lr

0800a8dc <_fini>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	bf00      	nop
 800a8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e2:	bc08      	pop	{r3}
 800a8e4:	469e      	mov	lr, r3
 800a8e6:	4770      	bx	lr
